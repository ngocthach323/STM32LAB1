
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000070  080026b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080026b4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ea7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001716  00000000  00000000  00026f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00028658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00028b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753a  00000000  00000000  00028f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e04  00000000  00000000  0004045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f01a  00000000  00000000  0004625e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a18  00000000  00000000  000c52cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080024b4 	.word	0x080024b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080024b4 	.word	0x080024b4

0800014c <setFullOnClock>:
 *  Created on: Sep 10, 2024
 *      Author: ACER
 */
#include "excercise9.h"

void setFullOnClock() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	481f      	ldr	r0, [pc, #124]	; (80001d4 <setFullOnClock+0x88>)
 8000156:	f000 fd7b 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	481d      	ldr	r0, [pc, #116]	; (80001d4 <setFullOnClock+0x88>)
 8000160:	f000 fd76 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	481a      	ldr	r0, [pc, #104]	; (80001d4 <setFullOnClock+0x88>)
 800016a:	f000 fd71 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800016e:	2201      	movs	r2, #1
 8000170:	2108      	movs	r1, #8
 8000172:	4818      	ldr	r0, [pc, #96]	; (80001d4 <setFullOnClock+0x88>)
 8000174:	f000 fd6c 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4815      	ldr	r0, [pc, #84]	; (80001d4 <setFullOnClock+0x88>)
 800017e:	f000 fd67 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2120      	movs	r1, #32
 8000186:	4813      	ldr	r0, [pc, #76]	; (80001d4 <setFullOnClock+0x88>)
 8000188:	f000 fd62 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4810      	ldr	r0, [pc, #64]	; (80001d4 <setFullOnClock+0x88>)
 8000192:	f000 fd5d 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	480e      	ldr	r0, [pc, #56]	; (80001d4 <setFullOnClock+0x88>)
 800019c:	f000 fd58 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	480b      	ldr	r0, [pc, #44]	; (80001d4 <setFullOnClock+0x88>)
 80001a8:	f000 fd52 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <setFullOnClock+0x88>)
 80001b4:	f000 fd4c 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001be:	4805      	ldr	r0, [pc, #20]	; (80001d4 <setFullOnClock+0x88>)
 80001c0:	f000 fd46 	bl	8000c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	4802      	ldr	r0, [pc, #8]	; (80001d4 <setFullOnClock+0x88>)
 80001cc:	f000 fd40 	bl	8000c50 <HAL_GPIO_WritePin>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40010c00 	.word	0x40010c00

080001d8 <clearNumberOnClock>:

void clearNumberOnClock(int num) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0b      	cmp	r3, #11
 80001e4:	d866      	bhi.n	80002b4 <clearNumberOnClock+0xdc>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <clearNumberOnClock+0x14>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	0800021d 	.word	0x0800021d
 80001f0:	0800022b 	.word	0x0800022b
 80001f4:	08000237 	.word	0x08000237
 80001f8:	08000243 	.word	0x08000243
 80001fc:	0800024f 	.word	0x0800024f
 8000200:	0800025b 	.word	0x0800025b
 8000204:	08000267 	.word	0x08000267
 8000208:	08000273 	.word	0x08000273
 800020c:	0800027f 	.word	0x0800027f
 8000210:	0800028b 	.word	0x0800028b
 8000214:	08000299 	.word	0x08000299
 8000218:	080002a7 	.word	0x080002a7
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000222:	4826      	ldr	r0, [pc, #152]	; (80002bc <clearNumberOnClock+0xe4>)
 8000224:	f000 fd14 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000228:	e044      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2101      	movs	r1, #1
 800022e:	4823      	ldr	r0, [pc, #140]	; (80002bc <clearNumberOnClock+0xe4>)
 8000230:	f000 fd0e 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000234:	e03e      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2102      	movs	r1, #2
 800023a:	4820      	ldr	r0, [pc, #128]	; (80002bc <clearNumberOnClock+0xe4>)
 800023c:	f000 fd08 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000240:	e038      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2104      	movs	r1, #4
 8000246:	481d      	ldr	r0, [pc, #116]	; (80002bc <clearNumberOnClock+0xe4>)
 8000248:	f000 fd02 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 800024c:	e032      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2108      	movs	r1, #8
 8000252:	481a      	ldr	r0, [pc, #104]	; (80002bc <clearNumberOnClock+0xe4>)
 8000254:	f000 fcfc 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000258:	e02c      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2110      	movs	r1, #16
 800025e:	4817      	ldr	r0, [pc, #92]	; (80002bc <clearNumberOnClock+0xe4>)
 8000260:	f000 fcf6 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000264:	e026      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2120      	movs	r1, #32
 800026a:	4814      	ldr	r0, [pc, #80]	; (80002bc <clearNumberOnClock+0xe4>)
 800026c:	f000 fcf0 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000270:	e020      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2140      	movs	r1, #64	; 0x40
 8000276:	4811      	ldr	r0, [pc, #68]	; (80002bc <clearNumberOnClock+0xe4>)
 8000278:	f000 fcea 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 800027c:	e01a      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2180      	movs	r1, #128	; 0x80
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <clearNumberOnClock+0xe4>)
 8000284:	f000 fce4 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000288:	e014      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <clearNumberOnClock+0xe4>)
 8000292:	f000 fcdd 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 8000296:	e00d      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 10:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	4807      	ldr	r0, [pc, #28]	; (80002bc <clearNumberOnClock+0xe4>)
 80002a0:	f000 fcd6 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 80002a4:	e006      	b.n	80002b4 <clearNumberOnClock+0xdc>
		case 11:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <clearNumberOnClock+0xe4>)
 80002ae:	f000 fccf 	bl	8000c50 <HAL_GPIO_WritePin>
			break;
 80002b2:	bf00      	nop
	}
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010c00 	.word	0x40010c00

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 f9e0 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f822 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f85c 	bl	8000388 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = rand() % 12;
 80002d0:	f001 f8e4 	bl	800149c <rand>
 80002d4:	4601      	mov	r1, r0
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <main+0x48>)
 80002d8:	fb83 2301 	smull	r2, r3, r3, r1
 80002dc:	105a      	asrs	r2, r3, #1
 80002de:	17cb      	asrs	r3, r1, #31
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	1aca      	subs	r2, r1, r3
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <main+0x4c>)
 80002ee:	601a      	str	r2, [r3, #0]
	  clearNumberOnClock(count);
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <main+0x4c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff6f 	bl	80001d8 <clearNumberOnClock>
	  HAL_Delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 fa25 	bl	800074c <HAL_Delay>
	  setFullOnClock();
 8000302:	f7ff ff23 	bl	800014c <setFullOnClock>
	  count = rand() % 12;
 8000306:	e7e3      	b.n	80002d0 <main+0x10>
 8000308:	2aaaaaab 	.word	0x2aaaaaab
 800030c:	2000008c 	.word	0x2000008c

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 f8b4 	bl	800148c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	2310      	movs	r3, #16
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033e:	2300      	movs	r3, #0
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fc9a 	bl	8000c80 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000352:	f000 f84d 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f000 ff06 	bl	8001180 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037a:	f000 f839 	bl	80003f0 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_GPIO_Init+0x60>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <MX_GPIO_Init+0x60>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_GPIO_Init+0x60>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003b4:	2200      	movs	r2, #0
 80003b6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80003ba:	480c      	ldr	r0, [pc, #48]	; (80003ec <MX_GPIO_Init+0x64>)
 80003bc:	f000 fc48 	bl	8000c50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003c0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80003c4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2302      	movs	r3, #2
 80003d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	4619      	mov	r1, r3
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_GPIO_Init+0x64>)
 80003da:	f000 fabf 	bl	800095c <HAL_GPIO_Init>

}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a6:	f000 f935 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}

080004ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	return 1;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <_kill>:

int _kill(int pid, int sig)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80004c6:	f000 ffb7 	bl	8001438 <__errno>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2216      	movs	r2, #22
 80004ce:	601a      	str	r2, [r3, #0]
	return -1;
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <_exit>:

void _exit (int status)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80004e4:	f04f 31ff 	mov.w	r1, #4294967295
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ffe7 	bl	80004bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80004ee:	e7fe      	b.n	80004ee <_exit+0x12>

080004f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	e00a      	b.n	8000518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000502:	f3af 8000 	nop.w
 8000506:	4601      	mov	r1, r0
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	60ba      	str	r2, [r7, #8]
 800050e:	b2ca      	uxtb	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	3301      	adds	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	dbf0      	blt.n	8000502 <_read+0x12>
	}

return len;
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b086      	sub	sp, #24
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e009      	b.n	8000550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf1      	blt.n	800053c <_write+0x12>
	}
	return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_close>:

int _close(int file)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	return -1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000588:	605a      	str	r2, [r3, #4]
	return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_isatty>:

int _isatty(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	return 1;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f000 ff20 	bl	8001438 <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20002800 	.word	0x20002800
 8000624:	00000400 	.word	0x00000400
 8000628:	20000090 	.word	0x20000090
 800062c:	200000b0 	.word	0x200000b0

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff fff8 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000658:	4c09      	ldr	r4, [pc, #36]	; (8000680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f000 feed 	bl	8001444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fe29 	bl	80002c0 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000678:	08002644 	.word	0x08002644
  ldr r2, =_sbss
 800067c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000680:	200000b0 	.word	0x200000b0

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f92b 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff feaa 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f935 	bl	8000942 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f000 f90b 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	2000009c 	.word	0x2000009c

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	2000009c 	.word	0x2000009c

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000754:	f7ff fff0 	bl	8000738 <HAL_GetTick>
 8000758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d005      	beq.n	8000772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_Delay+0x44>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000772:	bf00      	nop
 8000774:	f7ff ffe0 	bl	8000738 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8f7      	bhi.n	8000774 <HAL_Delay+0x28>
  {
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff90 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff49 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff5e 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff90 	bl	800084c <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5f 	bl	80007f8 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffb0 	bl	80008b0 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b08b      	sub	sp, #44	; 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e148      	b.n	8000c02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000970:	2201      	movs	r2, #1
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	f040 8137 	bne.w	8000bfc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4aa3      	ldr	r2, [pc, #652]	; (8000c20 <HAL_GPIO_Init+0x2c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d05e      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 8000998:	4aa1      	ldr	r2, [pc, #644]	; (8000c20 <HAL_GPIO_Init+0x2c4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d875      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 800099e:	4aa1      	ldr	r2, [pc, #644]	; (8000c24 <HAL_GPIO_Init+0x2c8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d058      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009a4:	4a9f      	ldr	r2, [pc, #636]	; (8000c24 <HAL_GPIO_Init+0x2c8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d86f      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009aa:	4a9f      	ldr	r2, [pc, #636]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d052      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009b0:	4a9d      	ldr	r2, [pc, #628]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d869      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009b6:	4a9d      	ldr	r2, [pc, #628]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d04c      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009bc:	4a9b      	ldr	r2, [pc, #620]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d863      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009c2:	4a9b      	ldr	r2, [pc, #620]	; (8000c30 <HAL_GPIO_Init+0x2d4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d046      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009c8:	4a99      	ldr	r2, [pc, #612]	; (8000c30 <HAL_GPIO_Init+0x2d4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d85d      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d82a      	bhi.n	8000a28 <HAL_GPIO_Init+0xcc>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d859      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <HAL_GPIO_Init+0x80>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a31 	.word	0x08000a31
 80009e4:	08000a43 	.word	0x08000a43
 80009e8:	08000a85 	.word	0x08000a85
 80009ec:	08000a8b 	.word	0x08000a8b
 80009f0:	08000a8b 	.word	0x08000a8b
 80009f4:	08000a8b 	.word	0x08000a8b
 80009f8:	08000a8b 	.word	0x08000a8b
 80009fc:	08000a8b 	.word	0x08000a8b
 8000a00:	08000a8b 	.word	0x08000a8b
 8000a04:	08000a8b 	.word	0x08000a8b
 8000a08:	08000a8b 	.word	0x08000a8b
 8000a0c:	08000a8b 	.word	0x08000a8b
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a8b 	.word	0x08000a8b
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a8b 	.word	0x08000a8b
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	4a82      	ldr	r2, [pc, #520]	; (8000c34 <HAL_GPIO_Init+0x2d8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2e:	e02c      	b.n	8000a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e029      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e024      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e01f      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	330c      	adds	r3, #12
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e01a      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e013      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	611a      	str	r2, [r3, #16]
          break;
 8000a76:	e009      	b.n	8000a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	615a      	str	r2, [r3, #20]
          break;
 8000a82:	e003      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          break;
 8000a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2bff      	cmp	r3, #255	; 0xff
 8000a90:	d801      	bhi.n	8000a96 <HAL_GPIO_Init+0x13a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	e001      	b.n	8000a9a <HAL_GPIO_Init+0x13e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	; 0xff
 8000aa0:	d802      	bhi.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x152>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	3b08      	subs	r3, #8
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	6a39      	ldr	r1, [r7, #32]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8090 	beq.w	8000bfc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000adc:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <HAL_GPIO_Init+0x2dc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a55      	ldr	r2, [pc, #340]	; (8000c38 <HAL_GPIO_Init+0x2dc>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b53      	ldr	r3, [pc, #332]	; (8000c38 <HAL_GPIO_Init+0x2dc>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af4:	4a51      	ldr	r2, [pc, #324]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <HAL_GPIO_Init+0x2e4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <HAL_GPIO_Init+0x2e8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1dc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <HAL_GPIO_Init+0x2ec>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1d8>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b4e:	493b      	ldr	r1, [pc, #236]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	4937      	ldr	r1, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4933      	ldr	r1, [pc, #204]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	492d      	ldr	r1, [pc, #180]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4929      	ldr	r1, [pc, #164]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4923      	ldr	r1, [pc, #140]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	491f      	ldr	r1, [pc, #124]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4919      	ldr	r1, [pc, #100]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4915      	ldr	r1, [pc, #84]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	3301      	adds	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f47f aeaf 	bne.w	8000970 <HAL_GPIO_Init+0x14>
  }
}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	372c      	adds	r7, #44	; 0x2c
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	10320000 	.word	0x10320000
 8000c24:	10310000 	.word	0x10310000
 8000c28:	10220000 	.word	0x10220000
 8000c2c:	10210000 	.word	0x10210000
 8000c30:	10120000 	.word	0x10120000
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c6c:	e003      	b.n	8000c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	041a      	lsls	r2, r3, #16
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	611a      	str	r2, [r3, #16]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e26c      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 8087 	beq.w	8000dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca0:	4b92      	ldr	r3, [pc, #584]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d00c      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d112      	bne.n	8000cde <HAL_RCC_OscConfig+0x5e>
 8000cb8:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d10b      	bne.n	8000cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	4b89      	ldr	r3, [pc, #548]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d06c      	beq.n	8000dac <HAL_RCC_OscConfig+0x12c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d168      	bne.n	8000dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e246      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce6:	d106      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x76>
 8000ce8:	4b80      	ldr	r3, [pc, #512]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a7f      	ldr	r2, [pc, #508]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e02e      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x98>
 8000cfe:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b78      	ldr	r3, [pc, #480]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a77      	ldr	r2, [pc, #476]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e01d      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0xbc>
 8000d22:	4b72      	ldr	r3, [pc, #456]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a71      	ldr	r2, [pc, #452]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a6e      	ldr	r2, [pc, #440]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e00b      	b.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a67      	ldr	r2, [pc, #412]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fcec 	bl	8000738 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fce8 	bl	8000738 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e1fa      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0xe4>
 8000d82:	e014      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fcd8 	bl	8000738 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fcd4 	bl	8000738 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e1e6      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x10c>
 8000daa:	e000      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d063      	beq.n	8000e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00b      	beq.n	8000dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc6:	4b49      	ldr	r3, [pc, #292]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d11c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x18c>
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d116      	bne.n	8000e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <HAL_RCC_OscConfig+0x176>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d001      	beq.n	8000df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e1ba      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4939      	ldr	r1, [pc, #228]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	e03a      	b.n	8000e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d020      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fc8d 	bl	8000738 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fc89 	bl	8000738 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e19b      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4927      	ldr	r1, [pc, #156]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	600b      	str	r3, [r1, #0]
 8000e54:	e015      	b.n	8000e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc6c 	bl	8000738 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc68 	bl	8000738 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e17a      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d03a      	beq.n	8000f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_RCC_OscConfig+0x274>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fc4c 	bl	8000738 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc48 	bl	8000738 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e15a      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fa9a 	bl	80013fc <RCC_Delay>
 8000ec8:	e01c      	b.n	8000f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc32 	bl	8000738 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed6:	e00f      	b.n	8000ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc2e 	bl	8000738 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d908      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e140      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42420000 	.word	0x42420000
 8000ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef8:	4b9e      	ldr	r3, [pc, #632]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e9      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a6 	beq.w	800105e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f16:	4b97      	ldr	r3, [pc, #604]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10d      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b94      	ldr	r3, [pc, #592]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a93      	ldr	r2, [pc, #588]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b91      	ldr	r3, [pc, #580]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <HAL_RCC_OscConfig+0x4f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d118      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	; (8001178 <HAL_RCC_OscConfig+0x4f8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a8a      	ldr	r2, [pc, #552]	; (8001178 <HAL_RCC_OscConfig+0x4f8>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fbef 	bl	8000738 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff fbeb 	bl	8000738 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0fd      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	4b81      	ldr	r3, [pc, #516]	; (8001178 <HAL_RCC_OscConfig+0x4f8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x312>
 8000f84:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4a7a      	ldr	r2, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6213      	str	r3, [r2, #32]
 8000f90:	e02d      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x334>
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a75      	ldr	r2, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	4b73      	ldr	r3, [pc, #460]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a72      	ldr	r2, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6213      	str	r3, [r2, #32]
 8000fb2:	e01c      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d10c      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x356>
 8000fbc:	4b6d      	ldr	r3, [pc, #436]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a6c      	ldr	r2, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a69      	ldr	r2, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e00b      	b.n	8000fee <HAL_RCC_OscConfig+0x36e>
 8000fd6:	4b67      	ldr	r3, [pc, #412]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a66      	ldr	r2, [pc, #408]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6213      	str	r3, [r2, #32]
 8000fe2:	4b64      	ldr	r3, [pc, #400]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a63      	ldr	r2, [pc, #396]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d015      	beq.n	8001022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb9f 	bl	8000738 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fb9b 	bl	8000738 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e0ab      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001014:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0ee      	beq.n	8000ffe <HAL_RCC_OscConfig+0x37e>
 8001020:	e014      	b.n	800104c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb89 	bl	8000738 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fb85 	bl	8000738 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e095      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001040:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ee      	bne.n	800102a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d105      	bne.n	800105e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001052:	4b48      	ldr	r3, [pc, #288]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8081 	beq.w	800116a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d061      	beq.n	8001138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d146      	bne.n	800110a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_RCC_OscConfig+0x4fc>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fb59 	bl	8000738 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff fb55 	bl	8000738 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e067      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b0:	d108      	bne.n	80010c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	492d      	ldr	r1, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a19      	ldr	r1, [r3, #32]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	430b      	orrs	r3, r1
 80010d6:	4927      	ldr	r1, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x4fc>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb29 	bl	8000738 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fb25 	bl	8000738 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e037      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x46a>
 8001108:	e02f      	b.n	800116a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_RCC_OscConfig+0x4fc>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fb12 	bl	8000738 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fb0e 	bl	8000738 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e020      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x498>
 8001136:	e018      	b.n	800116a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e013      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_RCC_OscConfig+0x4f4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	429a      	cmp	r2, r3
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40007000 	.word	0x40007000
 800117c:	42420060 	.word	0x42420060

08001180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0d0      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d910      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 0207 	bic.w	r2, r3, #7
 80011aa:	4965      	ldr	r1, [pc, #404]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b8      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	494d      	ldr	r1, [pc, #308]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d040      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d115      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e07f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e073      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06b      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4936      	ldr	r1, [pc, #216]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fa62 	bl	8000738 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fa5e 	bl	8000738 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e053      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d210      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 0207 	bic.w	r2, r3, #7
 80012b6:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e032      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130e:	f000 f821 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1cc>)
 8001328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1d0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9c0 	bl	80006b4 <HAL_InitTick>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000
 8001344:	40021000 	.word	0x40021000
 8001348:	080024cc 	.word	0x080024cc
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b04      	cmp	r3, #4
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x30>
 800137e:	2b08      	cmp	r3, #8
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x36>
 8001382:	e027      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001386:	613b      	str	r3, [r7, #16]
      break;
 8001388:	e027      	b.n	80013da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d010      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	0c5b      	lsrs	r3, r3, #17
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 80013b6:	fb02 f203 	mul.w	r2, r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e004      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	613b      	str	r3, [r7, #16]
      break;
 80013d2:	e002      	b.n	80013da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 80013d6:	613b      	str	r3, [r7, #16]
      break;
 80013d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013da:	693b      	ldr	r3, [r7, #16]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	007a1200 	.word	0x007a1200
 80013f0:	080024dc 	.word	0x080024dc
 80013f4:	080024ec 	.word	0x080024ec
 80013f8:	003d0900 	.word	0x003d0900

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <__errno>:
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <__errno+0x8>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2000000c 	.word	0x2000000c

08001444 <__libc_init_array>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	2600      	movs	r6, #0
 8001448:	4d0c      	ldr	r5, [pc, #48]	; (800147c <__libc_init_array+0x38>)
 800144a:	4c0d      	ldr	r4, [pc, #52]	; (8001480 <__libc_init_array+0x3c>)
 800144c:	1b64      	subs	r4, r4, r5
 800144e:	10a4      	asrs	r4, r4, #2
 8001450:	42a6      	cmp	r6, r4
 8001452:	d109      	bne.n	8001468 <__libc_init_array+0x24>
 8001454:	f001 f82e 	bl	80024b4 <_init>
 8001458:	2600      	movs	r6, #0
 800145a:	4d0a      	ldr	r5, [pc, #40]	; (8001484 <__libc_init_array+0x40>)
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <__libc_init_array+0x44>)
 800145e:	1b64      	subs	r4, r4, r5
 8001460:	10a4      	asrs	r4, r4, #2
 8001462:	42a6      	cmp	r6, r4
 8001464:	d105      	bne.n	8001472 <__libc_init_array+0x2e>
 8001466:	bd70      	pop	{r4, r5, r6, pc}
 8001468:	f855 3b04 	ldr.w	r3, [r5], #4
 800146c:	4798      	blx	r3
 800146e:	3601      	adds	r6, #1
 8001470:	e7ee      	b.n	8001450 <__libc_init_array+0xc>
 8001472:	f855 3b04 	ldr.w	r3, [r5], #4
 8001476:	4798      	blx	r3
 8001478:	3601      	adds	r6, #1
 800147a:	e7f2      	b.n	8001462 <__libc_init_array+0x1e>
 800147c:	0800263c 	.word	0x0800263c
 8001480:	0800263c 	.word	0x0800263c
 8001484:	0800263c 	.word	0x0800263c
 8001488:	08002640 	.word	0x08002640

0800148c <memset>:
 800148c:	4603      	mov	r3, r0
 800148e:	4402      	add	r2, r0
 8001490:	4293      	cmp	r3, r2
 8001492:	d100      	bne.n	8001496 <memset+0xa>
 8001494:	4770      	bx	lr
 8001496:	f803 1b01 	strb.w	r1, [r3], #1
 800149a:	e7f9      	b.n	8001490 <memset+0x4>

0800149c <rand>:
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <rand+0x60>)
 800149e:	b510      	push	{r4, lr}
 80014a0:	681c      	ldr	r4, [r3, #0]
 80014a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014a4:	b9b3      	cbnz	r3, 80014d4 <rand+0x38>
 80014a6:	2018      	movs	r0, #24
 80014a8:	f000 f868 	bl	800157c <malloc>
 80014ac:	4602      	mov	r2, r0
 80014ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80014b0:	b920      	cbnz	r0, 80014bc <rand+0x20>
 80014b2:	214e      	movs	r1, #78	; 0x4e
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <rand+0x64>)
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <rand+0x68>)
 80014b8:	f000 f830 	bl	800151c <__assert_func>
 80014bc:	4912      	ldr	r1, [pc, #72]	; (8001508 <rand+0x6c>)
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <rand+0x70>)
 80014c0:	e9c0 1300 	strd	r1, r3, [r0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <rand+0x74>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	6083      	str	r3, [r0, #8]
 80014ca:	230b      	movs	r3, #11
 80014cc:	8183      	strh	r3, [r0, #12]
 80014ce:	2001      	movs	r0, #1
 80014d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80014d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <rand+0x78>)
 80014d8:	690a      	ldr	r2, [r1, #16]
 80014da:	694b      	ldr	r3, [r1, #20]
 80014dc:	4350      	muls	r0, r2
 80014de:	4c0e      	ldr	r4, [pc, #56]	; (8001518 <rand+0x7c>)
 80014e0:	fb04 0003 	mla	r0, r4, r3, r0
 80014e4:	fba2 3404 	umull	r3, r4, r2, r4
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4404      	add	r4, r0
 80014ec:	f144 0000 	adc.w	r0, r4, #0
 80014f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80014f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	bf00      	nop
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	080024f4 	.word	0x080024f4
 8001504:	0800250b 	.word	0x0800250b
 8001508:	abcd330e 	.word	0xabcd330e
 800150c:	e66d1234 	.word	0xe66d1234
 8001510:	0005deec 	.word	0x0005deec
 8001514:	5851f42d 	.word	0x5851f42d
 8001518:	4c957f2d 	.word	0x4c957f2d

0800151c <__assert_func>:
 800151c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800151e:	4614      	mov	r4, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <__assert_func+0x2c>)
 8001524:	4605      	mov	r5, r0
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d8      	ldr	r0, [r3, #12]
 800152a:	b14c      	cbz	r4, 8001540 <__assert_func+0x24>
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <__assert_func+0x30>)
 800152e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001532:	9100      	str	r1, [sp, #0]
 8001534:	462b      	mov	r3, r5
 8001536:	4906      	ldr	r1, [pc, #24]	; (8001550 <__assert_func+0x34>)
 8001538:	f000 f80e 	bl	8001558 <fiprintf>
 800153c:	f000 fc8a 	bl	8001e54 <abort>
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__assert_func+0x38>)
 8001542:	461c      	mov	r4, r3
 8001544:	e7f3      	b.n	800152e <__assert_func+0x12>
 8001546:	bf00      	nop
 8001548:	2000000c 	.word	0x2000000c
 800154c:	0800256a 	.word	0x0800256a
 8001550:	08002577 	.word	0x08002577
 8001554:	080025a5 	.word	0x080025a5

08001558 <fiprintf>:
 8001558:	b40e      	push	{r1, r2, r3}
 800155a:	b503      	push	{r0, r1, lr}
 800155c:	4601      	mov	r1, r0
 800155e:	ab03      	add	r3, sp, #12
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <fiprintf+0x20>)
 8001562:	f853 2b04 	ldr.w	r2, [r3], #4
 8001566:	6800      	ldr	r0, [r0, #0]
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f000 f8dd 	bl	8001728 <_vfiprintf_r>
 800156e:	b002      	add	sp, #8
 8001570:	f85d eb04 	ldr.w	lr, [sp], #4
 8001574:	b003      	add	sp, #12
 8001576:	4770      	bx	lr
 8001578:	2000000c 	.word	0x2000000c

0800157c <malloc>:
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <malloc+0xc>)
 800157e:	4601      	mov	r1, r0
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f000 b84f 	b.w	8001624 <_malloc_r>
 8001586:	bf00      	nop
 8001588:	2000000c 	.word	0x2000000c

0800158c <_free_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4605      	mov	r5, r0
 8001590:	2900      	cmp	r1, #0
 8001592:	d043      	beq.n	800161c <_free_r+0x90>
 8001594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001598:	1f0c      	subs	r4, r1, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	bfb8      	it	lt
 800159e:	18e4      	addlt	r4, r4, r3
 80015a0:	f000 fe8c 	bl	80022bc <__malloc_lock>
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <_free_r+0x94>)
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	4610      	mov	r0, r2
 80015aa:	b933      	cbnz	r3, 80015ba <_free_r+0x2e>
 80015ac:	6063      	str	r3, [r4, #4]
 80015ae:	6014      	str	r4, [r2, #0]
 80015b0:	4628      	mov	r0, r5
 80015b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015b6:	f000 be87 	b.w	80022c8 <__malloc_unlock>
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	d90a      	bls.n	80015d4 <_free_r+0x48>
 80015be:	6821      	ldr	r1, [r4, #0]
 80015c0:	1862      	adds	r2, r4, r1
 80015c2:	4293      	cmp	r3, r2
 80015c4:	bf01      	itttt	eq
 80015c6:	681a      	ldreq	r2, [r3, #0]
 80015c8:	685b      	ldreq	r3, [r3, #4]
 80015ca:	1852      	addeq	r2, r2, r1
 80015cc:	6022      	streq	r2, [r4, #0]
 80015ce:	6063      	str	r3, [r4, #4]
 80015d0:	6004      	str	r4, [r0, #0]
 80015d2:	e7ed      	b.n	80015b0 <_free_r+0x24>
 80015d4:	461a      	mov	r2, r3
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	b10b      	cbz	r3, 80015de <_free_r+0x52>
 80015da:	42a3      	cmp	r3, r4
 80015dc:	d9fa      	bls.n	80015d4 <_free_r+0x48>
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	1850      	adds	r0, r2, r1
 80015e2:	42a0      	cmp	r0, r4
 80015e4:	d10b      	bne.n	80015fe <_free_r+0x72>
 80015e6:	6820      	ldr	r0, [r4, #0]
 80015e8:	4401      	add	r1, r0
 80015ea:	1850      	adds	r0, r2, r1
 80015ec:	4283      	cmp	r3, r0
 80015ee:	6011      	str	r1, [r2, #0]
 80015f0:	d1de      	bne.n	80015b0 <_free_r+0x24>
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4401      	add	r1, r0
 80015f8:	6011      	str	r1, [r2, #0]
 80015fa:	6053      	str	r3, [r2, #4]
 80015fc:	e7d8      	b.n	80015b0 <_free_r+0x24>
 80015fe:	d902      	bls.n	8001606 <_free_r+0x7a>
 8001600:	230c      	movs	r3, #12
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	e7d4      	b.n	80015b0 <_free_r+0x24>
 8001606:	6820      	ldr	r0, [r4, #0]
 8001608:	1821      	adds	r1, r4, r0
 800160a:	428b      	cmp	r3, r1
 800160c:	bf01      	itttt	eq
 800160e:	6819      	ldreq	r1, [r3, #0]
 8001610:	685b      	ldreq	r3, [r3, #4]
 8001612:	1809      	addeq	r1, r1, r0
 8001614:	6021      	streq	r1, [r4, #0]
 8001616:	6063      	str	r3, [r4, #4]
 8001618:	6054      	str	r4, [r2, #4]
 800161a:	e7c9      	b.n	80015b0 <_free_r+0x24>
 800161c:	bd38      	pop	{r3, r4, r5, pc}
 800161e:	bf00      	nop
 8001620:	20000094 	.word	0x20000094

08001624 <_malloc_r>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	1ccd      	adds	r5, r1, #3
 8001628:	f025 0503 	bic.w	r5, r5, #3
 800162c:	3508      	adds	r5, #8
 800162e:	2d0c      	cmp	r5, #12
 8001630:	bf38      	it	cc
 8001632:	250c      	movcc	r5, #12
 8001634:	2d00      	cmp	r5, #0
 8001636:	4606      	mov	r6, r0
 8001638:	db01      	blt.n	800163e <_malloc_r+0x1a>
 800163a:	42a9      	cmp	r1, r5
 800163c:	d903      	bls.n	8001646 <_malloc_r+0x22>
 800163e:	230c      	movs	r3, #12
 8001640:	6033      	str	r3, [r6, #0]
 8001642:	2000      	movs	r0, #0
 8001644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001646:	f000 fe39 	bl	80022bc <__malloc_lock>
 800164a:	4921      	ldr	r1, [pc, #132]	; (80016d0 <_malloc_r+0xac>)
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	4614      	mov	r4, r2
 8001650:	b99c      	cbnz	r4, 800167a <_malloc_r+0x56>
 8001652:	4f20      	ldr	r7, [pc, #128]	; (80016d4 <_malloc_r+0xb0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b923      	cbnz	r3, 8001662 <_malloc_r+0x3e>
 8001658:	4621      	mov	r1, r4
 800165a:	4630      	mov	r0, r6
 800165c:	f000 fb2a 	bl	8001cb4 <_sbrk_r>
 8001660:	6038      	str	r0, [r7, #0]
 8001662:	4629      	mov	r1, r5
 8001664:	4630      	mov	r0, r6
 8001666:	f000 fb25 	bl	8001cb4 <_sbrk_r>
 800166a:	1c43      	adds	r3, r0, #1
 800166c:	d123      	bne.n	80016b6 <_malloc_r+0x92>
 800166e:	230c      	movs	r3, #12
 8001670:	4630      	mov	r0, r6
 8001672:	6033      	str	r3, [r6, #0]
 8001674:	f000 fe28 	bl	80022c8 <__malloc_unlock>
 8001678:	e7e3      	b.n	8001642 <_malloc_r+0x1e>
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	1b5b      	subs	r3, r3, r5
 800167e:	d417      	bmi.n	80016b0 <_malloc_r+0x8c>
 8001680:	2b0b      	cmp	r3, #11
 8001682:	d903      	bls.n	800168c <_malloc_r+0x68>
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	441c      	add	r4, r3
 8001688:	6025      	str	r5, [r4, #0]
 800168a:	e004      	b.n	8001696 <_malloc_r+0x72>
 800168c:	6863      	ldr	r3, [r4, #4]
 800168e:	42a2      	cmp	r2, r4
 8001690:	bf0c      	ite	eq
 8001692:	600b      	streq	r3, [r1, #0]
 8001694:	6053      	strne	r3, [r2, #4]
 8001696:	4630      	mov	r0, r6
 8001698:	f000 fe16 	bl	80022c8 <__malloc_unlock>
 800169c:	f104 000b 	add.w	r0, r4, #11
 80016a0:	1d23      	adds	r3, r4, #4
 80016a2:	f020 0007 	bic.w	r0, r0, #7
 80016a6:	1ac2      	subs	r2, r0, r3
 80016a8:	d0cc      	beq.n	8001644 <_malloc_r+0x20>
 80016aa:	1a1b      	subs	r3, r3, r0
 80016ac:	50a3      	str	r3, [r4, r2]
 80016ae:	e7c9      	b.n	8001644 <_malloc_r+0x20>
 80016b0:	4622      	mov	r2, r4
 80016b2:	6864      	ldr	r4, [r4, #4]
 80016b4:	e7cc      	b.n	8001650 <_malloc_r+0x2c>
 80016b6:	1cc4      	adds	r4, r0, #3
 80016b8:	f024 0403 	bic.w	r4, r4, #3
 80016bc:	42a0      	cmp	r0, r4
 80016be:	d0e3      	beq.n	8001688 <_malloc_r+0x64>
 80016c0:	1a21      	subs	r1, r4, r0
 80016c2:	4630      	mov	r0, r6
 80016c4:	f000 faf6 	bl	8001cb4 <_sbrk_r>
 80016c8:	3001      	adds	r0, #1
 80016ca:	d1dd      	bne.n	8001688 <_malloc_r+0x64>
 80016cc:	e7cf      	b.n	800166e <_malloc_r+0x4a>
 80016ce:	bf00      	nop
 80016d0:	20000094 	.word	0x20000094
 80016d4:	20000098 	.word	0x20000098

080016d8 <__sfputc_r>:
 80016d8:	6893      	ldr	r3, [r2, #8]
 80016da:	b410      	push	{r4}
 80016dc:	3b01      	subs	r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	6093      	str	r3, [r2, #8]
 80016e2:	da07      	bge.n	80016f4 <__sfputc_r+0x1c>
 80016e4:	6994      	ldr	r4, [r2, #24]
 80016e6:	42a3      	cmp	r3, r4
 80016e8:	db01      	blt.n	80016ee <__sfputc_r+0x16>
 80016ea:	290a      	cmp	r1, #10
 80016ec:	d102      	bne.n	80016f4 <__sfputc_r+0x1c>
 80016ee:	bc10      	pop	{r4}
 80016f0:	f000 baf0 	b.w	8001cd4 <__swbuf_r>
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	1c58      	adds	r0, r3, #1
 80016f8:	6010      	str	r0, [r2, #0]
 80016fa:	7019      	strb	r1, [r3, #0]
 80016fc:	4608      	mov	r0, r1
 80016fe:	bc10      	pop	{r4}
 8001700:	4770      	bx	lr

08001702 <__sfputs_r>:
 8001702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001704:	4606      	mov	r6, r0
 8001706:	460f      	mov	r7, r1
 8001708:	4614      	mov	r4, r2
 800170a:	18d5      	adds	r5, r2, r3
 800170c:	42ac      	cmp	r4, r5
 800170e:	d101      	bne.n	8001714 <__sfputs_r+0x12>
 8001710:	2000      	movs	r0, #0
 8001712:	e007      	b.n	8001724 <__sfputs_r+0x22>
 8001714:	463a      	mov	r2, r7
 8001716:	4630      	mov	r0, r6
 8001718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800171c:	f7ff ffdc 	bl	80016d8 <__sfputc_r>
 8001720:	1c43      	adds	r3, r0, #1
 8001722:	d1f3      	bne.n	800170c <__sfputs_r+0xa>
 8001724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001728 <_vfiprintf_r>:
 8001728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800172c:	460d      	mov	r5, r1
 800172e:	4614      	mov	r4, r2
 8001730:	4698      	mov	r8, r3
 8001732:	4606      	mov	r6, r0
 8001734:	b09d      	sub	sp, #116	; 0x74
 8001736:	b118      	cbz	r0, 8001740 <_vfiprintf_r+0x18>
 8001738:	6983      	ldr	r3, [r0, #24]
 800173a:	b90b      	cbnz	r3, 8001740 <_vfiprintf_r+0x18>
 800173c:	f000 fcac 	bl	8002098 <__sinit>
 8001740:	4b89      	ldr	r3, [pc, #548]	; (8001968 <_vfiprintf_r+0x240>)
 8001742:	429d      	cmp	r5, r3
 8001744:	d11b      	bne.n	800177e <_vfiprintf_r+0x56>
 8001746:	6875      	ldr	r5, [r6, #4]
 8001748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800174a:	07d9      	lsls	r1, r3, #31
 800174c:	d405      	bmi.n	800175a <_vfiprintf_r+0x32>
 800174e:	89ab      	ldrh	r3, [r5, #12]
 8001750:	059a      	lsls	r2, r3, #22
 8001752:	d402      	bmi.n	800175a <_vfiprintf_r+0x32>
 8001754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001756:	f000 fd3d 	bl	80021d4 <__retarget_lock_acquire_recursive>
 800175a:	89ab      	ldrh	r3, [r5, #12]
 800175c:	071b      	lsls	r3, r3, #28
 800175e:	d501      	bpl.n	8001764 <_vfiprintf_r+0x3c>
 8001760:	692b      	ldr	r3, [r5, #16]
 8001762:	b9eb      	cbnz	r3, 80017a0 <_vfiprintf_r+0x78>
 8001764:	4629      	mov	r1, r5
 8001766:	4630      	mov	r0, r6
 8001768:	f000 fb06 	bl	8001d78 <__swsetup_r>
 800176c:	b1c0      	cbz	r0, 80017a0 <_vfiprintf_r+0x78>
 800176e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001770:	07dc      	lsls	r4, r3, #31
 8001772:	d50e      	bpl.n	8001792 <_vfiprintf_r+0x6a>
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	b01d      	add	sp, #116	; 0x74
 800177a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <_vfiprintf_r+0x244>)
 8001780:	429d      	cmp	r5, r3
 8001782:	d101      	bne.n	8001788 <_vfiprintf_r+0x60>
 8001784:	68b5      	ldr	r5, [r6, #8]
 8001786:	e7df      	b.n	8001748 <_vfiprintf_r+0x20>
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <_vfiprintf_r+0x248>)
 800178a:	429d      	cmp	r5, r3
 800178c:	bf08      	it	eq
 800178e:	68f5      	ldreq	r5, [r6, #12]
 8001790:	e7da      	b.n	8001748 <_vfiprintf_r+0x20>
 8001792:	89ab      	ldrh	r3, [r5, #12]
 8001794:	0598      	lsls	r0, r3, #22
 8001796:	d4ed      	bmi.n	8001774 <_vfiprintf_r+0x4c>
 8001798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800179a:	f000 fd1c 	bl	80021d6 <__retarget_lock_release_recursive>
 800179e:	e7e9      	b.n	8001774 <_vfiprintf_r+0x4c>
 80017a0:	2300      	movs	r3, #0
 80017a2:	9309      	str	r3, [sp, #36]	; 0x24
 80017a4:	2320      	movs	r3, #32
 80017a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017aa:	2330      	movs	r3, #48	; 0x30
 80017ac:	f04f 0901 	mov.w	r9, #1
 80017b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80017b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001974 <_vfiprintf_r+0x24c>
 80017b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017bc:	4623      	mov	r3, r4
 80017be:	469a      	mov	sl, r3
 80017c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017c4:	b10a      	cbz	r2, 80017ca <_vfiprintf_r+0xa2>
 80017c6:	2a25      	cmp	r2, #37	; 0x25
 80017c8:	d1f9      	bne.n	80017be <_vfiprintf_r+0x96>
 80017ca:	ebba 0b04 	subs.w	fp, sl, r4
 80017ce:	d00b      	beq.n	80017e8 <_vfiprintf_r+0xc0>
 80017d0:	465b      	mov	r3, fp
 80017d2:	4622      	mov	r2, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	4630      	mov	r0, r6
 80017d8:	f7ff ff93 	bl	8001702 <__sfputs_r>
 80017dc:	3001      	adds	r0, #1
 80017de:	f000 80aa 	beq.w	8001936 <_vfiprintf_r+0x20e>
 80017e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e4:	445a      	add	r2, fp
 80017e6:	9209      	str	r2, [sp, #36]	; 0x24
 80017e8:	f89a 3000 	ldrb.w	r3, [sl]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a2 	beq.w	8001936 <_vfiprintf_r+0x20e>
 80017f2:	2300      	movs	r3, #0
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017fc:	f10a 0a01 	add.w	sl, sl, #1
 8001800:	9304      	str	r3, [sp, #16]
 8001802:	9307      	str	r3, [sp, #28]
 8001804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001808:	931a      	str	r3, [sp, #104]	; 0x68
 800180a:	4654      	mov	r4, sl
 800180c:	2205      	movs	r2, #5
 800180e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001812:	4858      	ldr	r0, [pc, #352]	; (8001974 <_vfiprintf_r+0x24c>)
 8001814:	f000 fd44 	bl	80022a0 <memchr>
 8001818:	9a04      	ldr	r2, [sp, #16]
 800181a:	b9d8      	cbnz	r0, 8001854 <_vfiprintf_r+0x12c>
 800181c:	06d1      	lsls	r1, r2, #27
 800181e:	bf44      	itt	mi
 8001820:	2320      	movmi	r3, #32
 8001822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001826:	0713      	lsls	r3, r2, #28
 8001828:	bf44      	itt	mi
 800182a:	232b      	movmi	r3, #43	; 0x2b
 800182c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001830:	f89a 3000 	ldrb.w	r3, [sl]
 8001834:	2b2a      	cmp	r3, #42	; 0x2a
 8001836:	d015      	beq.n	8001864 <_vfiprintf_r+0x13c>
 8001838:	4654      	mov	r4, sl
 800183a:	2000      	movs	r0, #0
 800183c:	f04f 0c0a 	mov.w	ip, #10
 8001840:	9a07      	ldr	r2, [sp, #28]
 8001842:	4621      	mov	r1, r4
 8001844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001848:	3b30      	subs	r3, #48	; 0x30
 800184a:	2b09      	cmp	r3, #9
 800184c:	d94e      	bls.n	80018ec <_vfiprintf_r+0x1c4>
 800184e:	b1b0      	cbz	r0, 800187e <_vfiprintf_r+0x156>
 8001850:	9207      	str	r2, [sp, #28]
 8001852:	e014      	b.n	800187e <_vfiprintf_r+0x156>
 8001854:	eba0 0308 	sub.w	r3, r0, r8
 8001858:	fa09 f303 	lsl.w	r3, r9, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	46a2      	mov	sl, r4
 8001860:	9304      	str	r3, [sp, #16]
 8001862:	e7d2      	b.n	800180a <_vfiprintf_r+0xe2>
 8001864:	9b03      	ldr	r3, [sp, #12]
 8001866:	1d19      	adds	r1, r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	9103      	str	r1, [sp, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	bfbb      	ittet	lt
 8001870:	425b      	neglt	r3, r3
 8001872:	f042 0202 	orrlt.w	r2, r2, #2
 8001876:	9307      	strge	r3, [sp, #28]
 8001878:	9307      	strlt	r3, [sp, #28]
 800187a:	bfb8      	it	lt
 800187c:	9204      	strlt	r2, [sp, #16]
 800187e:	7823      	ldrb	r3, [r4, #0]
 8001880:	2b2e      	cmp	r3, #46	; 0x2e
 8001882:	d10c      	bne.n	800189e <_vfiprintf_r+0x176>
 8001884:	7863      	ldrb	r3, [r4, #1]
 8001886:	2b2a      	cmp	r3, #42	; 0x2a
 8001888:	d135      	bne.n	80018f6 <_vfiprintf_r+0x1ce>
 800188a:	9b03      	ldr	r3, [sp, #12]
 800188c:	3402      	adds	r4, #2
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	9203      	str	r2, [sp, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bfb8      	it	lt
 8001898:	f04f 33ff 	movlt.w	r3, #4294967295
 800189c:	9305      	str	r3, [sp, #20]
 800189e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001984 <_vfiprintf_r+0x25c>
 80018a2:	2203      	movs	r2, #3
 80018a4:	4650      	mov	r0, sl
 80018a6:	7821      	ldrb	r1, [r4, #0]
 80018a8:	f000 fcfa 	bl	80022a0 <memchr>
 80018ac:	b140      	cbz	r0, 80018c0 <_vfiprintf_r+0x198>
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	eba0 000a 	sub.w	r0, r0, sl
 80018b4:	fa03 f000 	lsl.w	r0, r3, r0
 80018b8:	9b04      	ldr	r3, [sp, #16]
 80018ba:	3401      	adds	r4, #1
 80018bc:	4303      	orrs	r3, r0
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018c4:	2206      	movs	r2, #6
 80018c6:	482c      	ldr	r0, [pc, #176]	; (8001978 <_vfiprintf_r+0x250>)
 80018c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018cc:	f000 fce8 	bl	80022a0 <memchr>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d03f      	beq.n	8001954 <_vfiprintf_r+0x22c>
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <_vfiprintf_r+0x254>)
 80018d6:	bb1b      	cbnz	r3, 8001920 <_vfiprintf_r+0x1f8>
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	3307      	adds	r3, #7
 80018dc:	f023 0307 	bic.w	r3, r3, #7
 80018e0:	3308      	adds	r3, #8
 80018e2:	9303      	str	r3, [sp, #12]
 80018e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018e6:	443b      	add	r3, r7
 80018e8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ea:	e767      	b.n	80017bc <_vfiprintf_r+0x94>
 80018ec:	460c      	mov	r4, r1
 80018ee:	2001      	movs	r0, #1
 80018f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80018f4:	e7a5      	b.n	8001842 <_vfiprintf_r+0x11a>
 80018f6:	2300      	movs	r3, #0
 80018f8:	f04f 0c0a 	mov.w	ip, #10
 80018fc:	4619      	mov	r1, r3
 80018fe:	3401      	adds	r4, #1
 8001900:	9305      	str	r3, [sp, #20]
 8001902:	4620      	mov	r0, r4
 8001904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001908:	3a30      	subs	r2, #48	; 0x30
 800190a:	2a09      	cmp	r2, #9
 800190c:	d903      	bls.n	8001916 <_vfiprintf_r+0x1ee>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0c5      	beq.n	800189e <_vfiprintf_r+0x176>
 8001912:	9105      	str	r1, [sp, #20]
 8001914:	e7c3      	b.n	800189e <_vfiprintf_r+0x176>
 8001916:	4604      	mov	r4, r0
 8001918:	2301      	movs	r3, #1
 800191a:	fb0c 2101 	mla	r1, ip, r1, r2
 800191e:	e7f0      	b.n	8001902 <_vfiprintf_r+0x1da>
 8001920:	ab03      	add	r3, sp, #12
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	462a      	mov	r2, r5
 8001926:	4630      	mov	r0, r6
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_vfiprintf_r+0x258>)
 800192a:	a904      	add	r1, sp, #16
 800192c:	f3af 8000 	nop.w
 8001930:	4607      	mov	r7, r0
 8001932:	1c78      	adds	r0, r7, #1
 8001934:	d1d6      	bne.n	80018e4 <_vfiprintf_r+0x1bc>
 8001936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001938:	07d9      	lsls	r1, r3, #31
 800193a:	d405      	bmi.n	8001948 <_vfiprintf_r+0x220>
 800193c:	89ab      	ldrh	r3, [r5, #12]
 800193e:	059a      	lsls	r2, r3, #22
 8001940:	d402      	bmi.n	8001948 <_vfiprintf_r+0x220>
 8001942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001944:	f000 fc47 	bl	80021d6 <__retarget_lock_release_recursive>
 8001948:	89ab      	ldrh	r3, [r5, #12]
 800194a:	065b      	lsls	r3, r3, #25
 800194c:	f53f af12 	bmi.w	8001774 <_vfiprintf_r+0x4c>
 8001950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001952:	e711      	b.n	8001778 <_vfiprintf_r+0x50>
 8001954:	ab03      	add	r3, sp, #12
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	462a      	mov	r2, r5
 800195a:	4630      	mov	r0, r6
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_vfiprintf_r+0x258>)
 800195e:	a904      	add	r1, sp, #16
 8001960:	f000 f882 	bl	8001a68 <_printf_i>
 8001964:	e7e4      	b.n	8001930 <_vfiprintf_r+0x208>
 8001966:	bf00      	nop
 8001968:	080025fc 	.word	0x080025fc
 800196c:	0800261c 	.word	0x0800261c
 8001970:	080025dc 	.word	0x080025dc
 8001974:	080025a6 	.word	0x080025a6
 8001978:	080025b0 	.word	0x080025b0
 800197c:	00000000 	.word	0x00000000
 8001980:	08001703 	.word	0x08001703
 8001984:	080025ac 	.word	0x080025ac

08001988 <_printf_common>:
 8001988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800198c:	4616      	mov	r6, r2
 800198e:	4699      	mov	r9, r3
 8001990:	688a      	ldr	r2, [r1, #8]
 8001992:	690b      	ldr	r3, [r1, #16]
 8001994:	4607      	mov	r7, r0
 8001996:	4293      	cmp	r3, r2
 8001998:	bfb8      	it	lt
 800199a:	4613      	movlt	r3, r2
 800199c:	6033      	str	r3, [r6, #0]
 800199e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019a2:	460c      	mov	r4, r1
 80019a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019a8:	b10a      	cbz	r2, 80019ae <_printf_common+0x26>
 80019aa:	3301      	adds	r3, #1
 80019ac:	6033      	str	r3, [r6, #0]
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	0699      	lsls	r1, r3, #26
 80019b2:	bf42      	ittt	mi
 80019b4:	6833      	ldrmi	r3, [r6, #0]
 80019b6:	3302      	addmi	r3, #2
 80019b8:	6033      	strmi	r3, [r6, #0]
 80019ba:	6825      	ldr	r5, [r4, #0]
 80019bc:	f015 0506 	ands.w	r5, r5, #6
 80019c0:	d106      	bne.n	80019d0 <_printf_common+0x48>
 80019c2:	f104 0a19 	add.w	sl, r4, #25
 80019c6:	68e3      	ldr	r3, [r4, #12]
 80019c8:	6832      	ldr	r2, [r6, #0]
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	42ab      	cmp	r3, r5
 80019ce:	dc28      	bgt.n	8001a22 <_printf_common+0x9a>
 80019d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	bf18      	it	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	0692      	lsls	r2, r2, #26
 80019de:	d42d      	bmi.n	8001a3c <_printf_common+0xb4>
 80019e0:	4649      	mov	r1, r9
 80019e2:	4638      	mov	r0, r7
 80019e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019e8:	47c0      	blx	r8
 80019ea:	3001      	adds	r0, #1
 80019ec:	d020      	beq.n	8001a30 <_printf_common+0xa8>
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	68e5      	ldr	r5, [r4, #12]
 80019f2:	f003 0306 	and.w	r3, r3, #6
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf18      	it	ne
 80019fa:	2500      	movne	r5, #0
 80019fc:	6832      	ldr	r2, [r6, #0]
 80019fe:	f04f 0600 	mov.w	r6, #0
 8001a02:	68a3      	ldr	r3, [r4, #8]
 8001a04:	bf08      	it	eq
 8001a06:	1aad      	subeq	r5, r5, r2
 8001a08:	6922      	ldr	r2, [r4, #16]
 8001a0a:	bf08      	it	eq
 8001a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bfc4      	itt	gt
 8001a14:	1a9b      	subgt	r3, r3, r2
 8001a16:	18ed      	addgt	r5, r5, r3
 8001a18:	341a      	adds	r4, #26
 8001a1a:	42b5      	cmp	r5, r6
 8001a1c:	d11a      	bne.n	8001a54 <_printf_common+0xcc>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e008      	b.n	8001a34 <_printf_common+0xac>
 8001a22:	2301      	movs	r3, #1
 8001a24:	4652      	mov	r2, sl
 8001a26:	4649      	mov	r1, r9
 8001a28:	4638      	mov	r0, r7
 8001a2a:	47c0      	blx	r8
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d103      	bne.n	8001a38 <_printf_common+0xb0>
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a38:	3501      	adds	r5, #1
 8001a3a:	e7c4      	b.n	80019c6 <_printf_common+0x3e>
 8001a3c:	2030      	movs	r0, #48	; 0x30
 8001a3e:	18e1      	adds	r1, r4, r3
 8001a40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a4a:	4422      	add	r2, r4
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a52:	e7c5      	b.n	80019e0 <_printf_common+0x58>
 8001a54:	2301      	movs	r3, #1
 8001a56:	4622      	mov	r2, r4
 8001a58:	4649      	mov	r1, r9
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	47c0      	blx	r8
 8001a5e:	3001      	adds	r0, #1
 8001a60:	d0e6      	beq.n	8001a30 <_printf_common+0xa8>
 8001a62:	3601      	adds	r6, #1
 8001a64:	e7d9      	b.n	8001a1a <_printf_common+0x92>
	...

08001a68 <_printf_i>:
 8001a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	7e27      	ldrb	r7, [r4, #24]
 8001a70:	4691      	mov	r9, r2
 8001a72:	2f78      	cmp	r7, #120	; 0x78
 8001a74:	4680      	mov	r8, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a7e:	d807      	bhi.n	8001a90 <_printf_i+0x28>
 8001a80:	2f62      	cmp	r7, #98	; 0x62
 8001a82:	d80a      	bhi.n	8001a9a <_printf_i+0x32>
 8001a84:	2f00      	cmp	r7, #0
 8001a86:	f000 80d9 	beq.w	8001c3c <_printf_i+0x1d4>
 8001a8a:	2f58      	cmp	r7, #88	; 0x58
 8001a8c:	f000 80a4 	beq.w	8001bd8 <_printf_i+0x170>
 8001a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a98:	e03a      	b.n	8001b10 <_printf_i+0xa8>
 8001a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a9e:	2b15      	cmp	r3, #21
 8001aa0:	d8f6      	bhi.n	8001a90 <_printf_i+0x28>
 8001aa2:	a001      	add	r0, pc, #4	; (adr r0, 8001aa8 <_printf_i+0x40>)
 8001aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001aa8:	08001b01 	.word	0x08001b01
 8001aac:	08001b15 	.word	0x08001b15
 8001ab0:	08001a91 	.word	0x08001a91
 8001ab4:	08001a91 	.word	0x08001a91
 8001ab8:	08001a91 	.word	0x08001a91
 8001abc:	08001a91 	.word	0x08001a91
 8001ac0:	08001b15 	.word	0x08001b15
 8001ac4:	08001a91 	.word	0x08001a91
 8001ac8:	08001a91 	.word	0x08001a91
 8001acc:	08001a91 	.word	0x08001a91
 8001ad0:	08001a91 	.word	0x08001a91
 8001ad4:	08001c23 	.word	0x08001c23
 8001ad8:	08001b45 	.word	0x08001b45
 8001adc:	08001c05 	.word	0x08001c05
 8001ae0:	08001a91 	.word	0x08001a91
 8001ae4:	08001a91 	.word	0x08001a91
 8001ae8:	08001c45 	.word	0x08001c45
 8001aec:	08001a91 	.word	0x08001a91
 8001af0:	08001b45 	.word	0x08001b45
 8001af4:	08001a91 	.word	0x08001a91
 8001af8:	08001a91 	.word	0x08001a91
 8001afc:	08001c0d 	.word	0x08001c0d
 8001b00:	680b      	ldr	r3, [r1, #0]
 8001b02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b06:	1d1a      	adds	r2, r3, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	600a      	str	r2, [r1, #0]
 8001b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0a4      	b.n	8001c5e <_printf_i+0x1f6>
 8001b14:	6825      	ldr	r5, [r4, #0]
 8001b16:	6808      	ldr	r0, [r1, #0]
 8001b18:	062e      	lsls	r6, r5, #24
 8001b1a:	f100 0304 	add.w	r3, r0, #4
 8001b1e:	d50a      	bpl.n	8001b36 <_printf_i+0xce>
 8001b20:	6805      	ldr	r5, [r0, #0]
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	da03      	bge.n	8001b30 <_printf_i+0xc8>
 8001b28:	232d      	movs	r3, #45	; 0x2d
 8001b2a:	426d      	negs	r5, r5
 8001b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b30:	230a      	movs	r3, #10
 8001b32:	485e      	ldr	r0, [pc, #376]	; (8001cac <_printf_i+0x244>)
 8001b34:	e019      	b.n	8001b6a <_printf_i+0x102>
 8001b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001b3a:	6805      	ldr	r5, [r0, #0]
 8001b3c:	600b      	str	r3, [r1, #0]
 8001b3e:	bf18      	it	ne
 8001b40:	b22d      	sxthne	r5, r5
 8001b42:	e7ef      	b.n	8001b24 <_printf_i+0xbc>
 8001b44:	680b      	ldr	r3, [r1, #0]
 8001b46:	6825      	ldr	r5, [r4, #0]
 8001b48:	1d18      	adds	r0, r3, #4
 8001b4a:	6008      	str	r0, [r1, #0]
 8001b4c:	0628      	lsls	r0, r5, #24
 8001b4e:	d501      	bpl.n	8001b54 <_printf_i+0xec>
 8001b50:	681d      	ldr	r5, [r3, #0]
 8001b52:	e002      	b.n	8001b5a <_printf_i+0xf2>
 8001b54:	0669      	lsls	r1, r5, #25
 8001b56:	d5fb      	bpl.n	8001b50 <_printf_i+0xe8>
 8001b58:	881d      	ldrh	r5, [r3, #0]
 8001b5a:	2f6f      	cmp	r7, #111	; 0x6f
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2308      	moveq	r3, #8
 8001b60:	230a      	movne	r3, #10
 8001b62:	4852      	ldr	r0, [pc, #328]	; (8001cac <_printf_i+0x244>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b6a:	6866      	ldr	r6, [r4, #4]
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	bfa8      	it	ge
 8001b70:	6821      	ldrge	r1, [r4, #0]
 8001b72:	60a6      	str	r6, [r4, #8]
 8001b74:	bfa4      	itt	ge
 8001b76:	f021 0104 	bicge.w	r1, r1, #4
 8001b7a:	6021      	strge	r1, [r4, #0]
 8001b7c:	b90d      	cbnz	r5, 8001b82 <_printf_i+0x11a>
 8001b7e:	2e00      	cmp	r6, #0
 8001b80:	d04d      	beq.n	8001c1e <_printf_i+0x1b6>
 8001b82:	4616      	mov	r6, r2
 8001b84:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b88:	fb03 5711 	mls	r7, r3, r1, r5
 8001b8c:	5dc7      	ldrb	r7, [r0, r7]
 8001b8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b92:	462f      	mov	r7, r5
 8001b94:	42bb      	cmp	r3, r7
 8001b96:	460d      	mov	r5, r1
 8001b98:	d9f4      	bls.n	8001b84 <_printf_i+0x11c>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d10b      	bne.n	8001bb6 <_printf_i+0x14e>
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	07df      	lsls	r7, r3, #31
 8001ba2:	d508      	bpl.n	8001bb6 <_printf_i+0x14e>
 8001ba4:	6923      	ldr	r3, [r4, #16]
 8001ba6:	6861      	ldr	r1, [r4, #4]
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	bfde      	ittt	le
 8001bac:	2330      	movle	r3, #48	; 0x30
 8001bae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001bb6:	1b92      	subs	r2, r2, r6
 8001bb8:	6122      	str	r2, [r4, #16]
 8001bba:	464b      	mov	r3, r9
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	4640      	mov	r0, r8
 8001bc0:	f8cd a000 	str.w	sl, [sp]
 8001bc4:	aa03      	add	r2, sp, #12
 8001bc6:	f7ff fedf 	bl	8001988 <_printf_common>
 8001bca:	3001      	adds	r0, #1
 8001bcc:	d14c      	bne.n	8001c68 <_printf_i+0x200>
 8001bce:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd2:	b004      	add	sp, #16
 8001bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd8:	4834      	ldr	r0, [pc, #208]	; (8001cac <_printf_i+0x244>)
 8001bda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001bde:	680e      	ldr	r6, [r1, #0]
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8001be6:	061f      	lsls	r7, r3, #24
 8001be8:	600e      	str	r6, [r1, #0]
 8001bea:	d514      	bpl.n	8001c16 <_printf_i+0x1ae>
 8001bec:	07d9      	lsls	r1, r3, #31
 8001bee:	bf44      	itt	mi
 8001bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bf4:	6023      	strmi	r3, [r4, #0]
 8001bf6:	b91d      	cbnz	r5, 8001c00 <_printf_i+0x198>
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	f023 0320 	bic.w	r3, r3, #32
 8001bfe:	6023      	str	r3, [r4, #0]
 8001c00:	2310      	movs	r3, #16
 8001c02:	e7af      	b.n	8001b64 <_printf_i+0xfc>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	6023      	str	r3, [r4, #0]
 8001c0c:	2378      	movs	r3, #120	; 0x78
 8001c0e:	4828      	ldr	r0, [pc, #160]	; (8001cb0 <_printf_i+0x248>)
 8001c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c14:	e7e3      	b.n	8001bde <_printf_i+0x176>
 8001c16:	065e      	lsls	r6, r3, #25
 8001c18:	bf48      	it	mi
 8001c1a:	b2ad      	uxthmi	r5, r5
 8001c1c:	e7e6      	b.n	8001bec <_printf_i+0x184>
 8001c1e:	4616      	mov	r6, r2
 8001c20:	e7bb      	b.n	8001b9a <_printf_i+0x132>
 8001c22:	680b      	ldr	r3, [r1, #0]
 8001c24:	6826      	ldr	r6, [r4, #0]
 8001c26:	1d1d      	adds	r5, r3, #4
 8001c28:	6960      	ldr	r0, [r4, #20]
 8001c2a:	600d      	str	r5, [r1, #0]
 8001c2c:	0635      	lsls	r5, r6, #24
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	d501      	bpl.n	8001c36 <_printf_i+0x1ce>
 8001c32:	6018      	str	r0, [r3, #0]
 8001c34:	e002      	b.n	8001c3c <_printf_i+0x1d4>
 8001c36:	0671      	lsls	r1, r6, #25
 8001c38:	d5fb      	bpl.n	8001c32 <_printf_i+0x1ca>
 8001c3a:	8018      	strh	r0, [r3, #0]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4616      	mov	r6, r2
 8001c40:	6123      	str	r3, [r4, #16]
 8001c42:	e7ba      	b.n	8001bba <_printf_i+0x152>
 8001c44:	680b      	ldr	r3, [r1, #0]
 8001c46:	1d1a      	adds	r2, r3, #4
 8001c48:	600a      	str	r2, [r1, #0]
 8001c4a:	681e      	ldr	r6, [r3, #0]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4630      	mov	r0, r6
 8001c50:	6862      	ldr	r2, [r4, #4]
 8001c52:	f000 fb25 	bl	80022a0 <memchr>
 8001c56:	b108      	cbz	r0, 8001c5c <_printf_i+0x1f4>
 8001c58:	1b80      	subs	r0, r0, r6
 8001c5a:	6060      	str	r0, [r4, #4]
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	6123      	str	r3, [r4, #16]
 8001c60:	2300      	movs	r3, #0
 8001c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c66:	e7a8      	b.n	8001bba <_printf_i+0x152>
 8001c68:	4632      	mov	r2, r6
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	6923      	ldr	r3, [r4, #16]
 8001c70:	47d0      	blx	sl
 8001c72:	3001      	adds	r0, #1
 8001c74:	d0ab      	beq.n	8001bce <_printf_i+0x166>
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	079b      	lsls	r3, r3, #30
 8001c7a:	d413      	bmi.n	8001ca4 <_printf_i+0x23c>
 8001c7c:	68e0      	ldr	r0, [r4, #12]
 8001c7e:	9b03      	ldr	r3, [sp, #12]
 8001c80:	4298      	cmp	r0, r3
 8001c82:	bfb8      	it	lt
 8001c84:	4618      	movlt	r0, r3
 8001c86:	e7a4      	b.n	8001bd2 <_printf_i+0x16a>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4632      	mov	r2, r6
 8001c8c:	4649      	mov	r1, r9
 8001c8e:	4640      	mov	r0, r8
 8001c90:	47d0      	blx	sl
 8001c92:	3001      	adds	r0, #1
 8001c94:	d09b      	beq.n	8001bce <_printf_i+0x166>
 8001c96:	3501      	adds	r5, #1
 8001c98:	68e3      	ldr	r3, [r4, #12]
 8001c9a:	9903      	ldr	r1, [sp, #12]
 8001c9c:	1a5b      	subs	r3, r3, r1
 8001c9e:	42ab      	cmp	r3, r5
 8001ca0:	dcf2      	bgt.n	8001c88 <_printf_i+0x220>
 8001ca2:	e7eb      	b.n	8001c7c <_printf_i+0x214>
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	f104 0619 	add.w	r6, r4, #25
 8001caa:	e7f5      	b.n	8001c98 <_printf_i+0x230>
 8001cac:	080025b7 	.word	0x080025b7
 8001cb0:	080025c8 	.word	0x080025c8

08001cb4 <_sbrk_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	4d05      	ldr	r5, [pc, #20]	; (8001cd0 <_sbrk_r+0x1c>)
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	f7fe fc80 	bl	80005c4 <_sbrk>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d102      	bne.n	8001cce <_sbrk_r+0x1a>
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	b103      	cbz	r3, 8001cce <_sbrk_r+0x1a>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	200000ac 	.word	0x200000ac

08001cd4 <__swbuf_r>:
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd6:	460e      	mov	r6, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	4605      	mov	r5, r0
 8001cdc:	b118      	cbz	r0, 8001ce6 <__swbuf_r+0x12>
 8001cde:	6983      	ldr	r3, [r0, #24]
 8001ce0:	b90b      	cbnz	r3, 8001ce6 <__swbuf_r+0x12>
 8001ce2:	f000 f9d9 	bl	8002098 <__sinit>
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <__swbuf_r+0x98>)
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	d12b      	bne.n	8001d44 <__swbuf_r+0x70>
 8001cec:	686c      	ldr	r4, [r5, #4]
 8001cee:	69a3      	ldr	r3, [r4, #24]
 8001cf0:	60a3      	str	r3, [r4, #8]
 8001cf2:	89a3      	ldrh	r3, [r4, #12]
 8001cf4:	071a      	lsls	r2, r3, #28
 8001cf6:	d52f      	bpl.n	8001d58 <__swbuf_r+0x84>
 8001cf8:	6923      	ldr	r3, [r4, #16]
 8001cfa:	b36b      	cbz	r3, 8001d58 <__swbuf_r+0x84>
 8001cfc:	6923      	ldr	r3, [r4, #16]
 8001cfe:	6820      	ldr	r0, [r4, #0]
 8001d00:	b2f6      	uxtb	r6, r6
 8001d02:	1ac0      	subs	r0, r0, r3
 8001d04:	6963      	ldr	r3, [r4, #20]
 8001d06:	4637      	mov	r7, r6
 8001d08:	4283      	cmp	r3, r0
 8001d0a:	dc04      	bgt.n	8001d16 <__swbuf_r+0x42>
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f000 f92e 	bl	8001f70 <_fflush_r>
 8001d14:	bb30      	cbnz	r0, 8001d64 <__swbuf_r+0x90>
 8001d16:	68a3      	ldr	r3, [r4, #8]
 8001d18:	3001      	adds	r0, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60a3      	str	r3, [r4, #8]
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	6022      	str	r2, [r4, #0]
 8001d24:	701e      	strb	r6, [r3, #0]
 8001d26:	6963      	ldr	r3, [r4, #20]
 8001d28:	4283      	cmp	r3, r0
 8001d2a:	d004      	beq.n	8001d36 <__swbuf_r+0x62>
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	07db      	lsls	r3, r3, #31
 8001d30:	d506      	bpl.n	8001d40 <__swbuf_r+0x6c>
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	d104      	bne.n	8001d40 <__swbuf_r+0x6c>
 8001d36:	4621      	mov	r1, r4
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f000 f919 	bl	8001f70 <_fflush_r>
 8001d3e:	b988      	cbnz	r0, 8001d64 <__swbuf_r+0x90>
 8001d40:	4638      	mov	r0, r7
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <__swbuf_r+0x9c>)
 8001d46:	429c      	cmp	r4, r3
 8001d48:	d101      	bne.n	8001d4e <__swbuf_r+0x7a>
 8001d4a:	68ac      	ldr	r4, [r5, #8]
 8001d4c:	e7cf      	b.n	8001cee <__swbuf_r+0x1a>
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <__swbuf_r+0xa0>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	bf08      	it	eq
 8001d54:	68ec      	ldreq	r4, [r5, #12]
 8001d56:	e7ca      	b.n	8001cee <__swbuf_r+0x1a>
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f000 f80c 	bl	8001d78 <__swsetup_r>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d0cb      	beq.n	8001cfc <__swbuf_r+0x28>
 8001d64:	f04f 37ff 	mov.w	r7, #4294967295
 8001d68:	e7ea      	b.n	8001d40 <__swbuf_r+0x6c>
 8001d6a:	bf00      	nop
 8001d6c:	080025fc 	.word	0x080025fc
 8001d70:	0800261c 	.word	0x0800261c
 8001d74:	080025dc 	.word	0x080025dc

08001d78 <__swsetup_r>:
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <__swsetup_r+0xcc>)
 8001d7a:	b570      	push	{r4, r5, r6, lr}
 8001d7c:	681d      	ldr	r5, [r3, #0]
 8001d7e:	4606      	mov	r6, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	b125      	cbz	r5, 8001d8e <__swsetup_r+0x16>
 8001d84:	69ab      	ldr	r3, [r5, #24]
 8001d86:	b913      	cbnz	r3, 8001d8e <__swsetup_r+0x16>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f000 f985 	bl	8002098 <__sinit>
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <__swsetup_r+0xd0>)
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d10f      	bne.n	8001db4 <__swsetup_r+0x3c>
 8001d94:	686c      	ldr	r4, [r5, #4]
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d9c:	0719      	lsls	r1, r3, #28
 8001d9e:	d42c      	bmi.n	8001dfa <__swsetup_r+0x82>
 8001da0:	06dd      	lsls	r5, r3, #27
 8001da2:	d411      	bmi.n	8001dc8 <__swsetup_r+0x50>
 8001da4:	2309      	movs	r3, #9
 8001da6:	6033      	str	r3, [r6, #0]
 8001da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	81a3      	strh	r3, [r4, #12]
 8001db2:	e03e      	b.n	8001e32 <__swsetup_r+0xba>
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <__swsetup_r+0xd4>)
 8001db6:	429c      	cmp	r4, r3
 8001db8:	d101      	bne.n	8001dbe <__swsetup_r+0x46>
 8001dba:	68ac      	ldr	r4, [r5, #8]
 8001dbc:	e7eb      	b.n	8001d96 <__swsetup_r+0x1e>
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <__swsetup_r+0xd8>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	bf08      	it	eq
 8001dc4:	68ec      	ldreq	r4, [r5, #12]
 8001dc6:	e7e6      	b.n	8001d96 <__swsetup_r+0x1e>
 8001dc8:	0758      	lsls	r0, r3, #29
 8001dca:	d512      	bpl.n	8001df2 <__swsetup_r+0x7a>
 8001dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dce:	b141      	cbz	r1, 8001de2 <__swsetup_r+0x6a>
 8001dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dd4:	4299      	cmp	r1, r3
 8001dd6:	d002      	beq.n	8001dde <__swsetup_r+0x66>
 8001dd8:	4630      	mov	r0, r6
 8001dda:	f7ff fbd7 	bl	800158c <_free_r>
 8001dde:	2300      	movs	r3, #0
 8001de0:	6363      	str	r3, [r4, #52]	; 0x34
 8001de2:	89a3      	ldrh	r3, [r4, #12]
 8001de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	6923      	ldr	r3, [r4, #16]
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	81a3      	strh	r3, [r4, #12]
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	b94b      	cbnz	r3, 8001e12 <__swsetup_r+0x9a>
 8001dfe:	89a3      	ldrh	r3, [r4, #12]
 8001e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d003      	beq.n	8001e12 <__swsetup_r+0x9a>
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f000 fa07 	bl	8002220 <__smakebuf_r>
 8001e12:	89a0      	ldrh	r0, [r4, #12]
 8001e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e18:	f010 0301 	ands.w	r3, r0, #1
 8001e1c:	d00a      	beq.n	8001e34 <__swsetup_r+0xbc>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60a3      	str	r3, [r4, #8]
 8001e22:	6963      	ldr	r3, [r4, #20]
 8001e24:	425b      	negs	r3, r3
 8001e26:	61a3      	str	r3, [r4, #24]
 8001e28:	6923      	ldr	r3, [r4, #16]
 8001e2a:	b943      	cbnz	r3, 8001e3e <__swsetup_r+0xc6>
 8001e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e30:	d1ba      	bne.n	8001da8 <__swsetup_r+0x30>
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	0781      	lsls	r1, r0, #30
 8001e36:	bf58      	it	pl
 8001e38:	6963      	ldrpl	r3, [r4, #20]
 8001e3a:	60a3      	str	r3, [r4, #8]
 8001e3c:	e7f4      	b.n	8001e28 <__swsetup_r+0xb0>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e7f7      	b.n	8001e32 <__swsetup_r+0xba>
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	080025fc 	.word	0x080025fc
 8001e4c:	0800261c 	.word	0x0800261c
 8001e50:	080025dc 	.word	0x080025dc

08001e54 <abort>:
 8001e54:	2006      	movs	r0, #6
 8001e56:	b508      	push	{r3, lr}
 8001e58:	f000 fa64 	bl	8002324 <raise>
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7fe fb3d 	bl	80004dc <_exit>
	...

08001e64 <__sflush_r>:
 8001e64:	898a      	ldrh	r2, [r1, #12]
 8001e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	0710      	lsls	r0, r2, #28
 8001e6e:	460c      	mov	r4, r1
 8001e70:	d458      	bmi.n	8001f24 <__sflush_r+0xc0>
 8001e72:	684b      	ldr	r3, [r1, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dc05      	bgt.n	8001e84 <__sflush_r+0x20>
 8001e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	dc02      	bgt.n	8001e84 <__sflush_r+0x20>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e86:	2e00      	cmp	r6, #0
 8001e88:	d0f9      	beq.n	8001e7e <__sflush_r+0x1a>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e90:	682f      	ldr	r7, [r5, #0]
 8001e92:	602b      	str	r3, [r5, #0]
 8001e94:	d032      	beq.n	8001efc <__sflush_r+0x98>
 8001e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	075a      	lsls	r2, r3, #29
 8001e9c:	d505      	bpl.n	8001eaa <__sflush_r+0x46>
 8001e9e:	6863      	ldr	r3, [r4, #4]
 8001ea0:	1ac0      	subs	r0, r0, r3
 8001ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ea4:	b10b      	cbz	r3, 8001eaa <__sflush_r+0x46>
 8001ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ea8:	1ac0      	subs	r0, r0, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	4602      	mov	r2, r0
 8001eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	6a21      	ldr	r1, [r4, #32]
 8001eb4:	47b0      	blx	r6
 8001eb6:	1c43      	adds	r3, r0, #1
 8001eb8:	89a3      	ldrh	r3, [r4, #12]
 8001eba:	d106      	bne.n	8001eca <__sflush_r+0x66>
 8001ebc:	6829      	ldr	r1, [r5, #0]
 8001ebe:	291d      	cmp	r1, #29
 8001ec0:	d82c      	bhi.n	8001f1c <__sflush_r+0xb8>
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <__sflush_r+0x108>)
 8001ec4:	40ca      	lsrs	r2, r1
 8001ec6:	07d6      	lsls	r6, r2, #31
 8001ec8:	d528      	bpl.n	8001f1c <__sflush_r+0xb8>
 8001eca:	2200      	movs	r2, #0
 8001ecc:	6062      	str	r2, [r4, #4]
 8001ece:	6922      	ldr	r2, [r4, #16]
 8001ed0:	04d9      	lsls	r1, r3, #19
 8001ed2:	6022      	str	r2, [r4, #0]
 8001ed4:	d504      	bpl.n	8001ee0 <__sflush_r+0x7c>
 8001ed6:	1c42      	adds	r2, r0, #1
 8001ed8:	d101      	bne.n	8001ede <__sflush_r+0x7a>
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	b903      	cbnz	r3, 8001ee0 <__sflush_r+0x7c>
 8001ede:	6560      	str	r0, [r4, #84]	; 0x54
 8001ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ee2:	602f      	str	r7, [r5, #0]
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d0ca      	beq.n	8001e7e <__sflush_r+0x1a>
 8001ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001eec:	4299      	cmp	r1, r3
 8001eee:	d002      	beq.n	8001ef6 <__sflush_r+0x92>
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f7ff fb4b 	bl	800158c <_free_r>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8001efa:	e7c1      	b.n	8001e80 <__sflush_r+0x1c>
 8001efc:	6a21      	ldr	r1, [r4, #32]
 8001efe:	2301      	movs	r3, #1
 8001f00:	4628      	mov	r0, r5
 8001f02:	47b0      	blx	r6
 8001f04:	1c41      	adds	r1, r0, #1
 8001f06:	d1c7      	bne.n	8001e98 <__sflush_r+0x34>
 8001f08:	682b      	ldr	r3, [r5, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0c4      	beq.n	8001e98 <__sflush_r+0x34>
 8001f0e:	2b1d      	cmp	r3, #29
 8001f10:	d001      	beq.n	8001f16 <__sflush_r+0xb2>
 8001f12:	2b16      	cmp	r3, #22
 8001f14:	d101      	bne.n	8001f1a <__sflush_r+0xb6>
 8001f16:	602f      	str	r7, [r5, #0]
 8001f18:	e7b1      	b.n	8001e7e <__sflush_r+0x1a>
 8001f1a:	89a3      	ldrh	r3, [r4, #12]
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f20:	81a3      	strh	r3, [r4, #12]
 8001f22:	e7ad      	b.n	8001e80 <__sflush_r+0x1c>
 8001f24:	690f      	ldr	r7, [r1, #16]
 8001f26:	2f00      	cmp	r7, #0
 8001f28:	d0a9      	beq.n	8001e7e <__sflush_r+0x1a>
 8001f2a:	0793      	lsls	r3, r2, #30
 8001f2c:	bf18      	it	ne
 8001f2e:	2300      	movne	r3, #0
 8001f30:	680e      	ldr	r6, [r1, #0]
 8001f32:	bf08      	it	eq
 8001f34:	694b      	ldreq	r3, [r1, #20]
 8001f36:	eba6 0807 	sub.w	r8, r6, r7
 8001f3a:	600f      	str	r7, [r1, #0]
 8001f3c:	608b      	str	r3, [r1, #8]
 8001f3e:	f1b8 0f00 	cmp.w	r8, #0
 8001f42:	dd9c      	ble.n	8001e7e <__sflush_r+0x1a>
 8001f44:	4643      	mov	r3, r8
 8001f46:	463a      	mov	r2, r7
 8001f48:	4628      	mov	r0, r5
 8001f4a:	6a21      	ldr	r1, [r4, #32]
 8001f4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f4e:	47b0      	blx	r6
 8001f50:	2800      	cmp	r0, #0
 8001f52:	dc06      	bgt.n	8001f62 <__sflush_r+0xfe>
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5e:	81a3      	strh	r3, [r4, #12]
 8001f60:	e78e      	b.n	8001e80 <__sflush_r+0x1c>
 8001f62:	4407      	add	r7, r0
 8001f64:	eba8 0800 	sub.w	r8, r8, r0
 8001f68:	e7e9      	b.n	8001f3e <__sflush_r+0xda>
 8001f6a:	bf00      	nop
 8001f6c:	20400001 	.word	0x20400001

08001f70 <_fflush_r>:
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	690b      	ldr	r3, [r1, #16]
 8001f74:	4605      	mov	r5, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	b913      	cbnz	r3, 8001f80 <_fflush_r+0x10>
 8001f7a:	2500      	movs	r5, #0
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	b118      	cbz	r0, 8001f8a <_fflush_r+0x1a>
 8001f82:	6983      	ldr	r3, [r0, #24]
 8001f84:	b90b      	cbnz	r3, 8001f8a <_fflush_r+0x1a>
 8001f86:	f000 f887 	bl	8002098 <__sinit>
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <_fflush_r+0x6c>)
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	d11b      	bne.n	8001fc8 <_fflush_r+0x58>
 8001f90:	686c      	ldr	r4, [r5, #4]
 8001f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ef      	beq.n	8001f7a <_fflush_r+0xa>
 8001f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f9c:	07d0      	lsls	r0, r2, #31
 8001f9e:	d404      	bmi.n	8001faa <_fflush_r+0x3a>
 8001fa0:	0599      	lsls	r1, r3, #22
 8001fa2:	d402      	bmi.n	8001faa <_fflush_r+0x3a>
 8001fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fa6:	f000 f915 	bl	80021d4 <__retarget_lock_acquire_recursive>
 8001faa:	4628      	mov	r0, r5
 8001fac:	4621      	mov	r1, r4
 8001fae:	f7ff ff59 	bl	8001e64 <__sflush_r>
 8001fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	07da      	lsls	r2, r3, #31
 8001fb8:	d4e0      	bmi.n	8001f7c <_fflush_r+0xc>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	059b      	lsls	r3, r3, #22
 8001fbe:	d4dd      	bmi.n	8001f7c <_fflush_r+0xc>
 8001fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fc2:	f000 f908 	bl	80021d6 <__retarget_lock_release_recursive>
 8001fc6:	e7d9      	b.n	8001f7c <_fflush_r+0xc>
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <_fflush_r+0x70>)
 8001fca:	429c      	cmp	r4, r3
 8001fcc:	d101      	bne.n	8001fd2 <_fflush_r+0x62>
 8001fce:	68ac      	ldr	r4, [r5, #8]
 8001fd0:	e7df      	b.n	8001f92 <_fflush_r+0x22>
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <_fflush_r+0x74>)
 8001fd4:	429c      	cmp	r4, r3
 8001fd6:	bf08      	it	eq
 8001fd8:	68ec      	ldreq	r4, [r5, #12]
 8001fda:	e7da      	b.n	8001f92 <_fflush_r+0x22>
 8001fdc:	080025fc 	.word	0x080025fc
 8001fe0:	0800261c 	.word	0x0800261c
 8001fe4:	080025dc 	.word	0x080025dc

08001fe8 <std>:
 8001fe8:	2300      	movs	r3, #0
 8001fea:	b510      	push	{r4, lr}
 8001fec:	4604      	mov	r4, r0
 8001fee:	e9c0 3300 	strd	r3, r3, [r0]
 8001ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ff6:	6083      	str	r3, [r0, #8]
 8001ff8:	8181      	strh	r1, [r0, #12]
 8001ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8001ffc:	81c2      	strh	r2, [r0, #14]
 8001ffe:	6183      	str	r3, [r0, #24]
 8002000:	4619      	mov	r1, r3
 8002002:	2208      	movs	r2, #8
 8002004:	305c      	adds	r0, #92	; 0x5c
 8002006:	f7ff fa41 	bl	800148c <memset>
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <std+0x38>)
 800200c:	6224      	str	r4, [r4, #32]
 800200e:	6263      	str	r3, [r4, #36]	; 0x24
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <std+0x3c>)
 8002012:	62a3      	str	r3, [r4, #40]	; 0x28
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <std+0x40>)
 8002016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <std+0x44>)
 800201a:	6323      	str	r3, [r4, #48]	; 0x30
 800201c:	bd10      	pop	{r4, pc}
 800201e:	bf00      	nop
 8002020:	0800235d 	.word	0x0800235d
 8002024:	0800237f 	.word	0x0800237f
 8002028:	080023b7 	.word	0x080023b7
 800202c:	080023db 	.word	0x080023db

08002030 <_cleanup_r>:
 8002030:	4901      	ldr	r1, [pc, #4]	; (8002038 <_cleanup_r+0x8>)
 8002032:	f000 b8af 	b.w	8002194 <_fwalk_reent>
 8002036:	bf00      	nop
 8002038:	08001f71 	.word	0x08001f71

0800203c <__sfmoreglue>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	2568      	movs	r5, #104	; 0x68
 8002040:	1e4a      	subs	r2, r1, #1
 8002042:	4355      	muls	r5, r2
 8002044:	460e      	mov	r6, r1
 8002046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800204a:	f7ff faeb 	bl	8001624 <_malloc_r>
 800204e:	4604      	mov	r4, r0
 8002050:	b140      	cbz	r0, 8002064 <__sfmoreglue+0x28>
 8002052:	2100      	movs	r1, #0
 8002054:	e9c0 1600 	strd	r1, r6, [r0]
 8002058:	300c      	adds	r0, #12
 800205a:	60a0      	str	r0, [r4, #8]
 800205c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002060:	f7ff fa14 	bl	800148c <memset>
 8002064:	4620      	mov	r0, r4
 8002066:	bd70      	pop	{r4, r5, r6, pc}

08002068 <__sfp_lock_acquire>:
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <__sfp_lock_acquire+0x8>)
 800206a:	f000 b8b3 	b.w	80021d4 <__retarget_lock_acquire_recursive>
 800206e:	bf00      	nop
 8002070:	200000a8 	.word	0x200000a8

08002074 <__sfp_lock_release>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__sfp_lock_release+0x8>)
 8002076:	f000 b8ae 	b.w	80021d6 <__retarget_lock_release_recursive>
 800207a:	bf00      	nop
 800207c:	200000a8 	.word	0x200000a8

08002080 <__sinit_lock_acquire>:
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <__sinit_lock_acquire+0x8>)
 8002082:	f000 b8a7 	b.w	80021d4 <__retarget_lock_acquire_recursive>
 8002086:	bf00      	nop
 8002088:	200000a3 	.word	0x200000a3

0800208c <__sinit_lock_release>:
 800208c:	4801      	ldr	r0, [pc, #4]	; (8002094 <__sinit_lock_release+0x8>)
 800208e:	f000 b8a2 	b.w	80021d6 <__retarget_lock_release_recursive>
 8002092:	bf00      	nop
 8002094:	200000a3 	.word	0x200000a3

08002098 <__sinit>:
 8002098:	b510      	push	{r4, lr}
 800209a:	4604      	mov	r4, r0
 800209c:	f7ff fff0 	bl	8002080 <__sinit_lock_acquire>
 80020a0:	69a3      	ldr	r3, [r4, #24]
 80020a2:	b11b      	cbz	r3, 80020ac <__sinit+0x14>
 80020a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a8:	f7ff bff0 	b.w	800208c <__sinit_lock_release>
 80020ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020b0:	6523      	str	r3, [r4, #80]	; 0x50
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <__sinit+0x68>)
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <__sinit+0x6c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	bf08      	it	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	4620      	mov	r0, r4
 80020c2:	bf08      	it	eq
 80020c4:	61a3      	streq	r3, [r4, #24]
 80020c6:	f000 f81f 	bl	8002108 <__sfp>
 80020ca:	6060      	str	r0, [r4, #4]
 80020cc:	4620      	mov	r0, r4
 80020ce:	f000 f81b 	bl	8002108 <__sfp>
 80020d2:	60a0      	str	r0, [r4, #8]
 80020d4:	4620      	mov	r0, r4
 80020d6:	f000 f817 	bl	8002108 <__sfp>
 80020da:	2200      	movs	r2, #0
 80020dc:	2104      	movs	r1, #4
 80020de:	60e0      	str	r0, [r4, #12]
 80020e0:	6860      	ldr	r0, [r4, #4]
 80020e2:	f7ff ff81 	bl	8001fe8 <std>
 80020e6:	2201      	movs	r2, #1
 80020e8:	2109      	movs	r1, #9
 80020ea:	68a0      	ldr	r0, [r4, #8]
 80020ec:	f7ff ff7c 	bl	8001fe8 <std>
 80020f0:	2202      	movs	r2, #2
 80020f2:	2112      	movs	r1, #18
 80020f4:	68e0      	ldr	r0, [r4, #12]
 80020f6:	f7ff ff77 	bl	8001fe8 <std>
 80020fa:	2301      	movs	r3, #1
 80020fc:	61a3      	str	r3, [r4, #24]
 80020fe:	e7d1      	b.n	80020a4 <__sinit+0xc>
 8002100:	080024f0 	.word	0x080024f0
 8002104:	08002031 	.word	0x08002031

08002108 <__sfp>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	4607      	mov	r7, r0
 800210c:	f7ff ffac 	bl	8002068 <__sfp_lock_acquire>
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <__sfp+0x84>)
 8002112:	681e      	ldr	r6, [r3, #0]
 8002114:	69b3      	ldr	r3, [r6, #24]
 8002116:	b913      	cbnz	r3, 800211e <__sfp+0x16>
 8002118:	4630      	mov	r0, r6
 800211a:	f7ff ffbd 	bl	8002098 <__sinit>
 800211e:	3648      	adds	r6, #72	; 0x48
 8002120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002124:	3b01      	subs	r3, #1
 8002126:	d503      	bpl.n	8002130 <__sfp+0x28>
 8002128:	6833      	ldr	r3, [r6, #0]
 800212a:	b30b      	cbz	r3, 8002170 <__sfp+0x68>
 800212c:	6836      	ldr	r6, [r6, #0]
 800212e:	e7f7      	b.n	8002120 <__sfp+0x18>
 8002130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002134:	b9d5      	cbnz	r5, 800216c <__sfp+0x64>
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <__sfp+0x88>)
 8002138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800213c:	60e3      	str	r3, [r4, #12]
 800213e:	6665      	str	r5, [r4, #100]	; 0x64
 8002140:	f000 f847 	bl	80021d2 <__retarget_lock_init_recursive>
 8002144:	f7ff ff96 	bl	8002074 <__sfp_lock_release>
 8002148:	2208      	movs	r2, #8
 800214a:	4629      	mov	r1, r5
 800214c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002154:	6025      	str	r5, [r4, #0]
 8002156:	61a5      	str	r5, [r4, #24]
 8002158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800215c:	f7ff f996 	bl	800148c <memset>
 8002160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002168:	4620      	mov	r0, r4
 800216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800216c:	3468      	adds	r4, #104	; 0x68
 800216e:	e7d9      	b.n	8002124 <__sfp+0x1c>
 8002170:	2104      	movs	r1, #4
 8002172:	4638      	mov	r0, r7
 8002174:	f7ff ff62 	bl	800203c <__sfmoreglue>
 8002178:	4604      	mov	r4, r0
 800217a:	6030      	str	r0, [r6, #0]
 800217c:	2800      	cmp	r0, #0
 800217e:	d1d5      	bne.n	800212c <__sfp+0x24>
 8002180:	f7ff ff78 	bl	8002074 <__sfp_lock_release>
 8002184:	230c      	movs	r3, #12
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	e7ee      	b.n	8002168 <__sfp+0x60>
 800218a:	bf00      	nop
 800218c:	080024f0 	.word	0x080024f0
 8002190:	ffff0001 	.word	0xffff0001

08002194 <_fwalk_reent>:
 8002194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002198:	4606      	mov	r6, r0
 800219a:	4688      	mov	r8, r1
 800219c:	2700      	movs	r7, #0
 800219e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021a6:	f1b9 0901 	subs.w	r9, r9, #1
 80021aa:	d505      	bpl.n	80021b8 <_fwalk_reent+0x24>
 80021ac:	6824      	ldr	r4, [r4, #0]
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	d1f7      	bne.n	80021a2 <_fwalk_reent+0xe>
 80021b2:	4638      	mov	r0, r7
 80021b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021b8:	89ab      	ldrh	r3, [r5, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d907      	bls.n	80021ce <_fwalk_reent+0x3a>
 80021be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021c2:	3301      	adds	r3, #1
 80021c4:	d003      	beq.n	80021ce <_fwalk_reent+0x3a>
 80021c6:	4629      	mov	r1, r5
 80021c8:	4630      	mov	r0, r6
 80021ca:	47c0      	blx	r8
 80021cc:	4307      	orrs	r7, r0
 80021ce:	3568      	adds	r5, #104	; 0x68
 80021d0:	e7e9      	b.n	80021a6 <_fwalk_reent+0x12>

080021d2 <__retarget_lock_init_recursive>:
 80021d2:	4770      	bx	lr

080021d4 <__retarget_lock_acquire_recursive>:
 80021d4:	4770      	bx	lr

080021d6 <__retarget_lock_release_recursive>:
 80021d6:	4770      	bx	lr

080021d8 <__swhatbuf_r>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	460e      	mov	r6, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	4614      	mov	r4, r2
 80021e2:	2900      	cmp	r1, #0
 80021e4:	461d      	mov	r5, r3
 80021e6:	b096      	sub	sp, #88	; 0x58
 80021e8:	da07      	bge.n	80021fa <__swhatbuf_r+0x22>
 80021ea:	2300      	movs	r3, #0
 80021ec:	602b      	str	r3, [r5, #0]
 80021ee:	89b3      	ldrh	r3, [r6, #12]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	d410      	bmi.n	8002216 <__swhatbuf_r+0x3e>
 80021f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f8:	e00e      	b.n	8002218 <__swhatbuf_r+0x40>
 80021fa:	466a      	mov	r2, sp
 80021fc:	f000 f914 	bl	8002428 <_fstat_r>
 8002200:	2800      	cmp	r0, #0
 8002202:	dbf2      	blt.n	80021ea <__swhatbuf_r+0x12>
 8002204:	9a01      	ldr	r2, [sp, #4]
 8002206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800220a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800220e:	425a      	negs	r2, r3
 8002210:	415a      	adcs	r2, r3
 8002212:	602a      	str	r2, [r5, #0]
 8002214:	e7ee      	b.n	80021f4 <__swhatbuf_r+0x1c>
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	2000      	movs	r0, #0
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	b016      	add	sp, #88	; 0x58
 800221e:	bd70      	pop	{r4, r5, r6, pc}

08002220 <__smakebuf_r>:
 8002220:	898b      	ldrh	r3, [r1, #12]
 8002222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002224:	079d      	lsls	r5, r3, #30
 8002226:	4606      	mov	r6, r0
 8002228:	460c      	mov	r4, r1
 800222a:	d507      	bpl.n	800223c <__smakebuf_r+0x1c>
 800222c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002230:	6023      	str	r3, [r4, #0]
 8002232:	6123      	str	r3, [r4, #16]
 8002234:	2301      	movs	r3, #1
 8002236:	6163      	str	r3, [r4, #20]
 8002238:	b002      	add	sp, #8
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	466a      	mov	r2, sp
 800223e:	ab01      	add	r3, sp, #4
 8002240:	f7ff ffca 	bl	80021d8 <__swhatbuf_r>
 8002244:	9900      	ldr	r1, [sp, #0]
 8002246:	4605      	mov	r5, r0
 8002248:	4630      	mov	r0, r6
 800224a:	f7ff f9eb 	bl	8001624 <_malloc_r>
 800224e:	b948      	cbnz	r0, 8002264 <__smakebuf_r+0x44>
 8002250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002254:	059a      	lsls	r2, r3, #22
 8002256:	d4ef      	bmi.n	8002238 <__smakebuf_r+0x18>
 8002258:	f023 0303 	bic.w	r3, r3, #3
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	e7e3      	b.n	800222c <__smakebuf_r+0xc>
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <__smakebuf_r+0x7c>)
 8002266:	62b3      	str	r3, [r6, #40]	; 0x28
 8002268:	89a3      	ldrh	r3, [r4, #12]
 800226a:	6020      	str	r0, [r4, #0]
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	81a3      	strh	r3, [r4, #12]
 8002272:	9b00      	ldr	r3, [sp, #0]
 8002274:	6120      	str	r0, [r4, #16]
 8002276:	6163      	str	r3, [r4, #20]
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	b15b      	cbz	r3, 8002294 <__smakebuf_r+0x74>
 800227c:	4630      	mov	r0, r6
 800227e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002282:	f000 f8e3 	bl	800244c <_isatty_r>
 8002286:	b128      	cbz	r0, 8002294 <__smakebuf_r+0x74>
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	89a0      	ldrh	r0, [r4, #12]
 8002296:	4305      	orrs	r5, r0
 8002298:	81a5      	strh	r5, [r4, #12]
 800229a:	e7cd      	b.n	8002238 <__smakebuf_r+0x18>
 800229c:	08002031 	.word	0x08002031

080022a0 <memchr>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	b510      	push	{r4, lr}
 80022a4:	b2c9      	uxtb	r1, r1
 80022a6:	4402      	add	r2, r0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	d101      	bne.n	80022b2 <memchr+0x12>
 80022ae:	2000      	movs	r0, #0
 80022b0:	e003      	b.n	80022ba <memchr+0x1a>
 80022b2:	7804      	ldrb	r4, [r0, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	428c      	cmp	r4, r1
 80022b8:	d1f6      	bne.n	80022a8 <memchr+0x8>
 80022ba:	bd10      	pop	{r4, pc}

080022bc <__malloc_lock>:
 80022bc:	4801      	ldr	r0, [pc, #4]	; (80022c4 <__malloc_lock+0x8>)
 80022be:	f7ff bf89 	b.w	80021d4 <__retarget_lock_acquire_recursive>
 80022c2:	bf00      	nop
 80022c4:	200000a4 	.word	0x200000a4

080022c8 <__malloc_unlock>:
 80022c8:	4801      	ldr	r0, [pc, #4]	; (80022d0 <__malloc_unlock+0x8>)
 80022ca:	f7ff bf84 	b.w	80021d6 <__retarget_lock_release_recursive>
 80022ce:	bf00      	nop
 80022d0:	200000a4 	.word	0x200000a4

080022d4 <_raise_r>:
 80022d4:	291f      	cmp	r1, #31
 80022d6:	b538      	push	{r3, r4, r5, lr}
 80022d8:	4604      	mov	r4, r0
 80022da:	460d      	mov	r5, r1
 80022dc:	d904      	bls.n	80022e8 <_raise_r+0x14>
 80022de:	2316      	movs	r3, #22
 80022e0:	6003      	str	r3, [r0, #0]
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
 80022e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80022ea:	b112      	cbz	r2, 80022f2 <_raise_r+0x1e>
 80022ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80022f0:	b94b      	cbnz	r3, 8002306 <_raise_r+0x32>
 80022f2:	4620      	mov	r0, r4
 80022f4:	f000 f830 	bl	8002358 <_getpid_r>
 80022f8:	462a      	mov	r2, r5
 80022fa:	4601      	mov	r1, r0
 80022fc:	4620      	mov	r0, r4
 80022fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002302:	f000 b817 	b.w	8002334 <_kill_r>
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00a      	beq.n	8002320 <_raise_r+0x4c>
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	d103      	bne.n	8002316 <_raise_r+0x42>
 800230e:	2316      	movs	r3, #22
 8002310:	6003      	str	r3, [r0, #0]
 8002312:	2001      	movs	r0, #1
 8002314:	e7e7      	b.n	80022e6 <_raise_r+0x12>
 8002316:	2400      	movs	r4, #0
 8002318:	4628      	mov	r0, r5
 800231a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800231e:	4798      	blx	r3
 8002320:	2000      	movs	r0, #0
 8002322:	e7e0      	b.n	80022e6 <_raise_r+0x12>

08002324 <raise>:
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <raise+0xc>)
 8002326:	4601      	mov	r1, r0
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	f7ff bfd3 	b.w	80022d4 <_raise_r>
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c

08002334 <_kill_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	2300      	movs	r3, #0
 8002338:	4d06      	ldr	r5, [pc, #24]	; (8002354 <_kill_r+0x20>)
 800233a:	4604      	mov	r4, r0
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	f7fe f8bb 	bl	80004bc <_kill>
 8002346:	1c43      	adds	r3, r0, #1
 8002348:	d102      	bne.n	8002350 <_kill_r+0x1c>
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	b103      	cbz	r3, 8002350 <_kill_r+0x1c>
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	bd38      	pop	{r3, r4, r5, pc}
 8002352:	bf00      	nop
 8002354:	200000ac 	.word	0x200000ac

08002358 <_getpid_r>:
 8002358:	f7fe b8a9 	b.w	80004ae <_getpid>

0800235c <__sread>:
 800235c:	b510      	push	{r4, lr}
 800235e:	460c      	mov	r4, r1
 8002360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002364:	f000 f894 	bl	8002490 <_read_r>
 8002368:	2800      	cmp	r0, #0
 800236a:	bfab      	itete	ge
 800236c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800236e:	89a3      	ldrhlt	r3, [r4, #12]
 8002370:	181b      	addge	r3, r3, r0
 8002372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002376:	bfac      	ite	ge
 8002378:	6563      	strge	r3, [r4, #84]	; 0x54
 800237a:	81a3      	strhlt	r3, [r4, #12]
 800237c:	bd10      	pop	{r4, pc}

0800237e <__swrite>:
 800237e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002382:	461f      	mov	r7, r3
 8002384:	898b      	ldrh	r3, [r1, #12]
 8002386:	4605      	mov	r5, r0
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	460c      	mov	r4, r1
 800238c:	4616      	mov	r6, r2
 800238e:	d505      	bpl.n	800239c <__swrite+0x1e>
 8002390:	2302      	movs	r3, #2
 8002392:	2200      	movs	r2, #0
 8002394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002398:	f000 f868 	bl	800246c <_lseek_r>
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	4632      	mov	r2, r6
 80023a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a4:	81a3      	strh	r3, [r4, #12]
 80023a6:	4628      	mov	r0, r5
 80023a8:	463b      	mov	r3, r7
 80023aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023b2:	f000 b817 	b.w	80023e4 <_write_r>

080023b6 <__sseek>:
 80023b6:	b510      	push	{r4, lr}
 80023b8:	460c      	mov	r4, r1
 80023ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023be:	f000 f855 	bl	800246c <_lseek_r>
 80023c2:	1c43      	adds	r3, r0, #1
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	bf15      	itete	ne
 80023c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80023ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023d2:	81a3      	strheq	r3, [r4, #12]
 80023d4:	bf18      	it	ne
 80023d6:	81a3      	strhne	r3, [r4, #12]
 80023d8:	bd10      	pop	{r4, pc}

080023da <__sclose>:
 80023da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023de:	f000 b813 	b.w	8002408 <_close_r>
	...

080023e4 <_write_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	4d05      	ldr	r5, [pc, #20]	; (8002404 <_write_r+0x20>)
 80023f0:	602a      	str	r2, [r5, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7fe f899 	bl	800052a <_write>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d102      	bne.n	8002402 <_write_r+0x1e>
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	b103      	cbz	r3, 8002402 <_write_r+0x1e>
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	200000ac 	.word	0x200000ac

08002408 <_close_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	2300      	movs	r3, #0
 800240c:	4d05      	ldr	r5, [pc, #20]	; (8002424 <_close_r+0x1c>)
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	602b      	str	r3, [r5, #0]
 8002414:	f7fe f8a5 	bl	8000562 <_close>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_close_r+0x1a>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_close_r+0x1a>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	200000ac 	.word	0x200000ac

08002428 <_fstat_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	2300      	movs	r3, #0
 800242c:	4d06      	ldr	r5, [pc, #24]	; (8002448 <_fstat_r+0x20>)
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	f7fe f89f 	bl	8000578 <_fstat>
 800243a:	1c43      	adds	r3, r0, #1
 800243c:	d102      	bne.n	8002444 <_fstat_r+0x1c>
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	b103      	cbz	r3, 8002444 <_fstat_r+0x1c>
 8002442:	6023      	str	r3, [r4, #0]
 8002444:	bd38      	pop	{r3, r4, r5, pc}
 8002446:	bf00      	nop
 8002448:	200000ac 	.word	0x200000ac

0800244c <_isatty_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	2300      	movs	r3, #0
 8002450:	4d05      	ldr	r5, [pc, #20]	; (8002468 <_isatty_r+0x1c>)
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	f7fe f89d 	bl	8000596 <_isatty>
 800245c:	1c43      	adds	r3, r0, #1
 800245e:	d102      	bne.n	8002466 <_isatty_r+0x1a>
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	b103      	cbz	r3, 8002466 <_isatty_r+0x1a>
 8002464:	6023      	str	r3, [r4, #0]
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	200000ac 	.word	0x200000ac

0800246c <_lseek_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4604      	mov	r4, r0
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	2200      	movs	r2, #0
 8002476:	4d05      	ldr	r5, [pc, #20]	; (800248c <_lseek_r+0x20>)
 8002478:	602a      	str	r2, [r5, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	f7fe f895 	bl	80005aa <_lseek>
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	d102      	bne.n	800248a <_lseek_r+0x1e>
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	b103      	cbz	r3, 800248a <_lseek_r+0x1e>
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	200000ac 	.word	0x200000ac

08002490 <_read_r>:
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	2200      	movs	r2, #0
 800249a:	4d05      	ldr	r5, [pc, #20]	; (80024b0 <_read_r+0x20>)
 800249c:	602a      	str	r2, [r5, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	f7fe f826 	bl	80004f0 <_read>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	d102      	bne.n	80024ae <_read_r+0x1e>
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	b103      	cbz	r3, 80024ae <_read_r+0x1e>
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	200000ac 	.word	0x200000ac

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
