
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002330  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025ac  080025ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ac  080025ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000070  08002624  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002624  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e91  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fc  00000000  00000000  00026f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00028ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753a  00000000  00000000  00028ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ddd  00000000  00000000  0004041a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f009  00000000  00000000  000461f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019fc  00000000  00000000  000c5254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002424 	.word	0x08002424

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002424 	.word	0x08002424

0800014c <setNumberOnClock>:
 *  Created on: Sep 10, 2024
 *      Author: ACER
 */
#include "excercise8.h"

void setNumberOnClock(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0b      	cmp	r3, #11
 8000158:	d866      	bhi.n	8000228 <setNumberOnClock+0xdc>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <setNumberOnClock+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000191 	.word	0x08000191
 8000164:	0800019f 	.word	0x0800019f
 8000168:	080001ab 	.word	0x080001ab
 800016c:	080001b7 	.word	0x080001b7
 8000170:	080001c3 	.word	0x080001c3
 8000174:	080001cf 	.word	0x080001cf
 8000178:	080001db 	.word	0x080001db
 800017c:	080001e7 	.word	0x080001e7
 8000180:	080001f3 	.word	0x080001f3
 8000184:	080001ff 	.word	0x080001ff
 8000188:	0800020d 	.word	0x0800020d
 800018c:	0800021b 	.word	0x0800021b
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);  // LED cho số 12
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000196:	4826      	ldr	r0, [pc, #152]	; (8000230 <setNumberOnClock+0xe4>)
 8000198:	f000 fd12 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 800019c:	e044      	b.n	8000228 <setNumberOnClock+0xdc>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED cho số 1
 800019e:	2201      	movs	r2, #1
 80001a0:	2101      	movs	r1, #1
 80001a2:	4823      	ldr	r0, [pc, #140]	; (8000230 <setNumberOnClock+0xe4>)
 80001a4:	f000 fd0c 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001a8:	e03e      	b.n	8000228 <setNumberOnClock+0xdc>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // LED cho số 2
 80001aa:	2201      	movs	r2, #1
 80001ac:	2102      	movs	r1, #2
 80001ae:	4820      	ldr	r0, [pc, #128]	; (8000230 <setNumberOnClock+0xe4>)
 80001b0:	f000 fd06 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001b4:	e038      	b.n	8000228 <setNumberOnClock+0xdc>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // LED cho số 3
 80001b6:	2201      	movs	r2, #1
 80001b8:	2104      	movs	r1, #4
 80001ba:	481d      	ldr	r0, [pc, #116]	; (8000230 <setNumberOnClock+0xe4>)
 80001bc:	f000 fd00 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001c0:	e032      	b.n	8000228 <setNumberOnClock+0xdc>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);  // LED cho số 4
 80001c2:	2201      	movs	r2, #1
 80001c4:	2108      	movs	r1, #8
 80001c6:	481a      	ldr	r0, [pc, #104]	; (8000230 <setNumberOnClock+0xe4>)
 80001c8:	f000 fcfa 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001cc:	e02c      	b.n	8000228 <setNumberOnClock+0xdc>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);  // LED cho số 5
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	4817      	ldr	r0, [pc, #92]	; (8000230 <setNumberOnClock+0xe4>)
 80001d4:	f000 fcf4 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001d8:	e026      	b.n	8000228 <setNumberOnClock+0xdc>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // LED cho số 6
 80001da:	2201      	movs	r2, #1
 80001dc:	2120      	movs	r1, #32
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <setNumberOnClock+0xe4>)
 80001e0:	f000 fcee 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001e4:	e020      	b.n	8000228 <setNumberOnClock+0xdc>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // LED cho số 7
 80001e6:	2201      	movs	r2, #1
 80001e8:	2140      	movs	r1, #64	; 0x40
 80001ea:	4811      	ldr	r0, [pc, #68]	; (8000230 <setNumberOnClock+0xe4>)
 80001ec:	f000 fce8 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001f0:	e01a      	b.n	8000228 <setNumberOnClock+0xdc>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // LED cho số 8
 80001f2:	2201      	movs	r2, #1
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	480e      	ldr	r0, [pc, #56]	; (8000230 <setNumberOnClock+0xe4>)
 80001f8:	f000 fce2 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 80001fc:	e014      	b.n	8000228 <setNumberOnClock+0xdc>
		case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // LED cho số 9
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <setNumberOnClock+0xe4>)
 8000206:	f000 fcdb 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 800020a:	e00d      	b.n	8000228 <setNumberOnClock+0xdc>
		case 10:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);  // LED cho số 10
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <setNumberOnClock+0xe4>)
 8000214:	f000 fcd4 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 8000218:	e006      	b.n	8000228 <setNumberOnClock+0xdc>
		case 11:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  // LED cho số 11
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <setNumberOnClock+0xe4>)
 8000222:	f000 fccd 	bl	8000bc0 <HAL_GPIO_WritePin>
			break;
 8000226:	bf00      	nop
	}
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010c00 	.word	0x40010c00

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 f9de 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f820 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f85a 	bl	80002f8 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = rand() % 12;
 8000244:	f001 f8e2 	bl	800140c <rand>
 8000248:	4601      	mov	r1, r0
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x44>)
 800024c:	fb83 2301 	smull	r2, r3, r3, r1
 8000250:	105a      	asrs	r2, r3, #1
 8000252:	17cb      	asrs	r3, r1, #31
 8000254:	1ad2      	subs	r2, r2, r3
 8000256:	4613      	mov	r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	4413      	add	r3, r2
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	1aca      	subs	r2, r1, r3
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x48>)
 8000262:	601a      	str	r2, [r3, #0]
	  setNumberOnClock(count);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x48>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff6f 	bl	800014c <setNumberOnClock>
	  HAL_Delay(1000);
 800026e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000272:	f000 fa23 	bl	80006bc <HAL_Delay>
	  count = rand() % 12;
 8000276:	e7e5      	b.n	8000244 <main+0x10>
 8000278:	2aaaaaab 	.word	0x2aaaaaab
 800027c:	2000008c 	.word	0x2000008c

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f8b4 	bl	80013fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fc9a 	bl	8000bf0 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c2:	f000 f84d 	bl	8000360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 ff06 	bl	80010f0 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ea:	f000 f839 	bl	8000360 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	; 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x60>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x60>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0x60>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000324:	2200      	movs	r2, #0
 8000326:	f640 71ff 	movw	r1, #4095	; 0xfff
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0x64>)
 800032c:	f000 fc48 	bl	8000bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000330:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000334:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x64>)
 800034a:	f000 fabf 	bl	80008cc <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	e7fe      	b.n	8000368 <Error_Handler+0x8>
	...

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <HAL_MspInit+0x5c>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <HAL_MspInit+0x5c>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x5c>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x5c>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <HAL_MspInit+0x60>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <HAL_MspInit+0x60>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <NMI_Handler+0x4>

080003d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <HardFault_Handler+0x4>

080003dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <MemManage_Handler+0x4>

080003e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <UsageFault_Handler+0x4>

080003ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000416:	f000 f935 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}

0800041e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
	return 1;
 8000422:	2301      	movs	r3, #1
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <_kill>:

int _kill(int pid, int sig)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000436:	f000 ffb7 	bl	80013a8 <__errno>
 800043a:	4603      	mov	r3, r0
 800043c:	2216      	movs	r2, #22
 800043e:	601a      	str	r2, [r3, #0]
	return -1;
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <_exit>:

void _exit (int status)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000454:	f04f 31ff 	mov.w	r1, #4294967295
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ffe7 	bl	800042c <_kill>
	while (1) {}		/* Make sure we hang here */
 800045e:	e7fe      	b.n	800045e <_exit+0x12>

08000460 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	e00a      	b.n	8000488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000472:	f3af 8000 	nop.w
 8000476:	4601      	mov	r1, r0
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	60ba      	str	r2, [r7, #8]
 800047e:	b2ca      	uxtb	r2, r1
 8000480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	429a      	cmp	r2, r3
 800048e:	dbf0      	blt.n	8000472 <_read+0x12>
	}

return len;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	e009      	b.n	80004c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	3301      	adds	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbf1      	blt.n	80004ac <_write+0x12>
	}
	return len;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <_close>:

int _close(int file)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	return -1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f8:	605a      	str	r2, [r3, #4]
	return 0;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <_isatty>:

int _isatty(int file)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
	return 1;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
	...

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 ff20 	bl	80013a8 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20002800 	.word	0x20002800
 8000594:	00000400 	.word	0x00000400
 8000598:	20000090 	.word	0x20000090
 800059c:	200000b0 	.word	0x200000b0

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff fff8 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005b2:	490c      	ldr	r1, [pc, #48]	; (80005e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c8:	4c09      	ldr	r4, [pc, #36]	; (80005f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d6:	f000 feed 	bl	80013b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fe2b 	bl	8000234 <main>
  bx lr
 80005de:	4770      	bx	lr
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005e8:	080025b4 	.word	0x080025b4
  ldr r2, =_sbss
 80005ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005f0:	200000b0 	.word	0x200000b0

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f92b 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	200f      	movs	r0, #15
 8000610:	f000 f808 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff feaa 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f935 	bl	80008b2 <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f90b 	bl	800087a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000008 	.word	0x20000008
 80006a4:	2000009c 	.word	0x2000009c

080006a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	2000009c 	.word	0x2000009c

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff fff0 	bl	80006a8 <HAL_GetTick>
 80006c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_Delay+0x44>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e2:	bf00      	nop
 80006e4:	f7ff ffe0 	bl	80006a8 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f7      	bhi.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000008 	.word	0x20000008

08000704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000830:	d301      	bcc.n	8000836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <SysTick_Config+0x40>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083e:	210f      	movs	r1, #15
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f7ff ff90 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <SysTick_Config+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SysTick_Config+0x40>)
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff49 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff5e 	bl	800074c <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ff90 	bl	80007bc <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff5f 	bl	8000768 <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffb0 	bl	8000820 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e148      	b.n	8000b72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e0:	2201      	movs	r2, #1
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	f040 8137 	bne.w	8000b6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4aa3      	ldr	r2, [pc, #652]	; (8000b90 <HAL_GPIO_Init+0x2c4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d05e      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000908:	4aa1      	ldr	r2, [pc, #644]	; (8000b90 <HAL_GPIO_Init+0x2c4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d875      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800090e:	4aa1      	ldr	r2, [pc, #644]	; (8000b94 <HAL_GPIO_Init+0x2c8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d058      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000914:	4a9f      	ldr	r2, [pc, #636]	; (8000b94 <HAL_GPIO_Init+0x2c8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d86f      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800091a:	4a9f      	ldr	r2, [pc, #636]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d052      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000920:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d869      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000926:	4a9d      	ldr	r2, [pc, #628]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d04c      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 800092c:	4a9b      	ldr	r2, [pc, #620]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d863      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000932:	4a9b      	ldr	r2, [pc, #620]	; (8000ba0 <HAL_GPIO_Init+0x2d4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d046      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000938:	4a99      	ldr	r2, [pc, #612]	; (8000ba0 <HAL_GPIO_Init+0x2d4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d85d      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800093e:	2b12      	cmp	r3, #18
 8000940:	d82a      	bhi.n	8000998 <HAL_GPIO_Init+0xcc>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d859      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <HAL_GPIO_Init+0x80>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	080009c7 	.word	0x080009c7
 8000950:	080009a1 	.word	0x080009a1
 8000954:	080009b3 	.word	0x080009b3
 8000958:	080009f5 	.word	0x080009f5
 800095c:	080009fb 	.word	0x080009fb
 8000960:	080009fb 	.word	0x080009fb
 8000964:	080009fb 	.word	0x080009fb
 8000968:	080009fb 	.word	0x080009fb
 800096c:	080009fb 	.word	0x080009fb
 8000970:	080009fb 	.word	0x080009fb
 8000974:	080009fb 	.word	0x080009fb
 8000978:	080009fb 	.word	0x080009fb
 800097c:	080009fb 	.word	0x080009fb
 8000980:	080009fb 	.word	0x080009fb
 8000984:	080009fb 	.word	0x080009fb
 8000988:	080009fb 	.word	0x080009fb
 800098c:	080009fb 	.word	0x080009fb
 8000990:	080009a9 	.word	0x080009a9
 8000994:	080009bd 	.word	0x080009bd
 8000998:	4a82      	ldr	r2, [pc, #520]	; (8000ba4 <HAL_GPIO_Init+0x2d8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d013      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800099e:	e02c      	b.n	80009fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	623b      	str	r3, [r7, #32]
          break;
 80009a6:	e029      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	3304      	adds	r3, #4
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e024      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	3308      	adds	r3, #8
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e01f      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	330c      	adds	r3, #12
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e01a      	b.n	80009fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ce:	2304      	movs	r3, #4
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e013      	b.n	80009fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d105      	bne.n	80009e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009dc:	2308      	movs	r3, #8
 80009de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	611a      	str	r2, [r3, #16]
          break;
 80009e6:	e009      	b.n	80009fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e8:	2308      	movs	r3, #8
 80009ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	615a      	str	r2, [r3, #20]
          break;
 80009f2:	e003      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e000      	b.n	80009fc <HAL_GPIO_Init+0x130>
          break;
 80009fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	2bff      	cmp	r3, #255	; 0xff
 8000a00:	d801      	bhi.n	8000a06 <HAL_GPIO_Init+0x13a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	e001      	b.n	8000a0a <HAL_GPIO_Init+0x13e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	d802      	bhi.n	8000a18 <HAL_GPIO_Init+0x14c>
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	e002      	b.n	8000a1e <HAL_GPIO_Init+0x152>
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	210f      	movs	r1, #15
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	401a      	ands	r2, r3
 8000a30:	6a39      	ldr	r1, [r7, #32]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 8090 	beq.w	8000b6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4c:	4b56      	ldr	r3, [pc, #344]	; (8000ba8 <HAL_GPIO_Init+0x2dc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <HAL_GPIO_Init+0x2dc>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <HAL_GPIO_Init+0x2dc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a64:	4a51      	ldr	r2, [pc, #324]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a49      	ldr	r2, [pc, #292]	; (8000bb0 <HAL_GPIO_Init+0x2e4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00d      	beq.n	8000aac <HAL_GPIO_Init+0x1e0>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <HAL_GPIO_Init+0x2e8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x1dc>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a47      	ldr	r2, [pc, #284]	; (8000bb8 <HAL_GPIO_Init+0x2ec>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_GPIO_Init+0x1d8>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aac:	2300      	movs	r3, #0
 8000aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab0:	f002 0203 	and.w	r2, r2, #3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000abe:	493b      	ldr	r1, [pc, #236]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	4937      	ldr	r1, [pc, #220]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	608b      	str	r3, [r1, #8]
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4933      	ldr	r1, [pc, #204]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	492d      	ldr	r1, [pc, #180]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60cb      	str	r3, [r1, #12]
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	4929      	ldr	r1, [pc, #164]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4923      	ldr	r1, [pc, #140]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	491f      	ldr	r1, [pc, #124]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4919      	ldr	r1, [pc, #100]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	600b      	str	r3, [r1, #0]
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4915      	ldr	r1, [pc, #84]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	3301      	adds	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f47f aeaf 	bne.w	80008e0 <HAL_GPIO_Init+0x14>
  }
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	372c      	adds	r7, #44	; 0x2c
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	10320000 	.word	0x10320000
 8000b94:	10310000 	.word	0x10310000
 8000b98:	10220000 	.word	0x10220000
 8000b9c:	10210000 	.word	0x10210000
 8000ba0:	10120000 	.word	0x10120000
 8000ba4:	10110000 	.word	0x10110000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bdc:	e003      	b.n	8000be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	041a      	lsls	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	611a      	str	r2, [r3, #16]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e26c      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8087 	beq.w	8000d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c10:	4b92      	ldr	r3, [pc, #584]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d00c      	beq.n	8000c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1c:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 030c 	and.w	r3, r3, #12
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d112      	bne.n	8000c4e <HAL_RCC_OscConfig+0x5e>
 8000c28:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d10b      	bne.n	8000c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d06c      	beq.n	8000d1c <HAL_RCC_OscConfig+0x12c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d168      	bne.n	8000d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e246      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c56:	d106      	bne.n	8000c66 <HAL_RCC_OscConfig+0x76>
 8000c58:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a7f      	ldr	r2, [pc, #508]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e02e      	b.n	8000cc4 <HAL_RCC_OscConfig+0xd4>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10c      	bne.n	8000c88 <HAL_RCC_OscConfig+0x98>
 8000c6e:	4b7b      	ldr	r3, [pc, #492]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7a      	ldr	r2, [pc, #488]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	4b78      	ldr	r3, [pc, #480]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a77      	ldr	r2, [pc, #476]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e01d      	b.n	8000cc4 <HAL_RCC_OscConfig+0xd4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0xbc>
 8000c92:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a71      	ldr	r2, [pc, #452]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b6f      	ldr	r3, [pc, #444]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6e      	ldr	r2, [pc, #440]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0xd4>
 8000cac:	4b6b      	ldr	r3, [pc, #428]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a6a      	ldr	r2, [pc, #424]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b68      	ldr	r3, [pc, #416]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a67      	ldr	r2, [pc, #412]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fcec 	bl	80006a8 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fce8 	bl	80006a8 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1fa      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b5d      	ldr	r3, [pc, #372]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xe4>
 8000cf2:	e014      	b.n	8000d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fcd8 	bl	80006a8 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fcd4 	bl	80006a8 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1e6      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0x10c>
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d063      	beq.n	8000df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d2a:	4b4c      	ldr	r3, [pc, #304]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d36:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d11c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x18c>
 8000d42:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x176>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e1ba      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4939      	ldr	r1, [pc, #228]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	e03a      	b.n	8000df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_RCC_OscConfig+0x270>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fc8d 	bl	80006a8 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fc89 	bl	80006a8 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e19b      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	4927      	ldr	r1, [pc, #156]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fc6c 	bl	80006a8 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fc68 	bl	80006a8 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e17a      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d03a      	beq.n	8000e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d019      	beq.n	8000e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_RCC_OscConfig+0x274>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fc4c 	bl	80006a8 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fc48 	bl	80006a8 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e15a      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fa9a 	bl	800136c <RCC_Delay>
 8000e38:	e01c      	b.n	8000e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_RCC_OscConfig+0x274>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e40:	f7ff fc32 	bl	80006a8 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e46:	e00f      	b.n	8000e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fc2e 	bl	80006a8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d908      	bls.n	8000e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e140      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	42420000 	.word	0x42420000
 8000e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e68:	4b9e      	ldr	r3, [pc, #632]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1e9      	bne.n	8000e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80a6 	beq.w	8000fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e86:	4b97      	ldr	r3, [pc, #604]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10d      	bne.n	8000eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b94      	ldr	r3, [pc, #592]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a93      	ldr	r2, [pc, #588]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eae:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <HAL_RCC_OscConfig+0x4f8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d118      	bne.n	8000eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eba:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <HAL_RCC_OscConfig+0x4f8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a8a      	ldr	r2, [pc, #552]	; (80010e8 <HAL_RCC_OscConfig+0x4f8>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fbef 	bl	80006a8 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ece:	f7ff fbeb 	bl	80006a8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e0fd      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee0:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <HAL_RCC_OscConfig+0x4f8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f0      	beq.n	8000ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x312>
 8000ef4:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	e02d      	b.n	8000f5e <HAL_RCC_OscConfig+0x36e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x334>
 8000f0a:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a75      	ldr	r2, [pc, #468]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	4b73      	ldr	r3, [pc, #460]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a72      	ldr	r2, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	e01c      	b.n	8000f5e <HAL_RCC_OscConfig+0x36e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d10c      	bne.n	8000f46 <HAL_RCC_OscConfig+0x356>
 8000f2c:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4a6c      	ldr	r2, [pc, #432]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6213      	str	r3, [r2, #32]
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a69      	ldr	r2, [pc, #420]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	e00b      	b.n	8000f5e <HAL_RCC_OscConfig+0x36e>
 8000f46:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a66      	ldr	r2, [pc, #408]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a63      	ldr	r2, [pc, #396]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d015      	beq.n	8000f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb9f 	bl	80006a8 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb9b 	bl	80006a8 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e0ab      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0ee      	beq.n	8000f6e <HAL_RCC_OscConfig+0x37e>
 8000f90:	e014      	b.n	8000fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb89 	bl	80006a8 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f98:	e00a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fb85 	bl	80006a8 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e095      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1ee      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d105      	bne.n	8000fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8081 	beq.w	80010da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd8:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d061      	beq.n	80010a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d146      	bne.n	800107a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_RCC_OscConfig+0x4fc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb59 	bl	80006a8 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb55 	bl	80006a8 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e067      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f0      	bne.n	8000ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d108      	bne.n	8001034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	492d      	ldr	r1, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a19      	ldr	r1, [r3, #32]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	430b      	orrs	r3, r1
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x4fc>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fb29 	bl	80006a8 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff fb25 	bl	80006a8 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e037      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x46a>
 8001078:	e02f      	b.n	80010da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_RCC_OscConfig+0x4fc>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fb12 	bl	80006a8 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001088:	f7ff fb0e 	bl	80006a8 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e020      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x498>
 80010a6:	e018      	b.n	80010da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e013      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40007000 	.word	0x40007000
 80010ec:	42420060 	.word	0x42420060

080010f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0d0      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d910      	bls.n	8001134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 0207 	bic.w	r2, r3, #7
 800111a:	4965      	ldr	r1, [pc, #404]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0b8      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d020      	beq.n	8001182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800116e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	494d      	ldr	r1, [pc, #308]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d040      	beq.n	8001210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d115      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e07f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e073      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06b      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f023 0203 	bic.w	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4936      	ldr	r1, [pc, #216]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff fa62 	bl	80006a8 <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7ff fa5e 	bl	80006a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e053      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 020c 	and.w	r2, r3, #12
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	429a      	cmp	r2, r3
 800120e:	d1eb      	bne.n	80011e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d210      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 0207 	bic.w	r2, r3, #7
 8001226:	4922      	ldr	r1, [pc, #136]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e032      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4916      	ldr	r1, [pc, #88]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	490e      	ldr	r1, [pc, #56]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800127e:	f000 f821 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001282:	4602      	mov	r2, r0
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	490a      	ldr	r1, [pc, #40]	; (80012b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001290:	5ccb      	ldrb	r3, [r1, r3]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1cc>)
 8001298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1d0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f9c0 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	0800243c 	.word	0x0800243c
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d002      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x30>
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d003      	beq.n	80012fa <HAL_RCC_GetSysClockFreq+0x36>
 80012f2:	e027      	b.n	8001344 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_GetSysClockFreq+0x98>)
 80012f6:	613b      	str	r3, [r7, #16]
      break;
 80012f8:	e027      	b.n	800134a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	0c9b      	lsrs	r3, r3, #18
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_RCC_GetSysClockFreq+0x94>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	0c5b      	lsrs	r3, r3, #17
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_RCC_GetSysClockFreq+0xa0>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_RCC_GetSysClockFreq+0x98>)
 8001326:	fb02 f203 	mul.w	r2, r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e004      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	613b      	str	r3, [r7, #16]
      break;
 8001342:	e002      	b.n	800134a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetSysClockFreq+0x98>)
 8001346:	613b      	str	r3, [r7, #16]
      break;
 8001348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800134a:	693b      	ldr	r3, [r7, #16]
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	007a1200 	.word	0x007a1200
 8001360:	0800244c 	.word	0x0800244c
 8001364:	0800245c 	.word	0x0800245c
 8001368:	003d0900 	.word	0x003d0900

0800136c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <RCC_Delay+0x34>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <RCC_Delay+0x38>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a5b      	lsrs	r3, r3, #9
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001388:	bf00      	nop
  }
  while (Delay --);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	60fa      	str	r2, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <RCC_Delay+0x1c>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000000 	.word	0x20000000
 80013a4:	10624dd3 	.word	0x10624dd3

080013a8 <__errno>:
 80013a8:	4b01      	ldr	r3, [pc, #4]	; (80013b0 <__errno+0x8>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c

080013b4 <__libc_init_array>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	2600      	movs	r6, #0
 80013b8:	4d0c      	ldr	r5, [pc, #48]	; (80013ec <__libc_init_array+0x38>)
 80013ba:	4c0d      	ldr	r4, [pc, #52]	; (80013f0 <__libc_init_array+0x3c>)
 80013bc:	1b64      	subs	r4, r4, r5
 80013be:	10a4      	asrs	r4, r4, #2
 80013c0:	42a6      	cmp	r6, r4
 80013c2:	d109      	bne.n	80013d8 <__libc_init_array+0x24>
 80013c4:	f001 f82e 	bl	8002424 <_init>
 80013c8:	2600      	movs	r6, #0
 80013ca:	4d0a      	ldr	r5, [pc, #40]	; (80013f4 <__libc_init_array+0x40>)
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <__libc_init_array+0x44>)
 80013ce:	1b64      	subs	r4, r4, r5
 80013d0:	10a4      	asrs	r4, r4, #2
 80013d2:	42a6      	cmp	r6, r4
 80013d4:	d105      	bne.n	80013e2 <__libc_init_array+0x2e>
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
 80013d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013dc:	4798      	blx	r3
 80013de:	3601      	adds	r6, #1
 80013e0:	e7ee      	b.n	80013c0 <__libc_init_array+0xc>
 80013e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e6:	4798      	blx	r3
 80013e8:	3601      	adds	r6, #1
 80013ea:	e7f2      	b.n	80013d2 <__libc_init_array+0x1e>
 80013ec:	080025ac 	.word	0x080025ac
 80013f0:	080025ac 	.word	0x080025ac
 80013f4:	080025ac 	.word	0x080025ac
 80013f8:	080025b0 	.word	0x080025b0

080013fc <memset>:
 80013fc:	4603      	mov	r3, r0
 80013fe:	4402      	add	r2, r0
 8001400:	4293      	cmp	r3, r2
 8001402:	d100      	bne.n	8001406 <memset+0xa>
 8001404:	4770      	bx	lr
 8001406:	f803 1b01 	strb.w	r1, [r3], #1
 800140a:	e7f9      	b.n	8001400 <memset+0x4>

0800140c <rand>:
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <rand+0x60>)
 800140e:	b510      	push	{r4, lr}
 8001410:	681c      	ldr	r4, [r3, #0]
 8001412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001414:	b9b3      	cbnz	r3, 8001444 <rand+0x38>
 8001416:	2018      	movs	r0, #24
 8001418:	f000 f868 	bl	80014ec <malloc>
 800141c:	4602      	mov	r2, r0
 800141e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001420:	b920      	cbnz	r0, 800142c <rand+0x20>
 8001422:	214e      	movs	r1, #78	; 0x4e
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <rand+0x64>)
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <rand+0x68>)
 8001428:	f000 f830 	bl	800148c <__assert_func>
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <rand+0x6c>)
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <rand+0x70>)
 8001430:	e9c0 1300 	strd	r1, r3, [r0]
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <rand+0x74>)
 8001436:	2100      	movs	r1, #0
 8001438:	6083      	str	r3, [r0, #8]
 800143a:	230b      	movs	r3, #11
 800143c:	8183      	strh	r3, [r0, #12]
 800143e:	2001      	movs	r0, #1
 8001440:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001444:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <rand+0x78>)
 8001448:	690a      	ldr	r2, [r1, #16]
 800144a:	694b      	ldr	r3, [r1, #20]
 800144c:	4350      	muls	r0, r2
 800144e:	4c0e      	ldr	r4, [pc, #56]	; (8001488 <rand+0x7c>)
 8001450:	fb04 0003 	mla	r0, r4, r3, r0
 8001454:	fba2 3404 	umull	r3, r4, r2, r4
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	4404      	add	r4, r0
 800145c:	f144 0000 	adc.w	r0, r4, #0
 8001460:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8001464:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001468:	bd10      	pop	{r4, pc}
 800146a:	bf00      	nop
 800146c:	2000000c 	.word	0x2000000c
 8001470:	08002464 	.word	0x08002464
 8001474:	0800247b 	.word	0x0800247b
 8001478:	abcd330e 	.word	0xabcd330e
 800147c:	e66d1234 	.word	0xe66d1234
 8001480:	0005deec 	.word	0x0005deec
 8001484:	5851f42d 	.word	0x5851f42d
 8001488:	4c957f2d 	.word	0x4c957f2d

0800148c <__assert_func>:
 800148c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800148e:	4614      	mov	r4, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <__assert_func+0x2c>)
 8001494:	4605      	mov	r5, r0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68d8      	ldr	r0, [r3, #12]
 800149a:	b14c      	cbz	r4, 80014b0 <__assert_func+0x24>
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <__assert_func+0x30>)
 800149e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80014a2:	9100      	str	r1, [sp, #0]
 80014a4:	462b      	mov	r3, r5
 80014a6:	4906      	ldr	r1, [pc, #24]	; (80014c0 <__assert_func+0x34>)
 80014a8:	f000 f80e 	bl	80014c8 <fiprintf>
 80014ac:	f000 fc8a 	bl	8001dc4 <abort>
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__assert_func+0x38>)
 80014b2:	461c      	mov	r4, r3
 80014b4:	e7f3      	b.n	800149e <__assert_func+0x12>
 80014b6:	bf00      	nop
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	080024da 	.word	0x080024da
 80014c0:	080024e7 	.word	0x080024e7
 80014c4:	08002515 	.word	0x08002515

080014c8 <fiprintf>:
 80014c8:	b40e      	push	{r1, r2, r3}
 80014ca:	b503      	push	{r0, r1, lr}
 80014cc:	4601      	mov	r1, r0
 80014ce:	ab03      	add	r3, sp, #12
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <fiprintf+0x20>)
 80014d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80014d6:	6800      	ldr	r0, [r0, #0]
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	f000 f8dd 	bl	8001698 <_vfiprintf_r>
 80014de:	b002      	add	sp, #8
 80014e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014e4:	b003      	add	sp, #12
 80014e6:	4770      	bx	lr
 80014e8:	2000000c 	.word	0x2000000c

080014ec <malloc>:
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <malloc+0xc>)
 80014ee:	4601      	mov	r1, r0
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f000 b84f 	b.w	8001594 <_malloc_r>
 80014f6:	bf00      	nop
 80014f8:	2000000c 	.word	0x2000000c

080014fc <_free_r>:
 80014fc:	b538      	push	{r3, r4, r5, lr}
 80014fe:	4605      	mov	r5, r0
 8001500:	2900      	cmp	r1, #0
 8001502:	d043      	beq.n	800158c <_free_r+0x90>
 8001504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001508:	1f0c      	subs	r4, r1, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	bfb8      	it	lt
 800150e:	18e4      	addlt	r4, r4, r3
 8001510:	f000 fe8c 	bl	800222c <__malloc_lock>
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <_free_r+0x94>)
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	4610      	mov	r0, r2
 800151a:	b933      	cbnz	r3, 800152a <_free_r+0x2e>
 800151c:	6063      	str	r3, [r4, #4]
 800151e:	6014      	str	r4, [r2, #0]
 8001520:	4628      	mov	r0, r5
 8001522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001526:	f000 be87 	b.w	8002238 <__malloc_unlock>
 800152a:	42a3      	cmp	r3, r4
 800152c:	d90a      	bls.n	8001544 <_free_r+0x48>
 800152e:	6821      	ldr	r1, [r4, #0]
 8001530:	1862      	adds	r2, r4, r1
 8001532:	4293      	cmp	r3, r2
 8001534:	bf01      	itttt	eq
 8001536:	681a      	ldreq	r2, [r3, #0]
 8001538:	685b      	ldreq	r3, [r3, #4]
 800153a:	1852      	addeq	r2, r2, r1
 800153c:	6022      	streq	r2, [r4, #0]
 800153e:	6063      	str	r3, [r4, #4]
 8001540:	6004      	str	r4, [r0, #0]
 8001542:	e7ed      	b.n	8001520 <_free_r+0x24>
 8001544:	461a      	mov	r2, r3
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	b10b      	cbz	r3, 800154e <_free_r+0x52>
 800154a:	42a3      	cmp	r3, r4
 800154c:	d9fa      	bls.n	8001544 <_free_r+0x48>
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	1850      	adds	r0, r2, r1
 8001552:	42a0      	cmp	r0, r4
 8001554:	d10b      	bne.n	800156e <_free_r+0x72>
 8001556:	6820      	ldr	r0, [r4, #0]
 8001558:	4401      	add	r1, r0
 800155a:	1850      	adds	r0, r2, r1
 800155c:	4283      	cmp	r3, r0
 800155e:	6011      	str	r1, [r2, #0]
 8001560:	d1de      	bne.n	8001520 <_free_r+0x24>
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4401      	add	r1, r0
 8001568:	6011      	str	r1, [r2, #0]
 800156a:	6053      	str	r3, [r2, #4]
 800156c:	e7d8      	b.n	8001520 <_free_r+0x24>
 800156e:	d902      	bls.n	8001576 <_free_r+0x7a>
 8001570:	230c      	movs	r3, #12
 8001572:	602b      	str	r3, [r5, #0]
 8001574:	e7d4      	b.n	8001520 <_free_r+0x24>
 8001576:	6820      	ldr	r0, [r4, #0]
 8001578:	1821      	adds	r1, r4, r0
 800157a:	428b      	cmp	r3, r1
 800157c:	bf01      	itttt	eq
 800157e:	6819      	ldreq	r1, [r3, #0]
 8001580:	685b      	ldreq	r3, [r3, #4]
 8001582:	1809      	addeq	r1, r1, r0
 8001584:	6021      	streq	r1, [r4, #0]
 8001586:	6063      	str	r3, [r4, #4]
 8001588:	6054      	str	r4, [r2, #4]
 800158a:	e7c9      	b.n	8001520 <_free_r+0x24>
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	bf00      	nop
 8001590:	20000094 	.word	0x20000094

08001594 <_malloc_r>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	1ccd      	adds	r5, r1, #3
 8001598:	f025 0503 	bic.w	r5, r5, #3
 800159c:	3508      	adds	r5, #8
 800159e:	2d0c      	cmp	r5, #12
 80015a0:	bf38      	it	cc
 80015a2:	250c      	movcc	r5, #12
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	4606      	mov	r6, r0
 80015a8:	db01      	blt.n	80015ae <_malloc_r+0x1a>
 80015aa:	42a9      	cmp	r1, r5
 80015ac:	d903      	bls.n	80015b6 <_malloc_r+0x22>
 80015ae:	230c      	movs	r3, #12
 80015b0:	6033      	str	r3, [r6, #0]
 80015b2:	2000      	movs	r0, #0
 80015b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b6:	f000 fe39 	bl	800222c <__malloc_lock>
 80015ba:	4921      	ldr	r1, [pc, #132]	; (8001640 <_malloc_r+0xac>)
 80015bc:	680a      	ldr	r2, [r1, #0]
 80015be:	4614      	mov	r4, r2
 80015c0:	b99c      	cbnz	r4, 80015ea <_malloc_r+0x56>
 80015c2:	4f20      	ldr	r7, [pc, #128]	; (8001644 <_malloc_r+0xb0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b923      	cbnz	r3, 80015d2 <_malloc_r+0x3e>
 80015c8:	4621      	mov	r1, r4
 80015ca:	4630      	mov	r0, r6
 80015cc:	f000 fb2a 	bl	8001c24 <_sbrk_r>
 80015d0:	6038      	str	r0, [r7, #0]
 80015d2:	4629      	mov	r1, r5
 80015d4:	4630      	mov	r0, r6
 80015d6:	f000 fb25 	bl	8001c24 <_sbrk_r>
 80015da:	1c43      	adds	r3, r0, #1
 80015dc:	d123      	bne.n	8001626 <_malloc_r+0x92>
 80015de:	230c      	movs	r3, #12
 80015e0:	4630      	mov	r0, r6
 80015e2:	6033      	str	r3, [r6, #0]
 80015e4:	f000 fe28 	bl	8002238 <__malloc_unlock>
 80015e8:	e7e3      	b.n	80015b2 <_malloc_r+0x1e>
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	1b5b      	subs	r3, r3, r5
 80015ee:	d417      	bmi.n	8001620 <_malloc_r+0x8c>
 80015f0:	2b0b      	cmp	r3, #11
 80015f2:	d903      	bls.n	80015fc <_malloc_r+0x68>
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	441c      	add	r4, r3
 80015f8:	6025      	str	r5, [r4, #0]
 80015fa:	e004      	b.n	8001606 <_malloc_r+0x72>
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	42a2      	cmp	r2, r4
 8001600:	bf0c      	ite	eq
 8001602:	600b      	streq	r3, [r1, #0]
 8001604:	6053      	strne	r3, [r2, #4]
 8001606:	4630      	mov	r0, r6
 8001608:	f000 fe16 	bl	8002238 <__malloc_unlock>
 800160c:	f104 000b 	add.w	r0, r4, #11
 8001610:	1d23      	adds	r3, r4, #4
 8001612:	f020 0007 	bic.w	r0, r0, #7
 8001616:	1ac2      	subs	r2, r0, r3
 8001618:	d0cc      	beq.n	80015b4 <_malloc_r+0x20>
 800161a:	1a1b      	subs	r3, r3, r0
 800161c:	50a3      	str	r3, [r4, r2]
 800161e:	e7c9      	b.n	80015b4 <_malloc_r+0x20>
 8001620:	4622      	mov	r2, r4
 8001622:	6864      	ldr	r4, [r4, #4]
 8001624:	e7cc      	b.n	80015c0 <_malloc_r+0x2c>
 8001626:	1cc4      	adds	r4, r0, #3
 8001628:	f024 0403 	bic.w	r4, r4, #3
 800162c:	42a0      	cmp	r0, r4
 800162e:	d0e3      	beq.n	80015f8 <_malloc_r+0x64>
 8001630:	1a21      	subs	r1, r4, r0
 8001632:	4630      	mov	r0, r6
 8001634:	f000 faf6 	bl	8001c24 <_sbrk_r>
 8001638:	3001      	adds	r0, #1
 800163a:	d1dd      	bne.n	80015f8 <_malloc_r+0x64>
 800163c:	e7cf      	b.n	80015de <_malloc_r+0x4a>
 800163e:	bf00      	nop
 8001640:	20000094 	.word	0x20000094
 8001644:	20000098 	.word	0x20000098

08001648 <__sfputc_r>:
 8001648:	6893      	ldr	r3, [r2, #8]
 800164a:	b410      	push	{r4}
 800164c:	3b01      	subs	r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	6093      	str	r3, [r2, #8]
 8001652:	da07      	bge.n	8001664 <__sfputc_r+0x1c>
 8001654:	6994      	ldr	r4, [r2, #24]
 8001656:	42a3      	cmp	r3, r4
 8001658:	db01      	blt.n	800165e <__sfputc_r+0x16>
 800165a:	290a      	cmp	r1, #10
 800165c:	d102      	bne.n	8001664 <__sfputc_r+0x1c>
 800165e:	bc10      	pop	{r4}
 8001660:	f000 baf0 	b.w	8001c44 <__swbuf_r>
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	1c58      	adds	r0, r3, #1
 8001668:	6010      	str	r0, [r2, #0]
 800166a:	7019      	strb	r1, [r3, #0]
 800166c:	4608      	mov	r0, r1
 800166e:	bc10      	pop	{r4}
 8001670:	4770      	bx	lr

08001672 <__sfputs_r>:
 8001672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001674:	4606      	mov	r6, r0
 8001676:	460f      	mov	r7, r1
 8001678:	4614      	mov	r4, r2
 800167a:	18d5      	adds	r5, r2, r3
 800167c:	42ac      	cmp	r4, r5
 800167e:	d101      	bne.n	8001684 <__sfputs_r+0x12>
 8001680:	2000      	movs	r0, #0
 8001682:	e007      	b.n	8001694 <__sfputs_r+0x22>
 8001684:	463a      	mov	r2, r7
 8001686:	4630      	mov	r0, r6
 8001688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800168c:	f7ff ffdc 	bl	8001648 <__sfputc_r>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d1f3      	bne.n	800167c <__sfputs_r+0xa>
 8001694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001698 <_vfiprintf_r>:
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	460d      	mov	r5, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	4698      	mov	r8, r3
 80016a2:	4606      	mov	r6, r0
 80016a4:	b09d      	sub	sp, #116	; 0x74
 80016a6:	b118      	cbz	r0, 80016b0 <_vfiprintf_r+0x18>
 80016a8:	6983      	ldr	r3, [r0, #24]
 80016aa:	b90b      	cbnz	r3, 80016b0 <_vfiprintf_r+0x18>
 80016ac:	f000 fcac 	bl	8002008 <__sinit>
 80016b0:	4b89      	ldr	r3, [pc, #548]	; (80018d8 <_vfiprintf_r+0x240>)
 80016b2:	429d      	cmp	r5, r3
 80016b4:	d11b      	bne.n	80016ee <_vfiprintf_r+0x56>
 80016b6:	6875      	ldr	r5, [r6, #4]
 80016b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016ba:	07d9      	lsls	r1, r3, #31
 80016bc:	d405      	bmi.n	80016ca <_vfiprintf_r+0x32>
 80016be:	89ab      	ldrh	r3, [r5, #12]
 80016c0:	059a      	lsls	r2, r3, #22
 80016c2:	d402      	bmi.n	80016ca <_vfiprintf_r+0x32>
 80016c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016c6:	f000 fd3d 	bl	8002144 <__retarget_lock_acquire_recursive>
 80016ca:	89ab      	ldrh	r3, [r5, #12]
 80016cc:	071b      	lsls	r3, r3, #28
 80016ce:	d501      	bpl.n	80016d4 <_vfiprintf_r+0x3c>
 80016d0:	692b      	ldr	r3, [r5, #16]
 80016d2:	b9eb      	cbnz	r3, 8001710 <_vfiprintf_r+0x78>
 80016d4:	4629      	mov	r1, r5
 80016d6:	4630      	mov	r0, r6
 80016d8:	f000 fb06 	bl	8001ce8 <__swsetup_r>
 80016dc:	b1c0      	cbz	r0, 8001710 <_vfiprintf_r+0x78>
 80016de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016e0:	07dc      	lsls	r4, r3, #31
 80016e2:	d50e      	bpl.n	8001702 <_vfiprintf_r+0x6a>
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	b01d      	add	sp, #116	; 0x74
 80016ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <_vfiprintf_r+0x244>)
 80016f0:	429d      	cmp	r5, r3
 80016f2:	d101      	bne.n	80016f8 <_vfiprintf_r+0x60>
 80016f4:	68b5      	ldr	r5, [r6, #8]
 80016f6:	e7df      	b.n	80016b8 <_vfiprintf_r+0x20>
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <_vfiprintf_r+0x248>)
 80016fa:	429d      	cmp	r5, r3
 80016fc:	bf08      	it	eq
 80016fe:	68f5      	ldreq	r5, [r6, #12]
 8001700:	e7da      	b.n	80016b8 <_vfiprintf_r+0x20>
 8001702:	89ab      	ldrh	r3, [r5, #12]
 8001704:	0598      	lsls	r0, r3, #22
 8001706:	d4ed      	bmi.n	80016e4 <_vfiprintf_r+0x4c>
 8001708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800170a:	f000 fd1c 	bl	8002146 <__retarget_lock_release_recursive>
 800170e:	e7e9      	b.n	80016e4 <_vfiprintf_r+0x4c>
 8001710:	2300      	movs	r3, #0
 8001712:	9309      	str	r3, [sp, #36]	; 0x24
 8001714:	2320      	movs	r3, #32
 8001716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800171a:	2330      	movs	r3, #48	; 0x30
 800171c:	f04f 0901 	mov.w	r9, #1
 8001720:	f8cd 800c 	str.w	r8, [sp, #12]
 8001724:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80018e4 <_vfiprintf_r+0x24c>
 8001728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800172c:	4623      	mov	r3, r4
 800172e:	469a      	mov	sl, r3
 8001730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001734:	b10a      	cbz	r2, 800173a <_vfiprintf_r+0xa2>
 8001736:	2a25      	cmp	r2, #37	; 0x25
 8001738:	d1f9      	bne.n	800172e <_vfiprintf_r+0x96>
 800173a:	ebba 0b04 	subs.w	fp, sl, r4
 800173e:	d00b      	beq.n	8001758 <_vfiprintf_r+0xc0>
 8001740:	465b      	mov	r3, fp
 8001742:	4622      	mov	r2, r4
 8001744:	4629      	mov	r1, r5
 8001746:	4630      	mov	r0, r6
 8001748:	f7ff ff93 	bl	8001672 <__sfputs_r>
 800174c:	3001      	adds	r0, #1
 800174e:	f000 80aa 	beq.w	80018a6 <_vfiprintf_r+0x20e>
 8001752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001754:	445a      	add	r2, fp
 8001756:	9209      	str	r2, [sp, #36]	; 0x24
 8001758:	f89a 3000 	ldrb.w	r3, [sl]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a2 	beq.w	80018a6 <_vfiprintf_r+0x20e>
 8001762:	2300      	movs	r3, #0
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800176c:	f10a 0a01 	add.w	sl, sl, #1
 8001770:	9304      	str	r3, [sp, #16]
 8001772:	9307      	str	r3, [sp, #28]
 8001774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001778:	931a      	str	r3, [sp, #104]	; 0x68
 800177a:	4654      	mov	r4, sl
 800177c:	2205      	movs	r2, #5
 800177e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001782:	4858      	ldr	r0, [pc, #352]	; (80018e4 <_vfiprintf_r+0x24c>)
 8001784:	f000 fd44 	bl	8002210 <memchr>
 8001788:	9a04      	ldr	r2, [sp, #16]
 800178a:	b9d8      	cbnz	r0, 80017c4 <_vfiprintf_r+0x12c>
 800178c:	06d1      	lsls	r1, r2, #27
 800178e:	bf44      	itt	mi
 8001790:	2320      	movmi	r3, #32
 8001792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001796:	0713      	lsls	r3, r2, #28
 8001798:	bf44      	itt	mi
 800179a:	232b      	movmi	r3, #43	; 0x2b
 800179c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017a0:	f89a 3000 	ldrb.w	r3, [sl]
 80017a4:	2b2a      	cmp	r3, #42	; 0x2a
 80017a6:	d015      	beq.n	80017d4 <_vfiprintf_r+0x13c>
 80017a8:	4654      	mov	r4, sl
 80017aa:	2000      	movs	r0, #0
 80017ac:	f04f 0c0a 	mov.w	ip, #10
 80017b0:	9a07      	ldr	r2, [sp, #28]
 80017b2:	4621      	mov	r1, r4
 80017b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017b8:	3b30      	subs	r3, #48	; 0x30
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d94e      	bls.n	800185c <_vfiprintf_r+0x1c4>
 80017be:	b1b0      	cbz	r0, 80017ee <_vfiprintf_r+0x156>
 80017c0:	9207      	str	r2, [sp, #28]
 80017c2:	e014      	b.n	80017ee <_vfiprintf_r+0x156>
 80017c4:	eba0 0308 	sub.w	r3, r0, r8
 80017c8:	fa09 f303 	lsl.w	r3, r9, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	46a2      	mov	sl, r4
 80017d0:	9304      	str	r3, [sp, #16]
 80017d2:	e7d2      	b.n	800177a <_vfiprintf_r+0xe2>
 80017d4:	9b03      	ldr	r3, [sp, #12]
 80017d6:	1d19      	adds	r1, r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	9103      	str	r1, [sp, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bfbb      	ittet	lt
 80017e0:	425b      	neglt	r3, r3
 80017e2:	f042 0202 	orrlt.w	r2, r2, #2
 80017e6:	9307      	strge	r3, [sp, #28]
 80017e8:	9307      	strlt	r3, [sp, #28]
 80017ea:	bfb8      	it	lt
 80017ec:	9204      	strlt	r2, [sp, #16]
 80017ee:	7823      	ldrb	r3, [r4, #0]
 80017f0:	2b2e      	cmp	r3, #46	; 0x2e
 80017f2:	d10c      	bne.n	800180e <_vfiprintf_r+0x176>
 80017f4:	7863      	ldrb	r3, [r4, #1]
 80017f6:	2b2a      	cmp	r3, #42	; 0x2a
 80017f8:	d135      	bne.n	8001866 <_vfiprintf_r+0x1ce>
 80017fa:	9b03      	ldr	r3, [sp, #12]
 80017fc:	3402      	adds	r4, #2
 80017fe:	1d1a      	adds	r2, r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	9203      	str	r2, [sp, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb8      	it	lt
 8001808:	f04f 33ff 	movlt.w	r3, #4294967295
 800180c:	9305      	str	r3, [sp, #20]
 800180e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80018f4 <_vfiprintf_r+0x25c>
 8001812:	2203      	movs	r2, #3
 8001814:	4650      	mov	r0, sl
 8001816:	7821      	ldrb	r1, [r4, #0]
 8001818:	f000 fcfa 	bl	8002210 <memchr>
 800181c:	b140      	cbz	r0, 8001830 <_vfiprintf_r+0x198>
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	eba0 000a 	sub.w	r0, r0, sl
 8001824:	fa03 f000 	lsl.w	r0, r3, r0
 8001828:	9b04      	ldr	r3, [sp, #16]
 800182a:	3401      	adds	r4, #1
 800182c:	4303      	orrs	r3, r0
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001834:	2206      	movs	r2, #6
 8001836:	482c      	ldr	r0, [pc, #176]	; (80018e8 <_vfiprintf_r+0x250>)
 8001838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800183c:	f000 fce8 	bl	8002210 <memchr>
 8001840:	2800      	cmp	r0, #0
 8001842:	d03f      	beq.n	80018c4 <_vfiprintf_r+0x22c>
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <_vfiprintf_r+0x254>)
 8001846:	bb1b      	cbnz	r3, 8001890 <_vfiprintf_r+0x1f8>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	3307      	adds	r3, #7
 800184c:	f023 0307 	bic.w	r3, r3, #7
 8001850:	3308      	adds	r3, #8
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001856:	443b      	add	r3, r7
 8001858:	9309      	str	r3, [sp, #36]	; 0x24
 800185a:	e767      	b.n	800172c <_vfiprintf_r+0x94>
 800185c:	460c      	mov	r4, r1
 800185e:	2001      	movs	r0, #1
 8001860:	fb0c 3202 	mla	r2, ip, r2, r3
 8001864:	e7a5      	b.n	80017b2 <_vfiprintf_r+0x11a>
 8001866:	2300      	movs	r3, #0
 8001868:	f04f 0c0a 	mov.w	ip, #10
 800186c:	4619      	mov	r1, r3
 800186e:	3401      	adds	r4, #1
 8001870:	9305      	str	r3, [sp, #20]
 8001872:	4620      	mov	r0, r4
 8001874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001878:	3a30      	subs	r2, #48	; 0x30
 800187a:	2a09      	cmp	r2, #9
 800187c:	d903      	bls.n	8001886 <_vfiprintf_r+0x1ee>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0c5      	beq.n	800180e <_vfiprintf_r+0x176>
 8001882:	9105      	str	r1, [sp, #20]
 8001884:	e7c3      	b.n	800180e <_vfiprintf_r+0x176>
 8001886:	4604      	mov	r4, r0
 8001888:	2301      	movs	r3, #1
 800188a:	fb0c 2101 	mla	r1, ip, r1, r2
 800188e:	e7f0      	b.n	8001872 <_vfiprintf_r+0x1da>
 8001890:	ab03      	add	r3, sp, #12
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	462a      	mov	r2, r5
 8001896:	4630      	mov	r0, r6
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_vfiprintf_r+0x258>)
 800189a:	a904      	add	r1, sp, #16
 800189c:	f3af 8000 	nop.w
 80018a0:	4607      	mov	r7, r0
 80018a2:	1c78      	adds	r0, r7, #1
 80018a4:	d1d6      	bne.n	8001854 <_vfiprintf_r+0x1bc>
 80018a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018a8:	07d9      	lsls	r1, r3, #31
 80018aa:	d405      	bmi.n	80018b8 <_vfiprintf_r+0x220>
 80018ac:	89ab      	ldrh	r3, [r5, #12]
 80018ae:	059a      	lsls	r2, r3, #22
 80018b0:	d402      	bmi.n	80018b8 <_vfiprintf_r+0x220>
 80018b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018b4:	f000 fc47 	bl	8002146 <__retarget_lock_release_recursive>
 80018b8:	89ab      	ldrh	r3, [r5, #12]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	f53f af12 	bmi.w	80016e4 <_vfiprintf_r+0x4c>
 80018c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018c2:	e711      	b.n	80016e8 <_vfiprintf_r+0x50>
 80018c4:	ab03      	add	r3, sp, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	462a      	mov	r2, r5
 80018ca:	4630      	mov	r0, r6
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_vfiprintf_r+0x258>)
 80018ce:	a904      	add	r1, sp, #16
 80018d0:	f000 f882 	bl	80019d8 <_printf_i>
 80018d4:	e7e4      	b.n	80018a0 <_vfiprintf_r+0x208>
 80018d6:	bf00      	nop
 80018d8:	0800256c 	.word	0x0800256c
 80018dc:	0800258c 	.word	0x0800258c
 80018e0:	0800254c 	.word	0x0800254c
 80018e4:	08002516 	.word	0x08002516
 80018e8:	08002520 	.word	0x08002520
 80018ec:	00000000 	.word	0x00000000
 80018f0:	08001673 	.word	0x08001673
 80018f4:	0800251c 	.word	0x0800251c

080018f8 <_printf_common>:
 80018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018fc:	4616      	mov	r6, r2
 80018fe:	4699      	mov	r9, r3
 8001900:	688a      	ldr	r2, [r1, #8]
 8001902:	690b      	ldr	r3, [r1, #16]
 8001904:	4607      	mov	r7, r0
 8001906:	4293      	cmp	r3, r2
 8001908:	bfb8      	it	lt
 800190a:	4613      	movlt	r3, r2
 800190c:	6033      	str	r3, [r6, #0]
 800190e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001912:	460c      	mov	r4, r1
 8001914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001918:	b10a      	cbz	r2, 800191e <_printf_common+0x26>
 800191a:	3301      	adds	r3, #1
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	0699      	lsls	r1, r3, #26
 8001922:	bf42      	ittt	mi
 8001924:	6833      	ldrmi	r3, [r6, #0]
 8001926:	3302      	addmi	r3, #2
 8001928:	6033      	strmi	r3, [r6, #0]
 800192a:	6825      	ldr	r5, [r4, #0]
 800192c:	f015 0506 	ands.w	r5, r5, #6
 8001930:	d106      	bne.n	8001940 <_printf_common+0x48>
 8001932:	f104 0a19 	add.w	sl, r4, #25
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	6832      	ldr	r2, [r6, #0]
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	42ab      	cmp	r3, r5
 800193e:	dc28      	bgt.n	8001992 <_printf_common+0x9a>
 8001940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001944:	1e13      	subs	r3, r2, #0
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	bf18      	it	ne
 800194a:	2301      	movne	r3, #1
 800194c:	0692      	lsls	r2, r2, #26
 800194e:	d42d      	bmi.n	80019ac <_printf_common+0xb4>
 8001950:	4649      	mov	r1, r9
 8001952:	4638      	mov	r0, r7
 8001954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001958:	47c0      	blx	r8
 800195a:	3001      	adds	r0, #1
 800195c:	d020      	beq.n	80019a0 <_printf_common+0xa8>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	68e5      	ldr	r5, [r4, #12]
 8001962:	f003 0306 	and.w	r3, r3, #6
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf18      	it	ne
 800196a:	2500      	movne	r5, #0
 800196c:	6832      	ldr	r2, [r6, #0]
 800196e:	f04f 0600 	mov.w	r6, #0
 8001972:	68a3      	ldr	r3, [r4, #8]
 8001974:	bf08      	it	eq
 8001976:	1aad      	subeq	r5, r5, r2
 8001978:	6922      	ldr	r2, [r4, #16]
 800197a:	bf08      	it	eq
 800197c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001980:	4293      	cmp	r3, r2
 8001982:	bfc4      	itt	gt
 8001984:	1a9b      	subgt	r3, r3, r2
 8001986:	18ed      	addgt	r5, r5, r3
 8001988:	341a      	adds	r4, #26
 800198a:	42b5      	cmp	r5, r6
 800198c:	d11a      	bne.n	80019c4 <_printf_common+0xcc>
 800198e:	2000      	movs	r0, #0
 8001990:	e008      	b.n	80019a4 <_printf_common+0xac>
 8001992:	2301      	movs	r3, #1
 8001994:	4652      	mov	r2, sl
 8001996:	4649      	mov	r1, r9
 8001998:	4638      	mov	r0, r7
 800199a:	47c0      	blx	r8
 800199c:	3001      	adds	r0, #1
 800199e:	d103      	bne.n	80019a8 <_printf_common+0xb0>
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a8:	3501      	adds	r5, #1
 80019aa:	e7c4      	b.n	8001936 <_printf_common+0x3e>
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	18e1      	adds	r1, r4, r3
 80019b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019ba:	4422      	add	r2, r4
 80019bc:	3302      	adds	r3, #2
 80019be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019c2:	e7c5      	b.n	8001950 <_printf_common+0x58>
 80019c4:	2301      	movs	r3, #1
 80019c6:	4622      	mov	r2, r4
 80019c8:	4649      	mov	r1, r9
 80019ca:	4638      	mov	r0, r7
 80019cc:	47c0      	blx	r8
 80019ce:	3001      	adds	r0, #1
 80019d0:	d0e6      	beq.n	80019a0 <_printf_common+0xa8>
 80019d2:	3601      	adds	r6, #1
 80019d4:	e7d9      	b.n	800198a <_printf_common+0x92>
	...

080019d8 <_printf_i>:
 80019d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019dc:	460c      	mov	r4, r1
 80019de:	7e27      	ldrb	r7, [r4, #24]
 80019e0:	4691      	mov	r9, r2
 80019e2:	2f78      	cmp	r7, #120	; 0x78
 80019e4:	4680      	mov	r8, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ee:	d807      	bhi.n	8001a00 <_printf_i+0x28>
 80019f0:	2f62      	cmp	r7, #98	; 0x62
 80019f2:	d80a      	bhi.n	8001a0a <_printf_i+0x32>
 80019f4:	2f00      	cmp	r7, #0
 80019f6:	f000 80d9 	beq.w	8001bac <_printf_i+0x1d4>
 80019fa:	2f58      	cmp	r7, #88	; 0x58
 80019fc:	f000 80a4 	beq.w	8001b48 <_printf_i+0x170>
 8001a00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a08:	e03a      	b.n	8001a80 <_printf_i+0xa8>
 8001a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a0e:	2b15      	cmp	r3, #21
 8001a10:	d8f6      	bhi.n	8001a00 <_printf_i+0x28>
 8001a12:	a001      	add	r0, pc, #4	; (adr r0, 8001a18 <_printf_i+0x40>)
 8001a14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a18:	08001a71 	.word	0x08001a71
 8001a1c:	08001a85 	.word	0x08001a85
 8001a20:	08001a01 	.word	0x08001a01
 8001a24:	08001a01 	.word	0x08001a01
 8001a28:	08001a01 	.word	0x08001a01
 8001a2c:	08001a01 	.word	0x08001a01
 8001a30:	08001a85 	.word	0x08001a85
 8001a34:	08001a01 	.word	0x08001a01
 8001a38:	08001a01 	.word	0x08001a01
 8001a3c:	08001a01 	.word	0x08001a01
 8001a40:	08001a01 	.word	0x08001a01
 8001a44:	08001b93 	.word	0x08001b93
 8001a48:	08001ab5 	.word	0x08001ab5
 8001a4c:	08001b75 	.word	0x08001b75
 8001a50:	08001a01 	.word	0x08001a01
 8001a54:	08001a01 	.word	0x08001a01
 8001a58:	08001bb5 	.word	0x08001bb5
 8001a5c:	08001a01 	.word	0x08001a01
 8001a60:	08001ab5 	.word	0x08001ab5
 8001a64:	08001a01 	.word	0x08001a01
 8001a68:	08001a01 	.word	0x08001a01
 8001a6c:	08001b7d 	.word	0x08001b7d
 8001a70:	680b      	ldr	r3, [r1, #0]
 8001a72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a76:	1d1a      	adds	r2, r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	600a      	str	r2, [r1, #0]
 8001a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0a4      	b.n	8001bce <_printf_i+0x1f6>
 8001a84:	6825      	ldr	r5, [r4, #0]
 8001a86:	6808      	ldr	r0, [r1, #0]
 8001a88:	062e      	lsls	r6, r5, #24
 8001a8a:	f100 0304 	add.w	r3, r0, #4
 8001a8e:	d50a      	bpl.n	8001aa6 <_printf_i+0xce>
 8001a90:	6805      	ldr	r5, [r0, #0]
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	da03      	bge.n	8001aa0 <_printf_i+0xc8>
 8001a98:	232d      	movs	r3, #45	; 0x2d
 8001a9a:	426d      	negs	r5, r5
 8001a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	485e      	ldr	r0, [pc, #376]	; (8001c1c <_printf_i+0x244>)
 8001aa4:	e019      	b.n	8001ada <_printf_i+0x102>
 8001aa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001aaa:	6805      	ldr	r5, [r0, #0]
 8001aac:	600b      	str	r3, [r1, #0]
 8001aae:	bf18      	it	ne
 8001ab0:	b22d      	sxthne	r5, r5
 8001ab2:	e7ef      	b.n	8001a94 <_printf_i+0xbc>
 8001ab4:	680b      	ldr	r3, [r1, #0]
 8001ab6:	6825      	ldr	r5, [r4, #0]
 8001ab8:	1d18      	adds	r0, r3, #4
 8001aba:	6008      	str	r0, [r1, #0]
 8001abc:	0628      	lsls	r0, r5, #24
 8001abe:	d501      	bpl.n	8001ac4 <_printf_i+0xec>
 8001ac0:	681d      	ldr	r5, [r3, #0]
 8001ac2:	e002      	b.n	8001aca <_printf_i+0xf2>
 8001ac4:	0669      	lsls	r1, r5, #25
 8001ac6:	d5fb      	bpl.n	8001ac0 <_printf_i+0xe8>
 8001ac8:	881d      	ldrh	r5, [r3, #0]
 8001aca:	2f6f      	cmp	r7, #111	; 0x6f
 8001acc:	bf0c      	ite	eq
 8001ace:	2308      	moveq	r3, #8
 8001ad0:	230a      	movne	r3, #10
 8001ad2:	4852      	ldr	r0, [pc, #328]	; (8001c1c <_printf_i+0x244>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ada:	6866      	ldr	r6, [r4, #4]
 8001adc:	2e00      	cmp	r6, #0
 8001ade:	bfa8      	it	ge
 8001ae0:	6821      	ldrge	r1, [r4, #0]
 8001ae2:	60a6      	str	r6, [r4, #8]
 8001ae4:	bfa4      	itt	ge
 8001ae6:	f021 0104 	bicge.w	r1, r1, #4
 8001aea:	6021      	strge	r1, [r4, #0]
 8001aec:	b90d      	cbnz	r5, 8001af2 <_printf_i+0x11a>
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	d04d      	beq.n	8001b8e <_printf_i+0x1b6>
 8001af2:	4616      	mov	r6, r2
 8001af4:	fbb5 f1f3 	udiv	r1, r5, r3
 8001af8:	fb03 5711 	mls	r7, r3, r1, r5
 8001afc:	5dc7      	ldrb	r7, [r0, r7]
 8001afe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b02:	462f      	mov	r7, r5
 8001b04:	42bb      	cmp	r3, r7
 8001b06:	460d      	mov	r5, r1
 8001b08:	d9f4      	bls.n	8001af4 <_printf_i+0x11c>
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d10b      	bne.n	8001b26 <_printf_i+0x14e>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	07df      	lsls	r7, r3, #31
 8001b12:	d508      	bpl.n	8001b26 <_printf_i+0x14e>
 8001b14:	6923      	ldr	r3, [r4, #16]
 8001b16:	6861      	ldr	r1, [r4, #4]
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	bfde      	ittt	le
 8001b1c:	2330      	movle	r3, #48	; 0x30
 8001b1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b26:	1b92      	subs	r2, r2, r6
 8001b28:	6122      	str	r2, [r4, #16]
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f8cd a000 	str.w	sl, [sp]
 8001b34:	aa03      	add	r2, sp, #12
 8001b36:	f7ff fedf 	bl	80018f8 <_printf_common>
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d14c      	bne.n	8001bd8 <_printf_i+0x200>
 8001b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b42:	b004      	add	sp, #16
 8001b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <_printf_i+0x244>)
 8001b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b4e:	680e      	ldr	r6, [r1, #0]
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b56:	061f      	lsls	r7, r3, #24
 8001b58:	600e      	str	r6, [r1, #0]
 8001b5a:	d514      	bpl.n	8001b86 <_printf_i+0x1ae>
 8001b5c:	07d9      	lsls	r1, r3, #31
 8001b5e:	bf44      	itt	mi
 8001b60:	f043 0320 	orrmi.w	r3, r3, #32
 8001b64:	6023      	strmi	r3, [r4, #0]
 8001b66:	b91d      	cbnz	r5, 8001b70 <_printf_i+0x198>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f023 0320 	bic.w	r3, r3, #32
 8001b6e:	6023      	str	r3, [r4, #0]
 8001b70:	2310      	movs	r3, #16
 8001b72:	e7af      	b.n	8001ad4 <_printf_i+0xfc>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	f043 0320 	orr.w	r3, r3, #32
 8001b7a:	6023      	str	r3, [r4, #0]
 8001b7c:	2378      	movs	r3, #120	; 0x78
 8001b7e:	4828      	ldr	r0, [pc, #160]	; (8001c20 <_printf_i+0x248>)
 8001b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b84:	e7e3      	b.n	8001b4e <_printf_i+0x176>
 8001b86:	065e      	lsls	r6, r3, #25
 8001b88:	bf48      	it	mi
 8001b8a:	b2ad      	uxthmi	r5, r5
 8001b8c:	e7e6      	b.n	8001b5c <_printf_i+0x184>
 8001b8e:	4616      	mov	r6, r2
 8001b90:	e7bb      	b.n	8001b0a <_printf_i+0x132>
 8001b92:	680b      	ldr	r3, [r1, #0]
 8001b94:	6826      	ldr	r6, [r4, #0]
 8001b96:	1d1d      	adds	r5, r3, #4
 8001b98:	6960      	ldr	r0, [r4, #20]
 8001b9a:	600d      	str	r5, [r1, #0]
 8001b9c:	0635      	lsls	r5, r6, #24
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	d501      	bpl.n	8001ba6 <_printf_i+0x1ce>
 8001ba2:	6018      	str	r0, [r3, #0]
 8001ba4:	e002      	b.n	8001bac <_printf_i+0x1d4>
 8001ba6:	0671      	lsls	r1, r6, #25
 8001ba8:	d5fb      	bpl.n	8001ba2 <_printf_i+0x1ca>
 8001baa:	8018      	strh	r0, [r3, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	4616      	mov	r6, r2
 8001bb0:	6123      	str	r3, [r4, #16]
 8001bb2:	e7ba      	b.n	8001b2a <_printf_i+0x152>
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	600a      	str	r2, [r1, #0]
 8001bba:	681e      	ldr	r6, [r3, #0]
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	6862      	ldr	r2, [r4, #4]
 8001bc2:	f000 fb25 	bl	8002210 <memchr>
 8001bc6:	b108      	cbz	r0, 8001bcc <_printf_i+0x1f4>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	6060      	str	r0, [r4, #4]
 8001bcc:	6863      	ldr	r3, [r4, #4]
 8001bce:	6123      	str	r3, [r4, #16]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bd6:	e7a8      	b.n	8001b2a <_printf_i+0x152>
 8001bd8:	4632      	mov	r2, r6
 8001bda:	4649      	mov	r1, r9
 8001bdc:	4640      	mov	r0, r8
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	47d0      	blx	sl
 8001be2:	3001      	adds	r0, #1
 8001be4:	d0ab      	beq.n	8001b3e <_printf_i+0x166>
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	079b      	lsls	r3, r3, #30
 8001bea:	d413      	bmi.n	8001c14 <_printf_i+0x23c>
 8001bec:	68e0      	ldr	r0, [r4, #12]
 8001bee:	9b03      	ldr	r3, [sp, #12]
 8001bf0:	4298      	cmp	r0, r3
 8001bf2:	bfb8      	it	lt
 8001bf4:	4618      	movlt	r0, r3
 8001bf6:	e7a4      	b.n	8001b42 <_printf_i+0x16a>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	4640      	mov	r0, r8
 8001c00:	47d0      	blx	sl
 8001c02:	3001      	adds	r0, #1
 8001c04:	d09b      	beq.n	8001b3e <_printf_i+0x166>
 8001c06:	3501      	adds	r5, #1
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	9903      	ldr	r1, [sp, #12]
 8001c0c:	1a5b      	subs	r3, r3, r1
 8001c0e:	42ab      	cmp	r3, r5
 8001c10:	dcf2      	bgt.n	8001bf8 <_printf_i+0x220>
 8001c12:	e7eb      	b.n	8001bec <_printf_i+0x214>
 8001c14:	2500      	movs	r5, #0
 8001c16:	f104 0619 	add.w	r6, r4, #25
 8001c1a:	e7f5      	b.n	8001c08 <_printf_i+0x230>
 8001c1c:	08002527 	.word	0x08002527
 8001c20:	08002538 	.word	0x08002538

08001c24 <_sbrk_r>:
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	2300      	movs	r3, #0
 8001c28:	4d05      	ldr	r5, [pc, #20]	; (8001c40 <_sbrk_r+0x1c>)
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	602b      	str	r3, [r5, #0]
 8001c30:	f7fe fc80 	bl	8000534 <_sbrk>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d102      	bne.n	8001c3e <_sbrk_r+0x1a>
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	b103      	cbz	r3, 8001c3e <_sbrk_r+0x1a>
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
 8001c40:	200000ac 	.word	0x200000ac

08001c44 <__swbuf_r>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	460e      	mov	r6, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	b118      	cbz	r0, 8001c56 <__swbuf_r+0x12>
 8001c4e:	6983      	ldr	r3, [r0, #24]
 8001c50:	b90b      	cbnz	r3, 8001c56 <__swbuf_r+0x12>
 8001c52:	f000 f9d9 	bl	8002008 <__sinit>
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <__swbuf_r+0x98>)
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	d12b      	bne.n	8001cb4 <__swbuf_r+0x70>
 8001c5c:	686c      	ldr	r4, [r5, #4]
 8001c5e:	69a3      	ldr	r3, [r4, #24]
 8001c60:	60a3      	str	r3, [r4, #8]
 8001c62:	89a3      	ldrh	r3, [r4, #12]
 8001c64:	071a      	lsls	r2, r3, #28
 8001c66:	d52f      	bpl.n	8001cc8 <__swbuf_r+0x84>
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	b36b      	cbz	r3, 8001cc8 <__swbuf_r+0x84>
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	b2f6      	uxtb	r6, r6
 8001c72:	1ac0      	subs	r0, r0, r3
 8001c74:	6963      	ldr	r3, [r4, #20]
 8001c76:	4637      	mov	r7, r6
 8001c78:	4283      	cmp	r3, r0
 8001c7a:	dc04      	bgt.n	8001c86 <__swbuf_r+0x42>
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f000 f92e 	bl	8001ee0 <_fflush_r>
 8001c84:	bb30      	cbnz	r0, 8001cd4 <__swbuf_r+0x90>
 8001c86:	68a3      	ldr	r3, [r4, #8]
 8001c88:	3001      	adds	r0, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60a3      	str	r3, [r4, #8]
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	6022      	str	r2, [r4, #0]
 8001c94:	701e      	strb	r6, [r3, #0]
 8001c96:	6963      	ldr	r3, [r4, #20]
 8001c98:	4283      	cmp	r3, r0
 8001c9a:	d004      	beq.n	8001ca6 <__swbuf_r+0x62>
 8001c9c:	89a3      	ldrh	r3, [r4, #12]
 8001c9e:	07db      	lsls	r3, r3, #31
 8001ca0:	d506      	bpl.n	8001cb0 <__swbuf_r+0x6c>
 8001ca2:	2e0a      	cmp	r6, #10
 8001ca4:	d104      	bne.n	8001cb0 <__swbuf_r+0x6c>
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f000 f919 	bl	8001ee0 <_fflush_r>
 8001cae:	b988      	cbnz	r0, 8001cd4 <__swbuf_r+0x90>
 8001cb0:	4638      	mov	r0, r7
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <__swbuf_r+0x9c>)
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	d101      	bne.n	8001cbe <__swbuf_r+0x7a>
 8001cba:	68ac      	ldr	r4, [r5, #8]
 8001cbc:	e7cf      	b.n	8001c5e <__swbuf_r+0x1a>
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <__swbuf_r+0xa0>)
 8001cc0:	429c      	cmp	r4, r3
 8001cc2:	bf08      	it	eq
 8001cc4:	68ec      	ldreq	r4, [r5, #12]
 8001cc6:	e7ca      	b.n	8001c5e <__swbuf_r+0x1a>
 8001cc8:	4621      	mov	r1, r4
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f000 f80c 	bl	8001ce8 <__swsetup_r>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d0cb      	beq.n	8001c6c <__swbuf_r+0x28>
 8001cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8001cd8:	e7ea      	b.n	8001cb0 <__swbuf_r+0x6c>
 8001cda:	bf00      	nop
 8001cdc:	0800256c 	.word	0x0800256c
 8001ce0:	0800258c 	.word	0x0800258c
 8001ce4:	0800254c 	.word	0x0800254c

08001ce8 <__swsetup_r>:
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <__swsetup_r+0xcc>)
 8001cea:	b570      	push	{r4, r5, r6, lr}
 8001cec:	681d      	ldr	r5, [r3, #0]
 8001cee:	4606      	mov	r6, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	b125      	cbz	r5, 8001cfe <__swsetup_r+0x16>
 8001cf4:	69ab      	ldr	r3, [r5, #24]
 8001cf6:	b913      	cbnz	r3, 8001cfe <__swsetup_r+0x16>
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f000 f985 	bl	8002008 <__sinit>
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <__swsetup_r+0xd0>)
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d10f      	bne.n	8001d24 <__swsetup_r+0x3c>
 8001d04:	686c      	ldr	r4, [r5, #4]
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d0c:	0719      	lsls	r1, r3, #28
 8001d0e:	d42c      	bmi.n	8001d6a <__swsetup_r+0x82>
 8001d10:	06dd      	lsls	r5, r3, #27
 8001d12:	d411      	bmi.n	8001d38 <__swsetup_r+0x50>
 8001d14:	2309      	movs	r3, #9
 8001d16:	6033      	str	r3, [r6, #0]
 8001d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	81a3      	strh	r3, [r4, #12]
 8001d22:	e03e      	b.n	8001da2 <__swsetup_r+0xba>
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <__swsetup_r+0xd4>)
 8001d26:	429c      	cmp	r4, r3
 8001d28:	d101      	bne.n	8001d2e <__swsetup_r+0x46>
 8001d2a:	68ac      	ldr	r4, [r5, #8]
 8001d2c:	e7eb      	b.n	8001d06 <__swsetup_r+0x1e>
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <__swsetup_r+0xd8>)
 8001d30:	429c      	cmp	r4, r3
 8001d32:	bf08      	it	eq
 8001d34:	68ec      	ldreq	r4, [r5, #12]
 8001d36:	e7e6      	b.n	8001d06 <__swsetup_r+0x1e>
 8001d38:	0758      	lsls	r0, r3, #29
 8001d3a:	d512      	bpl.n	8001d62 <__swsetup_r+0x7a>
 8001d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d3e:	b141      	cbz	r1, 8001d52 <__swsetup_r+0x6a>
 8001d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d44:	4299      	cmp	r1, r3
 8001d46:	d002      	beq.n	8001d4e <__swsetup_r+0x66>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f7ff fbd7 	bl	80014fc <_free_r>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6363      	str	r3, [r4, #52]	; 0x34
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d58:	81a3      	strh	r3, [r4, #12]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6063      	str	r3, [r4, #4]
 8001d5e:	6923      	ldr	r3, [r4, #16]
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	89a3      	ldrh	r3, [r4, #12]
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	81a3      	strh	r3, [r4, #12]
 8001d6a:	6923      	ldr	r3, [r4, #16]
 8001d6c:	b94b      	cbnz	r3, 8001d82 <__swsetup_r+0x9a>
 8001d6e:	89a3      	ldrh	r3, [r4, #12]
 8001d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d78:	d003      	beq.n	8001d82 <__swsetup_r+0x9a>
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f000 fa07 	bl	8002190 <__smakebuf_r>
 8001d82:	89a0      	ldrh	r0, [r4, #12]
 8001d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d88:	f010 0301 	ands.w	r3, r0, #1
 8001d8c:	d00a      	beq.n	8001da4 <__swsetup_r+0xbc>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60a3      	str	r3, [r4, #8]
 8001d92:	6963      	ldr	r3, [r4, #20]
 8001d94:	425b      	negs	r3, r3
 8001d96:	61a3      	str	r3, [r4, #24]
 8001d98:	6923      	ldr	r3, [r4, #16]
 8001d9a:	b943      	cbnz	r3, 8001dae <__swsetup_r+0xc6>
 8001d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001da0:	d1ba      	bne.n	8001d18 <__swsetup_r+0x30>
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	0781      	lsls	r1, r0, #30
 8001da6:	bf58      	it	pl
 8001da8:	6963      	ldrpl	r3, [r4, #20]
 8001daa:	60a3      	str	r3, [r4, #8]
 8001dac:	e7f4      	b.n	8001d98 <__swsetup_r+0xb0>
 8001dae:	2000      	movs	r0, #0
 8001db0:	e7f7      	b.n	8001da2 <__swsetup_r+0xba>
 8001db2:	bf00      	nop
 8001db4:	2000000c 	.word	0x2000000c
 8001db8:	0800256c 	.word	0x0800256c
 8001dbc:	0800258c 	.word	0x0800258c
 8001dc0:	0800254c 	.word	0x0800254c

08001dc4 <abort>:
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	b508      	push	{r3, lr}
 8001dc8:	f000 fa64 	bl	8002294 <raise>
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7fe fb3d 	bl	800044c <_exit>
	...

08001dd4 <__sflush_r>:
 8001dd4:	898a      	ldrh	r2, [r1, #12]
 8001dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dda:	4605      	mov	r5, r0
 8001ddc:	0710      	lsls	r0, r2, #28
 8001dde:	460c      	mov	r4, r1
 8001de0:	d458      	bmi.n	8001e94 <__sflush_r+0xc0>
 8001de2:	684b      	ldr	r3, [r1, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dc05      	bgt.n	8001df4 <__sflush_r+0x20>
 8001de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc02      	bgt.n	8001df4 <__sflush_r+0x20>
 8001dee:	2000      	movs	r0, #0
 8001df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	d0f9      	beq.n	8001dee <__sflush_r+0x1a>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e00:	682f      	ldr	r7, [r5, #0]
 8001e02:	602b      	str	r3, [r5, #0]
 8001e04:	d032      	beq.n	8001e6c <__sflush_r+0x98>
 8001e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	075a      	lsls	r2, r3, #29
 8001e0c:	d505      	bpl.n	8001e1a <__sflush_r+0x46>
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	1ac0      	subs	r0, r0, r3
 8001e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e14:	b10b      	cbz	r3, 8001e1a <__sflush_r+0x46>
 8001e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e18:	1ac0      	subs	r0, r0, r3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e20:	4628      	mov	r0, r5
 8001e22:	6a21      	ldr	r1, [r4, #32]
 8001e24:	47b0      	blx	r6
 8001e26:	1c43      	adds	r3, r0, #1
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	d106      	bne.n	8001e3a <__sflush_r+0x66>
 8001e2c:	6829      	ldr	r1, [r5, #0]
 8001e2e:	291d      	cmp	r1, #29
 8001e30:	d82c      	bhi.n	8001e8c <__sflush_r+0xb8>
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <__sflush_r+0x108>)
 8001e34:	40ca      	lsrs	r2, r1
 8001e36:	07d6      	lsls	r6, r2, #31
 8001e38:	d528      	bpl.n	8001e8c <__sflush_r+0xb8>
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6062      	str	r2, [r4, #4]
 8001e3e:	6922      	ldr	r2, [r4, #16]
 8001e40:	04d9      	lsls	r1, r3, #19
 8001e42:	6022      	str	r2, [r4, #0]
 8001e44:	d504      	bpl.n	8001e50 <__sflush_r+0x7c>
 8001e46:	1c42      	adds	r2, r0, #1
 8001e48:	d101      	bne.n	8001e4e <__sflush_r+0x7a>
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	b903      	cbnz	r3, 8001e50 <__sflush_r+0x7c>
 8001e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8001e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e52:	602f      	str	r7, [r5, #0]
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d0ca      	beq.n	8001dee <__sflush_r+0x1a>
 8001e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e5c:	4299      	cmp	r1, r3
 8001e5e:	d002      	beq.n	8001e66 <__sflush_r+0x92>
 8001e60:	4628      	mov	r0, r5
 8001e62:	f7ff fb4b 	bl	80014fc <_free_r>
 8001e66:	2000      	movs	r0, #0
 8001e68:	6360      	str	r0, [r4, #52]	; 0x34
 8001e6a:	e7c1      	b.n	8001df0 <__sflush_r+0x1c>
 8001e6c:	6a21      	ldr	r1, [r4, #32]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4628      	mov	r0, r5
 8001e72:	47b0      	blx	r6
 8001e74:	1c41      	adds	r1, r0, #1
 8001e76:	d1c7      	bne.n	8001e08 <__sflush_r+0x34>
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0c4      	beq.n	8001e08 <__sflush_r+0x34>
 8001e7e:	2b1d      	cmp	r3, #29
 8001e80:	d001      	beq.n	8001e86 <__sflush_r+0xb2>
 8001e82:	2b16      	cmp	r3, #22
 8001e84:	d101      	bne.n	8001e8a <__sflush_r+0xb6>
 8001e86:	602f      	str	r7, [r5, #0]
 8001e88:	e7b1      	b.n	8001dee <__sflush_r+0x1a>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e90:	81a3      	strh	r3, [r4, #12]
 8001e92:	e7ad      	b.n	8001df0 <__sflush_r+0x1c>
 8001e94:	690f      	ldr	r7, [r1, #16]
 8001e96:	2f00      	cmp	r7, #0
 8001e98:	d0a9      	beq.n	8001dee <__sflush_r+0x1a>
 8001e9a:	0793      	lsls	r3, r2, #30
 8001e9c:	bf18      	it	ne
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	680e      	ldr	r6, [r1, #0]
 8001ea2:	bf08      	it	eq
 8001ea4:	694b      	ldreq	r3, [r1, #20]
 8001ea6:	eba6 0807 	sub.w	r8, r6, r7
 8001eaa:	600f      	str	r7, [r1, #0]
 8001eac:	608b      	str	r3, [r1, #8]
 8001eae:	f1b8 0f00 	cmp.w	r8, #0
 8001eb2:	dd9c      	ble.n	8001dee <__sflush_r+0x1a>
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	463a      	mov	r2, r7
 8001eb8:	4628      	mov	r0, r5
 8001eba:	6a21      	ldr	r1, [r4, #32]
 8001ebc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ebe:	47b0      	blx	r6
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	dc06      	bgt.n	8001ed2 <__sflush_r+0xfe>
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ece:	81a3      	strh	r3, [r4, #12]
 8001ed0:	e78e      	b.n	8001df0 <__sflush_r+0x1c>
 8001ed2:	4407      	add	r7, r0
 8001ed4:	eba8 0800 	sub.w	r8, r8, r0
 8001ed8:	e7e9      	b.n	8001eae <__sflush_r+0xda>
 8001eda:	bf00      	nop
 8001edc:	20400001 	.word	0x20400001

08001ee0 <_fflush_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	690b      	ldr	r3, [r1, #16]
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	b913      	cbnz	r3, 8001ef0 <_fflush_r+0x10>
 8001eea:	2500      	movs	r5, #0
 8001eec:	4628      	mov	r0, r5
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
 8001ef0:	b118      	cbz	r0, 8001efa <_fflush_r+0x1a>
 8001ef2:	6983      	ldr	r3, [r0, #24]
 8001ef4:	b90b      	cbnz	r3, 8001efa <_fflush_r+0x1a>
 8001ef6:	f000 f887 	bl	8002008 <__sinit>
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <_fflush_r+0x6c>)
 8001efc:	429c      	cmp	r4, r3
 8001efe:	d11b      	bne.n	8001f38 <_fflush_r+0x58>
 8001f00:	686c      	ldr	r4, [r5, #4]
 8001f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0ef      	beq.n	8001eea <_fflush_r+0xa>
 8001f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f0c:	07d0      	lsls	r0, r2, #31
 8001f0e:	d404      	bmi.n	8001f1a <_fflush_r+0x3a>
 8001f10:	0599      	lsls	r1, r3, #22
 8001f12:	d402      	bmi.n	8001f1a <_fflush_r+0x3a>
 8001f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f16:	f000 f915 	bl	8002144 <__retarget_lock_acquire_recursive>
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	f7ff ff59 	bl	8001dd4 <__sflush_r>
 8001f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f24:	4605      	mov	r5, r0
 8001f26:	07da      	lsls	r2, r3, #31
 8001f28:	d4e0      	bmi.n	8001eec <_fflush_r+0xc>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	059b      	lsls	r3, r3, #22
 8001f2e:	d4dd      	bmi.n	8001eec <_fflush_r+0xc>
 8001f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f32:	f000 f908 	bl	8002146 <__retarget_lock_release_recursive>
 8001f36:	e7d9      	b.n	8001eec <_fflush_r+0xc>
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <_fflush_r+0x70>)
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	d101      	bne.n	8001f42 <_fflush_r+0x62>
 8001f3e:	68ac      	ldr	r4, [r5, #8]
 8001f40:	e7df      	b.n	8001f02 <_fflush_r+0x22>
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <_fflush_r+0x74>)
 8001f44:	429c      	cmp	r4, r3
 8001f46:	bf08      	it	eq
 8001f48:	68ec      	ldreq	r4, [r5, #12]
 8001f4a:	e7da      	b.n	8001f02 <_fflush_r+0x22>
 8001f4c:	0800256c 	.word	0x0800256c
 8001f50:	0800258c 	.word	0x0800258c
 8001f54:	0800254c 	.word	0x0800254c

08001f58 <std>:
 8001f58:	2300      	movs	r3, #0
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f66:	6083      	str	r3, [r0, #8]
 8001f68:	8181      	strh	r1, [r0, #12]
 8001f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8001f6c:	81c2      	strh	r2, [r0, #14]
 8001f6e:	6183      	str	r3, [r0, #24]
 8001f70:	4619      	mov	r1, r3
 8001f72:	2208      	movs	r2, #8
 8001f74:	305c      	adds	r0, #92	; 0x5c
 8001f76:	f7ff fa41 	bl	80013fc <memset>
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <std+0x38>)
 8001f7c:	6224      	str	r4, [r4, #32]
 8001f7e:	6263      	str	r3, [r4, #36]	; 0x24
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <std+0x3c>)
 8001f82:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <std+0x40>)
 8001f86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <std+0x44>)
 8001f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	bf00      	nop
 8001f90:	080022cd 	.word	0x080022cd
 8001f94:	080022ef 	.word	0x080022ef
 8001f98:	08002327 	.word	0x08002327
 8001f9c:	0800234b 	.word	0x0800234b

08001fa0 <_cleanup_r>:
 8001fa0:	4901      	ldr	r1, [pc, #4]	; (8001fa8 <_cleanup_r+0x8>)
 8001fa2:	f000 b8af 	b.w	8002104 <_fwalk_reent>
 8001fa6:	bf00      	nop
 8001fa8:	08001ee1 	.word	0x08001ee1

08001fac <__sfmoreglue>:
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	2568      	movs	r5, #104	; 0x68
 8001fb0:	1e4a      	subs	r2, r1, #1
 8001fb2:	4355      	muls	r5, r2
 8001fb4:	460e      	mov	r6, r1
 8001fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fba:	f7ff faeb 	bl	8001594 <_malloc_r>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	b140      	cbz	r0, 8001fd4 <__sfmoreglue+0x28>
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8001fc8:	300c      	adds	r0, #12
 8001fca:	60a0      	str	r0, [r4, #8]
 8001fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fd0:	f7ff fa14 	bl	80013fc <memset>
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}

08001fd8 <__sfp_lock_acquire>:
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <__sfp_lock_acquire+0x8>)
 8001fda:	f000 b8b3 	b.w	8002144 <__retarget_lock_acquire_recursive>
 8001fde:	bf00      	nop
 8001fe0:	200000a8 	.word	0x200000a8

08001fe4 <__sfp_lock_release>:
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <__sfp_lock_release+0x8>)
 8001fe6:	f000 b8ae 	b.w	8002146 <__retarget_lock_release_recursive>
 8001fea:	bf00      	nop
 8001fec:	200000a8 	.word	0x200000a8

08001ff0 <__sinit_lock_acquire>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__sinit_lock_acquire+0x8>)
 8001ff2:	f000 b8a7 	b.w	8002144 <__retarget_lock_acquire_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	200000a3 	.word	0x200000a3

08001ffc <__sinit_lock_release>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__sinit_lock_release+0x8>)
 8001ffe:	f000 b8a2 	b.w	8002146 <__retarget_lock_release_recursive>
 8002002:	bf00      	nop
 8002004:	200000a3 	.word	0x200000a3

08002008 <__sinit>:
 8002008:	b510      	push	{r4, lr}
 800200a:	4604      	mov	r4, r0
 800200c:	f7ff fff0 	bl	8001ff0 <__sinit_lock_acquire>
 8002010:	69a3      	ldr	r3, [r4, #24]
 8002012:	b11b      	cbz	r3, 800201c <__sinit+0x14>
 8002014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002018:	f7ff bff0 	b.w	8001ffc <__sinit_lock_release>
 800201c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002020:	6523      	str	r3, [r4, #80]	; 0x50
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <__sinit+0x68>)
 8002024:	4a13      	ldr	r2, [pc, #76]	; (8002074 <__sinit+0x6c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	62a2      	str	r2, [r4, #40]	; 0x28
 800202a:	42a3      	cmp	r3, r4
 800202c:	bf08      	it	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	4620      	mov	r0, r4
 8002032:	bf08      	it	eq
 8002034:	61a3      	streq	r3, [r4, #24]
 8002036:	f000 f81f 	bl	8002078 <__sfp>
 800203a:	6060      	str	r0, [r4, #4]
 800203c:	4620      	mov	r0, r4
 800203e:	f000 f81b 	bl	8002078 <__sfp>
 8002042:	60a0      	str	r0, [r4, #8]
 8002044:	4620      	mov	r0, r4
 8002046:	f000 f817 	bl	8002078 <__sfp>
 800204a:	2200      	movs	r2, #0
 800204c:	2104      	movs	r1, #4
 800204e:	60e0      	str	r0, [r4, #12]
 8002050:	6860      	ldr	r0, [r4, #4]
 8002052:	f7ff ff81 	bl	8001f58 <std>
 8002056:	2201      	movs	r2, #1
 8002058:	2109      	movs	r1, #9
 800205a:	68a0      	ldr	r0, [r4, #8]
 800205c:	f7ff ff7c 	bl	8001f58 <std>
 8002060:	2202      	movs	r2, #2
 8002062:	2112      	movs	r1, #18
 8002064:	68e0      	ldr	r0, [r4, #12]
 8002066:	f7ff ff77 	bl	8001f58 <std>
 800206a:	2301      	movs	r3, #1
 800206c:	61a3      	str	r3, [r4, #24]
 800206e:	e7d1      	b.n	8002014 <__sinit+0xc>
 8002070:	08002460 	.word	0x08002460
 8002074:	08001fa1 	.word	0x08001fa1

08002078 <__sfp>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	4607      	mov	r7, r0
 800207c:	f7ff ffac 	bl	8001fd8 <__sfp_lock_acquire>
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <__sfp+0x84>)
 8002082:	681e      	ldr	r6, [r3, #0]
 8002084:	69b3      	ldr	r3, [r6, #24]
 8002086:	b913      	cbnz	r3, 800208e <__sfp+0x16>
 8002088:	4630      	mov	r0, r6
 800208a:	f7ff ffbd 	bl	8002008 <__sinit>
 800208e:	3648      	adds	r6, #72	; 0x48
 8002090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002094:	3b01      	subs	r3, #1
 8002096:	d503      	bpl.n	80020a0 <__sfp+0x28>
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	b30b      	cbz	r3, 80020e0 <__sfp+0x68>
 800209c:	6836      	ldr	r6, [r6, #0]
 800209e:	e7f7      	b.n	8002090 <__sfp+0x18>
 80020a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020a4:	b9d5      	cbnz	r5, 80020dc <__sfp+0x64>
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <__sfp+0x88>)
 80020a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020ac:	60e3      	str	r3, [r4, #12]
 80020ae:	6665      	str	r5, [r4, #100]	; 0x64
 80020b0:	f000 f847 	bl	8002142 <__retarget_lock_init_recursive>
 80020b4:	f7ff ff96 	bl	8001fe4 <__sfp_lock_release>
 80020b8:	2208      	movs	r2, #8
 80020ba:	4629      	mov	r1, r5
 80020bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020c4:	6025      	str	r5, [r4, #0]
 80020c6:	61a5      	str	r5, [r4, #24]
 80020c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020cc:	f7ff f996 	bl	80013fc <memset>
 80020d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020d8:	4620      	mov	r0, r4
 80020da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020dc:	3468      	adds	r4, #104	; 0x68
 80020de:	e7d9      	b.n	8002094 <__sfp+0x1c>
 80020e0:	2104      	movs	r1, #4
 80020e2:	4638      	mov	r0, r7
 80020e4:	f7ff ff62 	bl	8001fac <__sfmoreglue>
 80020e8:	4604      	mov	r4, r0
 80020ea:	6030      	str	r0, [r6, #0]
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1d5      	bne.n	800209c <__sfp+0x24>
 80020f0:	f7ff ff78 	bl	8001fe4 <__sfp_lock_release>
 80020f4:	230c      	movs	r3, #12
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	e7ee      	b.n	80020d8 <__sfp+0x60>
 80020fa:	bf00      	nop
 80020fc:	08002460 	.word	0x08002460
 8002100:	ffff0001 	.word	0xffff0001

08002104 <_fwalk_reent>:
 8002104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002108:	4606      	mov	r6, r0
 800210a:	4688      	mov	r8, r1
 800210c:	2700      	movs	r7, #0
 800210e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002116:	f1b9 0901 	subs.w	r9, r9, #1
 800211a:	d505      	bpl.n	8002128 <_fwalk_reent+0x24>
 800211c:	6824      	ldr	r4, [r4, #0]
 800211e:	2c00      	cmp	r4, #0
 8002120:	d1f7      	bne.n	8002112 <_fwalk_reent+0xe>
 8002122:	4638      	mov	r0, r7
 8002124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002128:	89ab      	ldrh	r3, [r5, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d907      	bls.n	800213e <_fwalk_reent+0x3a>
 800212e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002132:	3301      	adds	r3, #1
 8002134:	d003      	beq.n	800213e <_fwalk_reent+0x3a>
 8002136:	4629      	mov	r1, r5
 8002138:	4630      	mov	r0, r6
 800213a:	47c0      	blx	r8
 800213c:	4307      	orrs	r7, r0
 800213e:	3568      	adds	r5, #104	; 0x68
 8002140:	e7e9      	b.n	8002116 <_fwalk_reent+0x12>

08002142 <__retarget_lock_init_recursive>:
 8002142:	4770      	bx	lr

08002144 <__retarget_lock_acquire_recursive>:
 8002144:	4770      	bx	lr

08002146 <__retarget_lock_release_recursive>:
 8002146:	4770      	bx	lr

08002148 <__swhatbuf_r>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	460e      	mov	r6, r1
 800214c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002150:	4614      	mov	r4, r2
 8002152:	2900      	cmp	r1, #0
 8002154:	461d      	mov	r5, r3
 8002156:	b096      	sub	sp, #88	; 0x58
 8002158:	da07      	bge.n	800216a <__swhatbuf_r+0x22>
 800215a:	2300      	movs	r3, #0
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	89b3      	ldrh	r3, [r6, #12]
 8002160:	061a      	lsls	r2, r3, #24
 8002162:	d410      	bmi.n	8002186 <__swhatbuf_r+0x3e>
 8002164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002168:	e00e      	b.n	8002188 <__swhatbuf_r+0x40>
 800216a:	466a      	mov	r2, sp
 800216c:	f000 f914 	bl	8002398 <_fstat_r>
 8002170:	2800      	cmp	r0, #0
 8002172:	dbf2      	blt.n	800215a <__swhatbuf_r+0x12>
 8002174:	9a01      	ldr	r2, [sp, #4]
 8002176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800217a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800217e:	425a      	negs	r2, r3
 8002180:	415a      	adcs	r2, r3
 8002182:	602a      	str	r2, [r5, #0]
 8002184:	e7ee      	b.n	8002164 <__swhatbuf_r+0x1c>
 8002186:	2340      	movs	r3, #64	; 0x40
 8002188:	2000      	movs	r0, #0
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	b016      	add	sp, #88	; 0x58
 800218e:	bd70      	pop	{r4, r5, r6, pc}

08002190 <__smakebuf_r>:
 8002190:	898b      	ldrh	r3, [r1, #12]
 8002192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002194:	079d      	lsls	r5, r3, #30
 8002196:	4606      	mov	r6, r0
 8002198:	460c      	mov	r4, r1
 800219a:	d507      	bpl.n	80021ac <__smakebuf_r+0x1c>
 800219c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	6123      	str	r3, [r4, #16]
 80021a4:	2301      	movs	r3, #1
 80021a6:	6163      	str	r3, [r4, #20]
 80021a8:	b002      	add	sp, #8
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	466a      	mov	r2, sp
 80021ae:	ab01      	add	r3, sp, #4
 80021b0:	f7ff ffca 	bl	8002148 <__swhatbuf_r>
 80021b4:	9900      	ldr	r1, [sp, #0]
 80021b6:	4605      	mov	r5, r0
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7ff f9eb 	bl	8001594 <_malloc_r>
 80021be:	b948      	cbnz	r0, 80021d4 <__smakebuf_r+0x44>
 80021c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c4:	059a      	lsls	r2, r3, #22
 80021c6:	d4ef      	bmi.n	80021a8 <__smakebuf_r+0x18>
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	e7e3      	b.n	800219c <__smakebuf_r+0xc>
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <__smakebuf_r+0x7c>)
 80021d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	6020      	str	r0, [r4, #0]
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	81a3      	strh	r3, [r4, #12]
 80021e2:	9b00      	ldr	r3, [sp, #0]
 80021e4:	6120      	str	r0, [r4, #16]
 80021e6:	6163      	str	r3, [r4, #20]
 80021e8:	9b01      	ldr	r3, [sp, #4]
 80021ea:	b15b      	cbz	r3, 8002204 <__smakebuf_r+0x74>
 80021ec:	4630      	mov	r0, r6
 80021ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021f2:	f000 f8e3 	bl	80023bc <_isatty_r>
 80021f6:	b128      	cbz	r0, 8002204 <__smakebuf_r+0x74>
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	81a3      	strh	r3, [r4, #12]
 8002204:	89a0      	ldrh	r0, [r4, #12]
 8002206:	4305      	orrs	r5, r0
 8002208:	81a5      	strh	r5, [r4, #12]
 800220a:	e7cd      	b.n	80021a8 <__smakebuf_r+0x18>
 800220c:	08001fa1 	.word	0x08001fa1

08002210 <memchr>:
 8002210:	4603      	mov	r3, r0
 8002212:	b510      	push	{r4, lr}
 8002214:	b2c9      	uxtb	r1, r1
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	4618      	mov	r0, r3
 800221c:	d101      	bne.n	8002222 <memchr+0x12>
 800221e:	2000      	movs	r0, #0
 8002220:	e003      	b.n	800222a <memchr+0x1a>
 8002222:	7804      	ldrb	r4, [r0, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	428c      	cmp	r4, r1
 8002228:	d1f6      	bne.n	8002218 <memchr+0x8>
 800222a:	bd10      	pop	{r4, pc}

0800222c <__malloc_lock>:
 800222c:	4801      	ldr	r0, [pc, #4]	; (8002234 <__malloc_lock+0x8>)
 800222e:	f7ff bf89 	b.w	8002144 <__retarget_lock_acquire_recursive>
 8002232:	bf00      	nop
 8002234:	200000a4 	.word	0x200000a4

08002238 <__malloc_unlock>:
 8002238:	4801      	ldr	r0, [pc, #4]	; (8002240 <__malloc_unlock+0x8>)
 800223a:	f7ff bf84 	b.w	8002146 <__retarget_lock_release_recursive>
 800223e:	bf00      	nop
 8002240:	200000a4 	.word	0x200000a4

08002244 <_raise_r>:
 8002244:	291f      	cmp	r1, #31
 8002246:	b538      	push	{r3, r4, r5, lr}
 8002248:	4604      	mov	r4, r0
 800224a:	460d      	mov	r5, r1
 800224c:	d904      	bls.n	8002258 <_raise_r+0x14>
 800224e:	2316      	movs	r3, #22
 8002250:	6003      	str	r3, [r0, #0]
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800225a:	b112      	cbz	r2, 8002262 <_raise_r+0x1e>
 800225c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002260:	b94b      	cbnz	r3, 8002276 <_raise_r+0x32>
 8002262:	4620      	mov	r0, r4
 8002264:	f000 f830 	bl	80022c8 <_getpid_r>
 8002268:	462a      	mov	r2, r5
 800226a:	4601      	mov	r1, r0
 800226c:	4620      	mov	r0, r4
 800226e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002272:	f000 b817 	b.w	80022a4 <_kill_r>
 8002276:	2b01      	cmp	r3, #1
 8002278:	d00a      	beq.n	8002290 <_raise_r+0x4c>
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	d103      	bne.n	8002286 <_raise_r+0x42>
 800227e:	2316      	movs	r3, #22
 8002280:	6003      	str	r3, [r0, #0]
 8002282:	2001      	movs	r0, #1
 8002284:	e7e7      	b.n	8002256 <_raise_r+0x12>
 8002286:	2400      	movs	r4, #0
 8002288:	4628      	mov	r0, r5
 800228a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800228e:	4798      	blx	r3
 8002290:	2000      	movs	r0, #0
 8002292:	e7e0      	b.n	8002256 <_raise_r+0x12>

08002294 <raise>:
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <raise+0xc>)
 8002296:	4601      	mov	r1, r0
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f7ff bfd3 	b.w	8002244 <_raise_r>
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c

080022a4 <_kill_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	2300      	movs	r3, #0
 80022a8:	4d06      	ldr	r5, [pc, #24]	; (80022c4 <_kill_r+0x20>)
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	f7fe f8bb 	bl	800042c <_kill>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d102      	bne.n	80022c0 <_kill_r+0x1c>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	b103      	cbz	r3, 80022c0 <_kill_r+0x1c>
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	200000ac 	.word	0x200000ac

080022c8 <_getpid_r>:
 80022c8:	f7fe b8a9 	b.w	800041e <_getpid>

080022cc <__sread>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	460c      	mov	r4, r1
 80022d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d4:	f000 f894 	bl	8002400 <_read_r>
 80022d8:	2800      	cmp	r0, #0
 80022da:	bfab      	itete	ge
 80022dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022de:	89a3      	ldrhlt	r3, [r4, #12]
 80022e0:	181b      	addge	r3, r3, r0
 80022e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022e6:	bfac      	ite	ge
 80022e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80022ea:	81a3      	strhlt	r3, [r4, #12]
 80022ec:	bd10      	pop	{r4, pc}

080022ee <__swrite>:
 80022ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f2:	461f      	mov	r7, r3
 80022f4:	898b      	ldrh	r3, [r1, #12]
 80022f6:	4605      	mov	r5, r0
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	460c      	mov	r4, r1
 80022fc:	4616      	mov	r6, r2
 80022fe:	d505      	bpl.n	800230c <__swrite+0x1e>
 8002300:	2302      	movs	r3, #2
 8002302:	2200      	movs	r2, #0
 8002304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002308:	f000 f868 	bl	80023dc <_lseek_r>
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	4632      	mov	r2, r6
 8002310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	4628      	mov	r0, r5
 8002318:	463b      	mov	r3, r7
 800231a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800231e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002322:	f000 b817 	b.w	8002354 <_write_r>

08002326 <__sseek>:
 8002326:	b510      	push	{r4, lr}
 8002328:	460c      	mov	r4, r1
 800232a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232e:	f000 f855 	bl	80023dc <_lseek_r>
 8002332:	1c43      	adds	r3, r0, #1
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	bf15      	itete	ne
 8002338:	6560      	strne	r0, [r4, #84]	; 0x54
 800233a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800233e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002342:	81a3      	strheq	r3, [r4, #12]
 8002344:	bf18      	it	ne
 8002346:	81a3      	strhne	r3, [r4, #12]
 8002348:	bd10      	pop	{r4, pc}

0800234a <__sclose>:
 800234a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234e:	f000 b813 	b.w	8002378 <_close_r>
	...

08002354 <_write_r>:
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	2200      	movs	r2, #0
 800235e:	4d05      	ldr	r5, [pc, #20]	; (8002374 <_write_r+0x20>)
 8002360:	602a      	str	r2, [r5, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	f7fe f899 	bl	800049a <_write>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d102      	bne.n	8002372 <_write_r+0x1e>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	b103      	cbz	r3, 8002372 <_write_r+0x1e>
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	200000ac 	.word	0x200000ac

08002378 <_close_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	2300      	movs	r3, #0
 800237c:	4d05      	ldr	r5, [pc, #20]	; (8002394 <_close_r+0x1c>)
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	602b      	str	r3, [r5, #0]
 8002384:	f7fe f8a5 	bl	80004d2 <_close>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_close_r+0x1a>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_close_r+0x1a>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	200000ac 	.word	0x200000ac

08002398 <_fstat_r>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	2300      	movs	r3, #0
 800239c:	4d06      	ldr	r5, [pc, #24]	; (80023b8 <_fstat_r+0x20>)
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	602b      	str	r3, [r5, #0]
 80023a6:	f7fe f89f 	bl	80004e8 <_fstat>
 80023aa:	1c43      	adds	r3, r0, #1
 80023ac:	d102      	bne.n	80023b4 <_fstat_r+0x1c>
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	b103      	cbz	r3, 80023b4 <_fstat_r+0x1c>
 80023b2:	6023      	str	r3, [r4, #0]
 80023b4:	bd38      	pop	{r3, r4, r5, pc}
 80023b6:	bf00      	nop
 80023b8:	200000ac 	.word	0x200000ac

080023bc <_isatty_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	2300      	movs	r3, #0
 80023c0:	4d05      	ldr	r5, [pc, #20]	; (80023d8 <_isatty_r+0x1c>)
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	f7fe f89d 	bl	8000506 <_isatty>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_isatty_r+0x1a>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_isatty_r+0x1a>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	200000ac 	.word	0x200000ac

080023dc <_lseek_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	2200      	movs	r2, #0
 80023e6:	4d05      	ldr	r5, [pc, #20]	; (80023fc <_lseek_r+0x20>)
 80023e8:	602a      	str	r2, [r5, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7fe f895 	bl	800051a <_lseek>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_lseek_r+0x1e>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_lseek_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200000ac 	.word	0x200000ac

08002400 <_read_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4604      	mov	r4, r0
 8002404:	4608      	mov	r0, r1
 8002406:	4611      	mov	r1, r2
 8002408:	2200      	movs	r2, #0
 800240a:	4d05      	ldr	r5, [pc, #20]	; (8002420 <_read_r+0x20>)
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7fe f826 	bl	8000460 <_read>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_read_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_read_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200000ac 	.word	0x200000ac

08002424 <_init>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr

08002430 <_fini>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr
