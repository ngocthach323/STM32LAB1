
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000232c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a8  080025a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025a8  080025a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025a8  080025a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002620  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002620  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e93  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016eb  00000000  00000000  00026f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00028ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753a  00000000  00000000  00028ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005dd7  00000000  00000000  0004040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f009  00000000  00000000  000461e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c51ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a00  00000000  00000000  000c5240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002420 	.word	0x08002420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002420 	.word	0x08002420

0800014c <setNumberOnClock>:
 *  Created on: Sep 10, 2024
 *      Author: ACER
 */
#include "excercise8.h"

void setNumberOnClock(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0b      	cmp	r3, #11
 8000158:	d866      	bhi.n	8000228 <setNumberOnClock+0xdc>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <setNumberOnClock+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000191 	.word	0x08000191
 8000164:	0800019f 	.word	0x0800019f
 8000168:	080001ab 	.word	0x080001ab
 800016c:	080001b7 	.word	0x080001b7
 8000170:	080001c3 	.word	0x080001c3
 8000174:	080001cf 	.word	0x080001cf
 8000178:	080001db 	.word	0x080001db
 800017c:	080001e7 	.word	0x080001e7
 8000180:	080001f3 	.word	0x080001f3
 8000184:	080001ff 	.word	0x080001ff
 8000188:	0800020d 	.word	0x0800020d
 800018c:	0800021b 	.word	0x0800021b
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);  // LED cho số 12
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000196:	4826      	ldr	r0, [pc, #152]	; (8000230 <setNumberOnClock+0xe4>)
 8000198:	f000 fd10 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 800019c:	e044      	b.n	8000228 <setNumberOnClock+0xdc>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED cho số 1
 800019e:	2201      	movs	r2, #1
 80001a0:	2101      	movs	r1, #1
 80001a2:	4823      	ldr	r0, [pc, #140]	; (8000230 <setNumberOnClock+0xe4>)
 80001a4:	f000 fd0a 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001a8:	e03e      	b.n	8000228 <setNumberOnClock+0xdc>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // LED cho số 2
 80001aa:	2201      	movs	r2, #1
 80001ac:	2102      	movs	r1, #2
 80001ae:	4820      	ldr	r0, [pc, #128]	; (8000230 <setNumberOnClock+0xe4>)
 80001b0:	f000 fd04 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001b4:	e038      	b.n	8000228 <setNumberOnClock+0xdc>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // LED cho số 3
 80001b6:	2201      	movs	r2, #1
 80001b8:	2104      	movs	r1, #4
 80001ba:	481d      	ldr	r0, [pc, #116]	; (8000230 <setNumberOnClock+0xe4>)
 80001bc:	f000 fcfe 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001c0:	e032      	b.n	8000228 <setNumberOnClock+0xdc>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);  // LED cho số 4
 80001c2:	2201      	movs	r2, #1
 80001c4:	2108      	movs	r1, #8
 80001c6:	481a      	ldr	r0, [pc, #104]	; (8000230 <setNumberOnClock+0xe4>)
 80001c8:	f000 fcf8 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001cc:	e02c      	b.n	8000228 <setNumberOnClock+0xdc>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);  // LED cho số 5
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	4817      	ldr	r0, [pc, #92]	; (8000230 <setNumberOnClock+0xe4>)
 80001d4:	f000 fcf2 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001d8:	e026      	b.n	8000228 <setNumberOnClock+0xdc>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // LED cho số 6
 80001da:	2201      	movs	r2, #1
 80001dc:	2120      	movs	r1, #32
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <setNumberOnClock+0xe4>)
 80001e0:	f000 fcec 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001e4:	e020      	b.n	8000228 <setNumberOnClock+0xdc>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // LED cho số 7
 80001e6:	2201      	movs	r2, #1
 80001e8:	2140      	movs	r1, #64	; 0x40
 80001ea:	4811      	ldr	r0, [pc, #68]	; (8000230 <setNumberOnClock+0xe4>)
 80001ec:	f000 fce6 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001f0:	e01a      	b.n	8000228 <setNumberOnClock+0xdc>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // LED cho số 8
 80001f2:	2201      	movs	r2, #1
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	480e      	ldr	r0, [pc, #56]	; (8000230 <setNumberOnClock+0xe4>)
 80001f8:	f000 fce0 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 80001fc:	e014      	b.n	8000228 <setNumberOnClock+0xdc>
		case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // LED cho số 9
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <setNumberOnClock+0xe4>)
 8000206:	f000 fcd9 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 800020a:	e00d      	b.n	8000228 <setNumberOnClock+0xdc>
		case 10:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);  // LED cho số 10
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <setNumberOnClock+0xe4>)
 8000214:	f000 fcd2 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 8000218:	e006      	b.n	8000228 <setNumberOnClock+0xdc>
		case 11:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  // LED cho số 11
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <setNumberOnClock+0xe4>)
 8000222:	f000 fccb 	bl	8000bbc <HAL_GPIO_WritePin>
			break;
 8000226:	bf00      	nop
	}
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010c00 	.word	0x40010c00

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 f9db 	bl	80005f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f81d 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f857 	bl	80002f4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  count = rand() % 12;
 800024a:	f001 f8dd 	bl	8001408 <rand>
 800024e:	4602      	mov	r2, r0
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x44>)
 8000252:	fb83 1302 	smull	r1, r3, r3, r2
 8000256:	1059      	asrs	r1, r3, #1
 8000258:	17d3      	asrs	r3, r2, #31
 800025a:	1ac9      	subs	r1, r1, r3
 800025c:	460b      	mov	r3, r1
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	440b      	add	r3, r1
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	607b      	str	r3, [r7, #4]
	  setNumberOnClock(count);
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f7ff ff6f 	bl	800014c <setNumberOnClock>
	  HAL_Delay(1000);
 800026e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000272:	f000 fa21 	bl	80006b8 <HAL_Delay>
	  count = rand() % 12;
 8000276:	e7e8      	b.n	800024a <main+0x16>
 8000278:	2aaaaaab 	.word	0x2aaaaaab

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f8b4 	bl	80013f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fc9a 	bl	8000bec <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002be:	f000 f84d 	bl	800035c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 ff06 	bl	80010ec <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e6:	f000 f839 	bl	800035c <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_GPIO_Init+0x60>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <MX_GPIO_Init+0x60>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_GPIO_Init+0x60>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000320:	2200      	movs	r2, #0
 8000322:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_GPIO_Init+0x64>)
 8000328:	f000 fc48 	bl	8000bbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800032c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000330:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_GPIO_Init+0x64>)
 8000346:	f000 fabf 	bl	80008c8 <HAL_GPIO_Init>

}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40010c00 	.word	0x40010c00

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	e7fe      	b.n	8000364 <Error_Handler+0x8>
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <HAL_MspInit+0x5c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <HAL_MspInit+0x5c>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_MspInit+0x60>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_MspInit+0x60>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010000 	.word	0x40010000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f935 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}

0800041a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
	return 1;
 800041e:	2301      	movs	r3, #1
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <_kill>:

int _kill(int pid, int sig)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000432:	f000 ffb7 	bl	80013a4 <__errno>
 8000436:	4603      	mov	r3, r0
 8000438:	2216      	movs	r2, #22
 800043a:	601a      	str	r2, [r3, #0]
	return -1;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_exit>:

void _exit (int status)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000450:	f04f 31ff 	mov.w	r1, #4294967295
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ffe7 	bl	8000428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800045a:	e7fe      	b.n	800045a <_exit+0x12>

0800045c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e00a      	b.n	8000484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800046e:	f3af 8000 	nop.w
 8000472:	4601      	mov	r1, r0
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	b2ca      	uxtb	r2, r1
 800047c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf0      	blt.n	800046e <_read+0x12>
	}

return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e009      	b.n	80004bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf1      	blt.n	80004a8 <_write+0x12>
	}
	return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_close>:

int _close(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	return -1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f4:	605a      	str	r2, [r3, #4]
	return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <_isatty>:

int _isatty(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
	return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
	return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f000 ff20 	bl	80013a4 <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20002800 	.word	0x20002800
 8000590:	00000400 	.word	0x00000400
 8000594:	2000008c 	.word	0x2000008c
 8000598:	200000b0 	.word	0x200000b0

0800059c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a8:	f7ff fff8 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c4:	4c09      	ldr	r4, [pc, #36]	; (80005ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f000 feed 	bl	80013b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fe2d 	bl	8000234 <main>
  bx lr
 80005da:	4770      	bx	lr
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005e4:	080025b0 	.word	0x080025b0
  ldr r2, =_sbss
 80005e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005ec:	200000ac 	.word	0x200000ac

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_Init+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_Init+0x28>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f92b 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	200f      	movs	r0, #15
 800060c:	f000 f808 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f7ff feaa 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x54>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f935 	bl	80008ae <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e00e      	b.n	800066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d80a      	bhi.n	800066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f000 f90b 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_InitTick+0x5c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000008 	.word	0x20000008
 800067c:	20000004 	.word	0x20000004

08000680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x1c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x20>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <HAL_IncTick+0x20>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	20000008 	.word	0x20000008
 80006a0:	20000098 	.word	0x20000098

080006a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <HAL_GetTick+0x10>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000098 	.word	0x20000098

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff fff0 	bl	80006a4 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffe0 	bl	80006a4 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	; (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	; 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff90 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff49 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff5e 	bl	8000748 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff90 	bl	80007b8 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5f 	bl	8000764 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffb0 	bl	800081c <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b08b      	sub	sp, #44	; 0x2c
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	e148      	b.n	8000b6e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008dc:	2201      	movs	r2, #1
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	69fa      	ldr	r2, [r7, #28]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	f040 8137 	bne.w	8000b68 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	4aa3      	ldr	r2, [pc, #652]	; (8000b8c <HAL_GPIO_Init+0x2c4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d05e      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
 8000904:	4aa1      	ldr	r2, [pc, #644]	; (8000b8c <HAL_GPIO_Init+0x2c4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d875      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 800090a:	4aa1      	ldr	r2, [pc, #644]	; (8000b90 <HAL_GPIO_Init+0x2c8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d058      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
 8000910:	4a9f      	ldr	r2, [pc, #636]	; (8000b90 <HAL_GPIO_Init+0x2c8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d86f      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 8000916:	4a9f      	ldr	r2, [pc, #636]	; (8000b94 <HAL_GPIO_Init+0x2cc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d052      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
 800091c:	4a9d      	ldr	r2, [pc, #628]	; (8000b94 <HAL_GPIO_Init+0x2cc>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d869      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 8000922:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <HAL_GPIO_Init+0x2d0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d04c      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
 8000928:	4a9b      	ldr	r2, [pc, #620]	; (8000b98 <HAL_GPIO_Init+0x2d0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d863      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 800092e:	4a9b      	ldr	r2, [pc, #620]	; (8000b9c <HAL_GPIO_Init+0x2d4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d046      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
 8000934:	4a99      	ldr	r2, [pc, #612]	; (8000b9c <HAL_GPIO_Init+0x2d4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d85d      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 800093a:	2b12      	cmp	r3, #18
 800093c:	d82a      	bhi.n	8000994 <HAL_GPIO_Init+0xcc>
 800093e:	2b12      	cmp	r3, #18
 8000940:	d859      	bhi.n	80009f6 <HAL_GPIO_Init+0x12e>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <HAL_GPIO_Init+0x80>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	080009c3 	.word	0x080009c3
 800094c:	0800099d 	.word	0x0800099d
 8000950:	080009af 	.word	0x080009af
 8000954:	080009f1 	.word	0x080009f1
 8000958:	080009f7 	.word	0x080009f7
 800095c:	080009f7 	.word	0x080009f7
 8000960:	080009f7 	.word	0x080009f7
 8000964:	080009f7 	.word	0x080009f7
 8000968:	080009f7 	.word	0x080009f7
 800096c:	080009f7 	.word	0x080009f7
 8000970:	080009f7 	.word	0x080009f7
 8000974:	080009f7 	.word	0x080009f7
 8000978:	080009f7 	.word	0x080009f7
 800097c:	080009f7 	.word	0x080009f7
 8000980:	080009f7 	.word	0x080009f7
 8000984:	080009f7 	.word	0x080009f7
 8000988:	080009f7 	.word	0x080009f7
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009b9 	.word	0x080009b9
 8000994:	4a82      	ldr	r2, [pc, #520]	; (8000ba0 <HAL_GPIO_Init+0x2d8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d013      	beq.n	80009c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800099a:	e02c      	b.n	80009f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	623b      	str	r3, [r7, #32]
          break;
 80009a2:	e029      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	3304      	adds	r3, #4
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e024      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	3308      	adds	r3, #8
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e01f      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	330c      	adds	r3, #12
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e01a      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d102      	bne.n	80009d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ca:	2304      	movs	r3, #4
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e013      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d105      	bne.n	80009e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d8:	2308      	movs	r3, #8
 80009da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	611a      	str	r2, [r3, #16]
          break;
 80009e2:	e009      	b.n	80009f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e4:	2308      	movs	r3, #8
 80009e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	69fa      	ldr	r2, [r7, #28]
 80009ec:	615a      	str	r2, [r3, #20]
          break;
 80009ee:	e003      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e000      	b.n	80009f8 <HAL_GPIO_Init+0x130>
          break;
 80009f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d801      	bhi.n	8000a02 <HAL_GPIO_Init+0x13a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	e001      	b.n	8000a06 <HAL_GPIO_Init+0x13e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3304      	adds	r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d802      	bhi.n	8000a14 <HAL_GPIO_Init+0x14c>
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x152>
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	3b08      	subs	r3, #8
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	210f      	movs	r1, #15
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	6a39      	ldr	r1, [r7, #32]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	431a      	orrs	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8090 	beq.w	8000b68 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a48:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <HAL_GPIO_Init+0x2dc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a55      	ldr	r2, [pc, #340]	; (8000ba4 <HAL_GPIO_Init+0x2dc>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <HAL_GPIO_Init+0x2dc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a60:	4a51      	ldr	r2, [pc, #324]	; (8000ba8 <HAL_GPIO_Init+0x2e0>)
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	3302      	adds	r3, #2
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	220f      	movs	r2, #15
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a49      	ldr	r2, [pc, #292]	; (8000bac <HAL_GPIO_Init+0x2e4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1e0>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a48      	ldr	r2, [pc, #288]	; (8000bb0 <HAL_GPIO_Init+0x2e8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1dc>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a47      	ldr	r2, [pc, #284]	; (8000bb4 <HAL_GPIO_Init+0x2ec>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1d8>
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e004      	b.n	8000aaa <HAL_GPIO_Init+0x1e2>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x1e2>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <HAL_GPIO_Init+0x1e2>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aac:	f002 0203 	and.w	r2, r2, #3
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aba:	493b      	ldr	r1, [pc, #236]	; (8000ba8 <HAL_GPIO_Init+0x2e0>)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	4937      	ldr	r1, [pc, #220]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	608b      	str	r3, [r1, #8]
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	4933      	ldr	r1, [pc, #204]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	492d      	ldr	r1, [pc, #180]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60cb      	str	r3, [r1, #12]
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4929      	ldr	r1, [pc, #164]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4923      	ldr	r1, [pc, #140]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	604b      	str	r3, [r1, #4]
 8000b30:	e006      	b.n	8000b40 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	491f      	ldr	r1, [pc, #124]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4919      	ldr	r1, [pc, #100]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	600b      	str	r3, [r1, #0]
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4915      	ldr	r1, [pc, #84]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f aeaf 	bne.w	80008dc <HAL_GPIO_Init+0x14>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	372c      	adds	r7, #44	; 0x2c
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	10320000 	.word	0x10320000
 8000b90:	10310000 	.word	0x10310000
 8000b94:	10220000 	.word	0x10220000
 8000b98:	10210000 	.word	0x10210000
 8000b9c:	10120000 	.word	0x10120000
 8000ba0:	10110000 	.word	0x10110000
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bd8:	e003      	b.n	8000be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	041a      	lsls	r2, r3, #16
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e26c      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8087 	beq.w	8000d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c0c:	4b92      	ldr	r3, [pc, #584]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 030c 	and.w	r3, r3, #12
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d00c      	beq.n	8000c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c18:	4b8f      	ldr	r3, [pc, #572]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d112      	bne.n	8000c4a <HAL_RCC_OscConfig+0x5e>
 8000c24:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c30:	d10b      	bne.n	8000c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c32:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d06c      	beq.n	8000d18 <HAL_RCC_OscConfig+0x12c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d168      	bne.n	8000d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e246      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c52:	d106      	bne.n	8000c62 <HAL_RCC_OscConfig+0x76>
 8000c54:	4b80      	ldr	r3, [pc, #512]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a7f      	ldr	r2, [pc, #508]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e02e      	b.n	8000cc0 <HAL_RCC_OscConfig+0xd4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10c      	bne.n	8000c84 <HAL_RCC_OscConfig+0x98>
 8000c6a:	4b7b      	ldr	r3, [pc, #492]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a7a      	ldr	r2, [pc, #488]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b78      	ldr	r3, [pc, #480]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a77      	ldr	r2, [pc, #476]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e01d      	b.n	8000cc0 <HAL_RCC_OscConfig+0xd4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_RCC_OscConfig+0xbc>
 8000c8e:	4b72      	ldr	r3, [pc, #456]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a71      	ldr	r2, [pc, #452]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a6e      	ldr	r2, [pc, #440]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e00b      	b.n	8000cc0 <HAL_RCC_OscConfig+0xd4>
 8000ca8:	4b6b      	ldr	r3, [pc, #428]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a6a      	ldr	r2, [pc, #424]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b68      	ldr	r3, [pc, #416]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a67      	ldr	r2, [pc, #412]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d013      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcec 	bl	80006a4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fce8 	bl	80006a4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1fa      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	4b5d      	ldr	r3, [pc, #372]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0xe4>
 8000cee:	e014      	b.n	8000d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fcd8 	bl	80006a4 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fcd4 	bl	80006a4 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1e6      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0a:	4b53      	ldr	r3, [pc, #332]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f0      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x10c>
 8000d16:	e000      	b.n	8000d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d063      	beq.n	8000dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d26:	4b4c      	ldr	r3, [pc, #304]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00b      	beq.n	8000d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d11c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x18c>
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d116      	bne.n	8000d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <HAL_RCC_OscConfig+0x176>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d001      	beq.n	8000d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e1ba      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4939      	ldr	r1, [pc, #228]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	e03a      	b.n	8000dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d020      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_RCC_OscConfig+0x270>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d86:	f7ff fc8d 	bl	80006a4 <HAL_GetTick>
 8000d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fc89 	bl	80006a4 <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e19b      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4927      	ldr	r1, [pc, #156]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
 8000dc0:	e015      	b.n	8000dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_RCC_OscConfig+0x270>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc6c 	bl	80006a4 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc68 	bl	80006a4 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e17a      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d03a      	beq.n	8000e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d019      	beq.n	8000e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_RCC_OscConfig+0x274>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc4c 	bl	80006a4 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc48 	bl	80006a4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e15a      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 fa9a 	bl	8001368 <RCC_Delay>
 8000e34:	e01c      	b.n	8000e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_RCC_OscConfig+0x274>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3c:	f7ff fc32 	bl	80006a4 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e42:	e00f      	b.n	8000e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc2e 	bl	80006a4 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d908      	bls.n	8000e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e140      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	42420000 	.word	0x42420000
 8000e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1e9      	bne.n	8000e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80a6 	beq.w	8000fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e82:	4b97      	ldr	r3, [pc, #604]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10d      	bne.n	8000eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b94      	ldr	r3, [pc, #592]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a93      	ldr	r2, [pc, #588]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b91      	ldr	r3, [pc, #580]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <HAL_RCC_OscConfig+0x4f8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d118      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb6:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <HAL_RCC_OscConfig+0x4f8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a8a      	ldr	r2, [pc, #552]	; (80010e4 <HAL_RCC_OscConfig+0x4f8>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fbef 	bl	80006a4 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f7ff fbeb 	bl	80006a4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b64      	cmp	r3, #100	; 0x64
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e0fd      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <HAL_RCC_OscConfig+0x4f8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x312>
 8000ef0:	4b7b      	ldr	r3, [pc, #492]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a7a      	ldr	r2, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	e02d      	b.n	8000f5a <HAL_RCC_OscConfig+0x36e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x334>
 8000f06:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a75      	ldr	r2, [pc, #468]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	f023 0301 	bic.w	r3, r3, #1
 8000f10:	6213      	str	r3, [r2, #32]
 8000f12:	4b73      	ldr	r3, [pc, #460]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a72      	ldr	r2, [pc, #456]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	f023 0304 	bic.w	r3, r3, #4
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	e01c      	b.n	8000f5a <HAL_RCC_OscConfig+0x36e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d10c      	bne.n	8000f42 <HAL_RCC_OscConfig+0x356>
 8000f28:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a6c      	ldr	r2, [pc, #432]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a69      	ldr	r2, [pc, #420]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6213      	str	r3, [r2, #32]
 8000f40:	e00b      	b.n	8000f5a <HAL_RCC_OscConfig+0x36e>
 8000f42:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	4a66      	ldr	r2, [pc, #408]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	f023 0301 	bic.w	r3, r3, #1
 8000f4c:	6213      	str	r3, [r2, #32]
 8000f4e:	4b64      	ldr	r3, [pc, #400]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a63      	ldr	r2, [pc, #396]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	f023 0304 	bic.w	r3, r3, #4
 8000f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d015      	beq.n	8000f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fb9f 	bl	80006a4 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fb9b 	bl	80006a4 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e0ab      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f80:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0ee      	beq.n	8000f6a <HAL_RCC_OscConfig+0x37e>
 8000f8c:	e014      	b.n	8000fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fb89 	bl	80006a4 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f94:	e00a      	b.n	8000fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fb85 	bl	80006a4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e095      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fac:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1ee      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fbe:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8081 	beq.w	80010d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd4:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 030c 	and.w	r3, r3, #12
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d061      	beq.n	80010a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d146      	bne.n	8001076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <HAL_RCC_OscConfig+0x4fc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb59 	bl	80006a4 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff fb55 	bl	80006a4 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e067      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101c:	d108      	bne.n	8001030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a19      	ldr	r1, [r3, #32]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	430b      	orrs	r3, r1
 8001042:	4927      	ldr	r1, [pc, #156]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x4fc>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fb29 	bl	80006a4 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff fb25 	bl	80006a4 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e037      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x46a>
 8001074:	e02f      	b.n	80010d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_RCC_OscConfig+0x4fc>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fb12 	bl	80006a4 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff fb0e 	bl	80006a4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e020      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x498>
 80010a2:	e018      	b.n	80010d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e013      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40007000 	.word	0x40007000
 80010e8:	42420060 	.word	0x42420060

080010ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0d0      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d910      	bls.n	8001130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 0207 	bic.w	r2, r3, #7
 8001116:	4965      	ldr	r1, [pc, #404]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0b8      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001148:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800116a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	494d      	ldr	r1, [pc, #308]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	4313      	orrs	r3, r2
 800117c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d040      	beq.n	800120c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d115      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e07f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e073      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e06b      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f023 0203 	bic.w	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4936      	ldr	r1, [pc, #216]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fa62 	bl	80006a4 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff fa5e 	bl	80006a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e053      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 020c 	and.w	r2, r3, #12
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	429a      	cmp	r2, r3
 800120a:	d1eb      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d210      	bcs.n	800123c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0207 	bic.w	r2, r3, #7
 8001222:	4922      	ldr	r1, [pc, #136]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e032      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	4916      	ldr	r1, [pc, #88]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800127a:	f000 f821 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
 800127e:	4602      	mov	r2, r0
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	490a      	ldr	r1, [pc, #40]	; (80012b4 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1d0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f9c0 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	08002438 	.word	0x08002438
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d002      	beq.n	80012f0 <HAL_RCC_GetSysClockFreq+0x30>
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d003      	beq.n	80012f6 <HAL_RCC_GetSysClockFreq+0x36>
 80012ee:	e027      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_RCC_GetSysClockFreq+0x98>)
 80012f2:	613b      	str	r3, [r7, #16]
      break;
 80012f4:	e027      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d010      	beq.n	8001330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	0c5b      	lsrs	r3, r3, #17
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_RCC_GetSysClockFreq+0x98>)
 8001322:	fb02 f203 	mul.w	r2, r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e004      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	613b      	str	r3, [r7, #16]
      break;
 800133e:	e002      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetSysClockFreq+0x98>)
 8001342:	613b      	str	r3, [r7, #16]
      break;
 8001344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001346:	693b      	ldr	r3, [r7, #16]
}
 8001348:	4618      	mov	r0, r3
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	007a1200 	.word	0x007a1200
 800135c:	08002448 	.word	0x08002448
 8001360:	08002458 	.word	0x08002458
 8001364:	003d0900 	.word	0x003d0900

08001368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <RCC_Delay+0x34>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <RCC_Delay+0x38>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0a5b      	lsrs	r3, r3, #9
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001384:	bf00      	nop
  }
  while (Delay --);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	60fa      	str	r2, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <RCC_Delay+0x1c>
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000000 	.word	0x20000000
 80013a0:	10624dd3 	.word	0x10624dd3

080013a4 <__errno>:
 80013a4:	4b01      	ldr	r3, [pc, #4]	; (80013ac <__errno+0x8>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000000c 	.word	0x2000000c

080013b0 <__libc_init_array>:
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	2600      	movs	r6, #0
 80013b4:	4d0c      	ldr	r5, [pc, #48]	; (80013e8 <__libc_init_array+0x38>)
 80013b6:	4c0d      	ldr	r4, [pc, #52]	; (80013ec <__libc_init_array+0x3c>)
 80013b8:	1b64      	subs	r4, r4, r5
 80013ba:	10a4      	asrs	r4, r4, #2
 80013bc:	42a6      	cmp	r6, r4
 80013be:	d109      	bne.n	80013d4 <__libc_init_array+0x24>
 80013c0:	f001 f82e 	bl	8002420 <_init>
 80013c4:	2600      	movs	r6, #0
 80013c6:	4d0a      	ldr	r5, [pc, #40]	; (80013f0 <__libc_init_array+0x40>)
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <__libc_init_array+0x44>)
 80013ca:	1b64      	subs	r4, r4, r5
 80013cc:	10a4      	asrs	r4, r4, #2
 80013ce:	42a6      	cmp	r6, r4
 80013d0:	d105      	bne.n	80013de <__libc_init_array+0x2e>
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d8:	4798      	blx	r3
 80013da:	3601      	adds	r6, #1
 80013dc:	e7ee      	b.n	80013bc <__libc_init_array+0xc>
 80013de:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e2:	4798      	blx	r3
 80013e4:	3601      	adds	r6, #1
 80013e6:	e7f2      	b.n	80013ce <__libc_init_array+0x1e>
 80013e8:	080025a8 	.word	0x080025a8
 80013ec:	080025a8 	.word	0x080025a8
 80013f0:	080025a8 	.word	0x080025a8
 80013f4:	080025ac 	.word	0x080025ac

080013f8 <memset>:
 80013f8:	4603      	mov	r3, r0
 80013fa:	4402      	add	r2, r0
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d100      	bne.n	8001402 <memset+0xa>
 8001400:	4770      	bx	lr
 8001402:	f803 1b01 	strb.w	r1, [r3], #1
 8001406:	e7f9      	b.n	80013fc <memset+0x4>

08001408 <rand>:
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <rand+0x60>)
 800140a:	b510      	push	{r4, lr}
 800140c:	681c      	ldr	r4, [r3, #0]
 800140e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001410:	b9b3      	cbnz	r3, 8001440 <rand+0x38>
 8001412:	2018      	movs	r0, #24
 8001414:	f000 f868 	bl	80014e8 <malloc>
 8001418:	4602      	mov	r2, r0
 800141a:	63a0      	str	r0, [r4, #56]	; 0x38
 800141c:	b920      	cbnz	r0, 8001428 <rand+0x20>
 800141e:	214e      	movs	r1, #78	; 0x4e
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <rand+0x64>)
 8001422:	4813      	ldr	r0, [pc, #76]	; (8001470 <rand+0x68>)
 8001424:	f000 f830 	bl	8001488 <__assert_func>
 8001428:	4912      	ldr	r1, [pc, #72]	; (8001474 <rand+0x6c>)
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <rand+0x70>)
 800142c:	e9c0 1300 	strd	r1, r3, [r0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <rand+0x74>)
 8001432:	2100      	movs	r1, #0
 8001434:	6083      	str	r3, [r0, #8]
 8001436:	230b      	movs	r3, #11
 8001438:	8183      	strh	r3, [r0, #12]
 800143a:	2001      	movs	r0, #1
 800143c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001440:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <rand+0x78>)
 8001444:	690a      	ldr	r2, [r1, #16]
 8001446:	694b      	ldr	r3, [r1, #20]
 8001448:	4350      	muls	r0, r2
 800144a:	4c0e      	ldr	r4, [pc, #56]	; (8001484 <rand+0x7c>)
 800144c:	fb04 0003 	mla	r0, r4, r3, r0
 8001450:	fba2 3404 	umull	r3, r4, r2, r4
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	4404      	add	r4, r0
 8001458:	f144 0000 	adc.w	r0, r4, #0
 800145c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8001460:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001464:	bd10      	pop	{r4, pc}
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	08002460 	.word	0x08002460
 8001470:	08002477 	.word	0x08002477
 8001474:	abcd330e 	.word	0xabcd330e
 8001478:	e66d1234 	.word	0xe66d1234
 800147c:	0005deec 	.word	0x0005deec
 8001480:	5851f42d 	.word	0x5851f42d
 8001484:	4c957f2d 	.word	0x4c957f2d

08001488 <__assert_func>:
 8001488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800148a:	4614      	mov	r4, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <__assert_func+0x2c>)
 8001490:	4605      	mov	r5, r0
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68d8      	ldr	r0, [r3, #12]
 8001496:	b14c      	cbz	r4, 80014ac <__assert_func+0x24>
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <__assert_func+0x30>)
 800149a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	462b      	mov	r3, r5
 80014a2:	4906      	ldr	r1, [pc, #24]	; (80014bc <__assert_func+0x34>)
 80014a4:	f000 f80e 	bl	80014c4 <fiprintf>
 80014a8:	f000 fc8a 	bl	8001dc0 <abort>
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__assert_func+0x38>)
 80014ae:	461c      	mov	r4, r3
 80014b0:	e7f3      	b.n	800149a <__assert_func+0x12>
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	080024d6 	.word	0x080024d6
 80014bc:	080024e3 	.word	0x080024e3
 80014c0:	08002511 	.word	0x08002511

080014c4 <fiprintf>:
 80014c4:	b40e      	push	{r1, r2, r3}
 80014c6:	b503      	push	{r0, r1, lr}
 80014c8:	4601      	mov	r1, r0
 80014ca:	ab03      	add	r3, sp, #12
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <fiprintf+0x20>)
 80014ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80014d2:	6800      	ldr	r0, [r0, #0]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	f000 f8dd 	bl	8001694 <_vfiprintf_r>
 80014da:	b002      	add	sp, #8
 80014dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80014e0:	b003      	add	sp, #12
 80014e2:	4770      	bx	lr
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <malloc>:
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <malloc+0xc>)
 80014ea:	4601      	mov	r1, r0
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f000 b84f 	b.w	8001590 <_malloc_r>
 80014f2:	bf00      	nop
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <_free_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4605      	mov	r5, r0
 80014fc:	2900      	cmp	r1, #0
 80014fe:	d043      	beq.n	8001588 <_free_r+0x90>
 8001500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001504:	1f0c      	subs	r4, r1, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	bfb8      	it	lt
 800150a:	18e4      	addlt	r4, r4, r3
 800150c:	f000 fe8c 	bl	8002228 <__malloc_lock>
 8001510:	4a1e      	ldr	r2, [pc, #120]	; (800158c <_free_r+0x94>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	4610      	mov	r0, r2
 8001516:	b933      	cbnz	r3, 8001526 <_free_r+0x2e>
 8001518:	6063      	str	r3, [r4, #4]
 800151a:	6014      	str	r4, [r2, #0]
 800151c:	4628      	mov	r0, r5
 800151e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001522:	f000 be87 	b.w	8002234 <__malloc_unlock>
 8001526:	42a3      	cmp	r3, r4
 8001528:	d90a      	bls.n	8001540 <_free_r+0x48>
 800152a:	6821      	ldr	r1, [r4, #0]
 800152c:	1862      	adds	r2, r4, r1
 800152e:	4293      	cmp	r3, r2
 8001530:	bf01      	itttt	eq
 8001532:	681a      	ldreq	r2, [r3, #0]
 8001534:	685b      	ldreq	r3, [r3, #4]
 8001536:	1852      	addeq	r2, r2, r1
 8001538:	6022      	streq	r2, [r4, #0]
 800153a:	6063      	str	r3, [r4, #4]
 800153c:	6004      	str	r4, [r0, #0]
 800153e:	e7ed      	b.n	800151c <_free_r+0x24>
 8001540:	461a      	mov	r2, r3
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	b10b      	cbz	r3, 800154a <_free_r+0x52>
 8001546:	42a3      	cmp	r3, r4
 8001548:	d9fa      	bls.n	8001540 <_free_r+0x48>
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	1850      	adds	r0, r2, r1
 800154e:	42a0      	cmp	r0, r4
 8001550:	d10b      	bne.n	800156a <_free_r+0x72>
 8001552:	6820      	ldr	r0, [r4, #0]
 8001554:	4401      	add	r1, r0
 8001556:	1850      	adds	r0, r2, r1
 8001558:	4283      	cmp	r3, r0
 800155a:	6011      	str	r1, [r2, #0]
 800155c:	d1de      	bne.n	800151c <_free_r+0x24>
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4401      	add	r1, r0
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	6053      	str	r3, [r2, #4]
 8001568:	e7d8      	b.n	800151c <_free_r+0x24>
 800156a:	d902      	bls.n	8001572 <_free_r+0x7a>
 800156c:	230c      	movs	r3, #12
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	e7d4      	b.n	800151c <_free_r+0x24>
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	1821      	adds	r1, r4, r0
 8001576:	428b      	cmp	r3, r1
 8001578:	bf01      	itttt	eq
 800157a:	6819      	ldreq	r1, [r3, #0]
 800157c:	685b      	ldreq	r3, [r3, #4]
 800157e:	1809      	addeq	r1, r1, r0
 8001580:	6021      	streq	r1, [r4, #0]
 8001582:	6063      	str	r3, [r4, #4]
 8001584:	6054      	str	r4, [r2, #4]
 8001586:	e7c9      	b.n	800151c <_free_r+0x24>
 8001588:	bd38      	pop	{r3, r4, r5, pc}
 800158a:	bf00      	nop
 800158c:	20000090 	.word	0x20000090

08001590 <_malloc_r>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	1ccd      	adds	r5, r1, #3
 8001594:	f025 0503 	bic.w	r5, r5, #3
 8001598:	3508      	adds	r5, #8
 800159a:	2d0c      	cmp	r5, #12
 800159c:	bf38      	it	cc
 800159e:	250c      	movcc	r5, #12
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	4606      	mov	r6, r0
 80015a4:	db01      	blt.n	80015aa <_malloc_r+0x1a>
 80015a6:	42a9      	cmp	r1, r5
 80015a8:	d903      	bls.n	80015b2 <_malloc_r+0x22>
 80015aa:	230c      	movs	r3, #12
 80015ac:	6033      	str	r3, [r6, #0]
 80015ae:	2000      	movs	r0, #0
 80015b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b2:	f000 fe39 	bl	8002228 <__malloc_lock>
 80015b6:	4921      	ldr	r1, [pc, #132]	; (800163c <_malloc_r+0xac>)
 80015b8:	680a      	ldr	r2, [r1, #0]
 80015ba:	4614      	mov	r4, r2
 80015bc:	b99c      	cbnz	r4, 80015e6 <_malloc_r+0x56>
 80015be:	4f20      	ldr	r7, [pc, #128]	; (8001640 <_malloc_r+0xb0>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b923      	cbnz	r3, 80015ce <_malloc_r+0x3e>
 80015c4:	4621      	mov	r1, r4
 80015c6:	4630      	mov	r0, r6
 80015c8:	f000 fb2a 	bl	8001c20 <_sbrk_r>
 80015cc:	6038      	str	r0, [r7, #0]
 80015ce:	4629      	mov	r1, r5
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 fb25 	bl	8001c20 <_sbrk_r>
 80015d6:	1c43      	adds	r3, r0, #1
 80015d8:	d123      	bne.n	8001622 <_malloc_r+0x92>
 80015da:	230c      	movs	r3, #12
 80015dc:	4630      	mov	r0, r6
 80015de:	6033      	str	r3, [r6, #0]
 80015e0:	f000 fe28 	bl	8002234 <__malloc_unlock>
 80015e4:	e7e3      	b.n	80015ae <_malloc_r+0x1e>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	1b5b      	subs	r3, r3, r5
 80015ea:	d417      	bmi.n	800161c <_malloc_r+0x8c>
 80015ec:	2b0b      	cmp	r3, #11
 80015ee:	d903      	bls.n	80015f8 <_malloc_r+0x68>
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	441c      	add	r4, r3
 80015f4:	6025      	str	r5, [r4, #0]
 80015f6:	e004      	b.n	8001602 <_malloc_r+0x72>
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	42a2      	cmp	r2, r4
 80015fc:	bf0c      	ite	eq
 80015fe:	600b      	streq	r3, [r1, #0]
 8001600:	6053      	strne	r3, [r2, #4]
 8001602:	4630      	mov	r0, r6
 8001604:	f000 fe16 	bl	8002234 <__malloc_unlock>
 8001608:	f104 000b 	add.w	r0, r4, #11
 800160c:	1d23      	adds	r3, r4, #4
 800160e:	f020 0007 	bic.w	r0, r0, #7
 8001612:	1ac2      	subs	r2, r0, r3
 8001614:	d0cc      	beq.n	80015b0 <_malloc_r+0x20>
 8001616:	1a1b      	subs	r3, r3, r0
 8001618:	50a3      	str	r3, [r4, r2]
 800161a:	e7c9      	b.n	80015b0 <_malloc_r+0x20>
 800161c:	4622      	mov	r2, r4
 800161e:	6864      	ldr	r4, [r4, #4]
 8001620:	e7cc      	b.n	80015bc <_malloc_r+0x2c>
 8001622:	1cc4      	adds	r4, r0, #3
 8001624:	f024 0403 	bic.w	r4, r4, #3
 8001628:	42a0      	cmp	r0, r4
 800162a:	d0e3      	beq.n	80015f4 <_malloc_r+0x64>
 800162c:	1a21      	subs	r1, r4, r0
 800162e:	4630      	mov	r0, r6
 8001630:	f000 faf6 	bl	8001c20 <_sbrk_r>
 8001634:	3001      	adds	r0, #1
 8001636:	d1dd      	bne.n	80015f4 <_malloc_r+0x64>
 8001638:	e7cf      	b.n	80015da <_malloc_r+0x4a>
 800163a:	bf00      	nop
 800163c:	20000090 	.word	0x20000090
 8001640:	20000094 	.word	0x20000094

08001644 <__sfputc_r>:
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	b410      	push	{r4}
 8001648:	3b01      	subs	r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	6093      	str	r3, [r2, #8]
 800164e:	da07      	bge.n	8001660 <__sfputc_r+0x1c>
 8001650:	6994      	ldr	r4, [r2, #24]
 8001652:	42a3      	cmp	r3, r4
 8001654:	db01      	blt.n	800165a <__sfputc_r+0x16>
 8001656:	290a      	cmp	r1, #10
 8001658:	d102      	bne.n	8001660 <__sfputc_r+0x1c>
 800165a:	bc10      	pop	{r4}
 800165c:	f000 baf0 	b.w	8001c40 <__swbuf_r>
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	1c58      	adds	r0, r3, #1
 8001664:	6010      	str	r0, [r2, #0]
 8001666:	7019      	strb	r1, [r3, #0]
 8001668:	4608      	mov	r0, r1
 800166a:	bc10      	pop	{r4}
 800166c:	4770      	bx	lr

0800166e <__sfputs_r>:
 800166e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001670:	4606      	mov	r6, r0
 8001672:	460f      	mov	r7, r1
 8001674:	4614      	mov	r4, r2
 8001676:	18d5      	adds	r5, r2, r3
 8001678:	42ac      	cmp	r4, r5
 800167a:	d101      	bne.n	8001680 <__sfputs_r+0x12>
 800167c:	2000      	movs	r0, #0
 800167e:	e007      	b.n	8001690 <__sfputs_r+0x22>
 8001680:	463a      	mov	r2, r7
 8001682:	4630      	mov	r0, r6
 8001684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001688:	f7ff ffdc 	bl	8001644 <__sfputc_r>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d1f3      	bne.n	8001678 <__sfputs_r+0xa>
 8001690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001694 <_vfiprintf_r>:
 8001694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001698:	460d      	mov	r5, r1
 800169a:	4614      	mov	r4, r2
 800169c:	4698      	mov	r8, r3
 800169e:	4606      	mov	r6, r0
 80016a0:	b09d      	sub	sp, #116	; 0x74
 80016a2:	b118      	cbz	r0, 80016ac <_vfiprintf_r+0x18>
 80016a4:	6983      	ldr	r3, [r0, #24]
 80016a6:	b90b      	cbnz	r3, 80016ac <_vfiprintf_r+0x18>
 80016a8:	f000 fcac 	bl	8002004 <__sinit>
 80016ac:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <_vfiprintf_r+0x240>)
 80016ae:	429d      	cmp	r5, r3
 80016b0:	d11b      	bne.n	80016ea <_vfiprintf_r+0x56>
 80016b2:	6875      	ldr	r5, [r6, #4]
 80016b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016b6:	07d9      	lsls	r1, r3, #31
 80016b8:	d405      	bmi.n	80016c6 <_vfiprintf_r+0x32>
 80016ba:	89ab      	ldrh	r3, [r5, #12]
 80016bc:	059a      	lsls	r2, r3, #22
 80016be:	d402      	bmi.n	80016c6 <_vfiprintf_r+0x32>
 80016c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016c2:	f000 fd3d 	bl	8002140 <__retarget_lock_acquire_recursive>
 80016c6:	89ab      	ldrh	r3, [r5, #12]
 80016c8:	071b      	lsls	r3, r3, #28
 80016ca:	d501      	bpl.n	80016d0 <_vfiprintf_r+0x3c>
 80016cc:	692b      	ldr	r3, [r5, #16]
 80016ce:	b9eb      	cbnz	r3, 800170c <_vfiprintf_r+0x78>
 80016d0:	4629      	mov	r1, r5
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 fb06 	bl	8001ce4 <__swsetup_r>
 80016d8:	b1c0      	cbz	r0, 800170c <_vfiprintf_r+0x78>
 80016da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016dc:	07dc      	lsls	r4, r3, #31
 80016de:	d50e      	bpl.n	80016fe <_vfiprintf_r+0x6a>
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	b01d      	add	sp, #116	; 0x74
 80016e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ea:	4b7b      	ldr	r3, [pc, #492]	; (80018d8 <_vfiprintf_r+0x244>)
 80016ec:	429d      	cmp	r5, r3
 80016ee:	d101      	bne.n	80016f4 <_vfiprintf_r+0x60>
 80016f0:	68b5      	ldr	r5, [r6, #8]
 80016f2:	e7df      	b.n	80016b4 <_vfiprintf_r+0x20>
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <_vfiprintf_r+0x248>)
 80016f6:	429d      	cmp	r5, r3
 80016f8:	bf08      	it	eq
 80016fa:	68f5      	ldreq	r5, [r6, #12]
 80016fc:	e7da      	b.n	80016b4 <_vfiprintf_r+0x20>
 80016fe:	89ab      	ldrh	r3, [r5, #12]
 8001700:	0598      	lsls	r0, r3, #22
 8001702:	d4ed      	bmi.n	80016e0 <_vfiprintf_r+0x4c>
 8001704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001706:	f000 fd1c 	bl	8002142 <__retarget_lock_release_recursive>
 800170a:	e7e9      	b.n	80016e0 <_vfiprintf_r+0x4c>
 800170c:	2300      	movs	r3, #0
 800170e:	9309      	str	r3, [sp, #36]	; 0x24
 8001710:	2320      	movs	r3, #32
 8001712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	f04f 0901 	mov.w	r9, #1
 800171c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001720:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80018e0 <_vfiprintf_r+0x24c>
 8001724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001728:	4623      	mov	r3, r4
 800172a:	469a      	mov	sl, r3
 800172c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001730:	b10a      	cbz	r2, 8001736 <_vfiprintf_r+0xa2>
 8001732:	2a25      	cmp	r2, #37	; 0x25
 8001734:	d1f9      	bne.n	800172a <_vfiprintf_r+0x96>
 8001736:	ebba 0b04 	subs.w	fp, sl, r4
 800173a:	d00b      	beq.n	8001754 <_vfiprintf_r+0xc0>
 800173c:	465b      	mov	r3, fp
 800173e:	4622      	mov	r2, r4
 8001740:	4629      	mov	r1, r5
 8001742:	4630      	mov	r0, r6
 8001744:	f7ff ff93 	bl	800166e <__sfputs_r>
 8001748:	3001      	adds	r0, #1
 800174a:	f000 80aa 	beq.w	80018a2 <_vfiprintf_r+0x20e>
 800174e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001750:	445a      	add	r2, fp
 8001752:	9209      	str	r2, [sp, #36]	; 0x24
 8001754:	f89a 3000 	ldrb.w	r3, [sl]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a2 	beq.w	80018a2 <_vfiprintf_r+0x20e>
 800175e:	2300      	movs	r3, #0
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001768:	f10a 0a01 	add.w	sl, sl, #1
 800176c:	9304      	str	r3, [sp, #16]
 800176e:	9307      	str	r3, [sp, #28]
 8001770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001774:	931a      	str	r3, [sp, #104]	; 0x68
 8001776:	4654      	mov	r4, sl
 8001778:	2205      	movs	r2, #5
 800177a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800177e:	4858      	ldr	r0, [pc, #352]	; (80018e0 <_vfiprintf_r+0x24c>)
 8001780:	f000 fd44 	bl	800220c <memchr>
 8001784:	9a04      	ldr	r2, [sp, #16]
 8001786:	b9d8      	cbnz	r0, 80017c0 <_vfiprintf_r+0x12c>
 8001788:	06d1      	lsls	r1, r2, #27
 800178a:	bf44      	itt	mi
 800178c:	2320      	movmi	r3, #32
 800178e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001792:	0713      	lsls	r3, r2, #28
 8001794:	bf44      	itt	mi
 8001796:	232b      	movmi	r3, #43	; 0x2b
 8001798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800179c:	f89a 3000 	ldrb.w	r3, [sl]
 80017a0:	2b2a      	cmp	r3, #42	; 0x2a
 80017a2:	d015      	beq.n	80017d0 <_vfiprintf_r+0x13c>
 80017a4:	4654      	mov	r4, sl
 80017a6:	2000      	movs	r0, #0
 80017a8:	f04f 0c0a 	mov.w	ip, #10
 80017ac:	9a07      	ldr	r2, [sp, #28]
 80017ae:	4621      	mov	r1, r4
 80017b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017b4:	3b30      	subs	r3, #48	; 0x30
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	d94e      	bls.n	8001858 <_vfiprintf_r+0x1c4>
 80017ba:	b1b0      	cbz	r0, 80017ea <_vfiprintf_r+0x156>
 80017bc:	9207      	str	r2, [sp, #28]
 80017be:	e014      	b.n	80017ea <_vfiprintf_r+0x156>
 80017c0:	eba0 0308 	sub.w	r3, r0, r8
 80017c4:	fa09 f303 	lsl.w	r3, r9, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	46a2      	mov	sl, r4
 80017cc:	9304      	str	r3, [sp, #16]
 80017ce:	e7d2      	b.n	8001776 <_vfiprintf_r+0xe2>
 80017d0:	9b03      	ldr	r3, [sp, #12]
 80017d2:	1d19      	adds	r1, r3, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	9103      	str	r1, [sp, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfbb      	ittet	lt
 80017dc:	425b      	neglt	r3, r3
 80017de:	f042 0202 	orrlt.w	r2, r2, #2
 80017e2:	9307      	strge	r3, [sp, #28]
 80017e4:	9307      	strlt	r3, [sp, #28]
 80017e6:	bfb8      	it	lt
 80017e8:	9204      	strlt	r2, [sp, #16]
 80017ea:	7823      	ldrb	r3, [r4, #0]
 80017ec:	2b2e      	cmp	r3, #46	; 0x2e
 80017ee:	d10c      	bne.n	800180a <_vfiprintf_r+0x176>
 80017f0:	7863      	ldrb	r3, [r4, #1]
 80017f2:	2b2a      	cmp	r3, #42	; 0x2a
 80017f4:	d135      	bne.n	8001862 <_vfiprintf_r+0x1ce>
 80017f6:	9b03      	ldr	r3, [sp, #12]
 80017f8:	3402      	adds	r4, #2
 80017fa:	1d1a      	adds	r2, r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	9203      	str	r2, [sp, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfb8      	it	lt
 8001804:	f04f 33ff 	movlt.w	r3, #4294967295
 8001808:	9305      	str	r3, [sp, #20]
 800180a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80018f0 <_vfiprintf_r+0x25c>
 800180e:	2203      	movs	r2, #3
 8001810:	4650      	mov	r0, sl
 8001812:	7821      	ldrb	r1, [r4, #0]
 8001814:	f000 fcfa 	bl	800220c <memchr>
 8001818:	b140      	cbz	r0, 800182c <_vfiprintf_r+0x198>
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	eba0 000a 	sub.w	r0, r0, sl
 8001820:	fa03 f000 	lsl.w	r0, r3, r0
 8001824:	9b04      	ldr	r3, [sp, #16]
 8001826:	3401      	adds	r4, #1
 8001828:	4303      	orrs	r3, r0
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001830:	2206      	movs	r2, #6
 8001832:	482c      	ldr	r0, [pc, #176]	; (80018e4 <_vfiprintf_r+0x250>)
 8001834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001838:	f000 fce8 	bl	800220c <memchr>
 800183c:	2800      	cmp	r0, #0
 800183e:	d03f      	beq.n	80018c0 <_vfiprintf_r+0x22c>
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <_vfiprintf_r+0x254>)
 8001842:	bb1b      	cbnz	r3, 800188c <_vfiprintf_r+0x1f8>
 8001844:	9b03      	ldr	r3, [sp, #12]
 8001846:	3307      	adds	r3, #7
 8001848:	f023 0307 	bic.w	r3, r3, #7
 800184c:	3308      	adds	r3, #8
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001852:	443b      	add	r3, r7
 8001854:	9309      	str	r3, [sp, #36]	; 0x24
 8001856:	e767      	b.n	8001728 <_vfiprintf_r+0x94>
 8001858:	460c      	mov	r4, r1
 800185a:	2001      	movs	r0, #1
 800185c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001860:	e7a5      	b.n	80017ae <_vfiprintf_r+0x11a>
 8001862:	2300      	movs	r3, #0
 8001864:	f04f 0c0a 	mov.w	ip, #10
 8001868:	4619      	mov	r1, r3
 800186a:	3401      	adds	r4, #1
 800186c:	9305      	str	r3, [sp, #20]
 800186e:	4620      	mov	r0, r4
 8001870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001874:	3a30      	subs	r2, #48	; 0x30
 8001876:	2a09      	cmp	r2, #9
 8001878:	d903      	bls.n	8001882 <_vfiprintf_r+0x1ee>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0c5      	beq.n	800180a <_vfiprintf_r+0x176>
 800187e:	9105      	str	r1, [sp, #20]
 8001880:	e7c3      	b.n	800180a <_vfiprintf_r+0x176>
 8001882:	4604      	mov	r4, r0
 8001884:	2301      	movs	r3, #1
 8001886:	fb0c 2101 	mla	r1, ip, r1, r2
 800188a:	e7f0      	b.n	800186e <_vfiprintf_r+0x1da>
 800188c:	ab03      	add	r3, sp, #12
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	462a      	mov	r2, r5
 8001892:	4630      	mov	r0, r6
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_vfiprintf_r+0x258>)
 8001896:	a904      	add	r1, sp, #16
 8001898:	f3af 8000 	nop.w
 800189c:	4607      	mov	r7, r0
 800189e:	1c78      	adds	r0, r7, #1
 80018a0:	d1d6      	bne.n	8001850 <_vfiprintf_r+0x1bc>
 80018a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018a4:	07d9      	lsls	r1, r3, #31
 80018a6:	d405      	bmi.n	80018b4 <_vfiprintf_r+0x220>
 80018a8:	89ab      	ldrh	r3, [r5, #12]
 80018aa:	059a      	lsls	r2, r3, #22
 80018ac:	d402      	bmi.n	80018b4 <_vfiprintf_r+0x220>
 80018ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018b0:	f000 fc47 	bl	8002142 <__retarget_lock_release_recursive>
 80018b4:	89ab      	ldrh	r3, [r5, #12]
 80018b6:	065b      	lsls	r3, r3, #25
 80018b8:	f53f af12 	bmi.w	80016e0 <_vfiprintf_r+0x4c>
 80018bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018be:	e711      	b.n	80016e4 <_vfiprintf_r+0x50>
 80018c0:	ab03      	add	r3, sp, #12
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462a      	mov	r2, r5
 80018c6:	4630      	mov	r0, r6
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_vfiprintf_r+0x258>)
 80018ca:	a904      	add	r1, sp, #16
 80018cc:	f000 f882 	bl	80019d4 <_printf_i>
 80018d0:	e7e4      	b.n	800189c <_vfiprintf_r+0x208>
 80018d2:	bf00      	nop
 80018d4:	08002568 	.word	0x08002568
 80018d8:	08002588 	.word	0x08002588
 80018dc:	08002548 	.word	0x08002548
 80018e0:	08002512 	.word	0x08002512
 80018e4:	0800251c 	.word	0x0800251c
 80018e8:	00000000 	.word	0x00000000
 80018ec:	0800166f 	.word	0x0800166f
 80018f0:	08002518 	.word	0x08002518

080018f4 <_printf_common>:
 80018f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f8:	4616      	mov	r6, r2
 80018fa:	4699      	mov	r9, r3
 80018fc:	688a      	ldr	r2, [r1, #8]
 80018fe:	690b      	ldr	r3, [r1, #16]
 8001900:	4607      	mov	r7, r0
 8001902:	4293      	cmp	r3, r2
 8001904:	bfb8      	it	lt
 8001906:	4613      	movlt	r3, r2
 8001908:	6033      	str	r3, [r6, #0]
 800190a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800190e:	460c      	mov	r4, r1
 8001910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001914:	b10a      	cbz	r2, 800191a <_printf_common+0x26>
 8001916:	3301      	adds	r3, #1
 8001918:	6033      	str	r3, [r6, #0]
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	0699      	lsls	r1, r3, #26
 800191e:	bf42      	ittt	mi
 8001920:	6833      	ldrmi	r3, [r6, #0]
 8001922:	3302      	addmi	r3, #2
 8001924:	6033      	strmi	r3, [r6, #0]
 8001926:	6825      	ldr	r5, [r4, #0]
 8001928:	f015 0506 	ands.w	r5, r5, #6
 800192c:	d106      	bne.n	800193c <_printf_common+0x48>
 800192e:	f104 0a19 	add.w	sl, r4, #25
 8001932:	68e3      	ldr	r3, [r4, #12]
 8001934:	6832      	ldr	r2, [r6, #0]
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	42ab      	cmp	r3, r5
 800193a:	dc28      	bgt.n	800198e <_printf_common+0x9a>
 800193c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001940:	1e13      	subs	r3, r2, #0
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	bf18      	it	ne
 8001946:	2301      	movne	r3, #1
 8001948:	0692      	lsls	r2, r2, #26
 800194a:	d42d      	bmi.n	80019a8 <_printf_common+0xb4>
 800194c:	4649      	mov	r1, r9
 800194e:	4638      	mov	r0, r7
 8001950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001954:	47c0      	blx	r8
 8001956:	3001      	adds	r0, #1
 8001958:	d020      	beq.n	800199c <_printf_common+0xa8>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	68e5      	ldr	r5, [r4, #12]
 800195e:	f003 0306 	and.w	r3, r3, #6
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf18      	it	ne
 8001966:	2500      	movne	r5, #0
 8001968:	6832      	ldr	r2, [r6, #0]
 800196a:	f04f 0600 	mov.w	r6, #0
 800196e:	68a3      	ldr	r3, [r4, #8]
 8001970:	bf08      	it	eq
 8001972:	1aad      	subeq	r5, r5, r2
 8001974:	6922      	ldr	r2, [r4, #16]
 8001976:	bf08      	it	eq
 8001978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800197c:	4293      	cmp	r3, r2
 800197e:	bfc4      	itt	gt
 8001980:	1a9b      	subgt	r3, r3, r2
 8001982:	18ed      	addgt	r5, r5, r3
 8001984:	341a      	adds	r4, #26
 8001986:	42b5      	cmp	r5, r6
 8001988:	d11a      	bne.n	80019c0 <_printf_common+0xcc>
 800198a:	2000      	movs	r0, #0
 800198c:	e008      	b.n	80019a0 <_printf_common+0xac>
 800198e:	2301      	movs	r3, #1
 8001990:	4652      	mov	r2, sl
 8001992:	4649      	mov	r1, r9
 8001994:	4638      	mov	r0, r7
 8001996:	47c0      	blx	r8
 8001998:	3001      	adds	r0, #1
 800199a:	d103      	bne.n	80019a4 <_printf_common+0xb0>
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7c4      	b.n	8001932 <_printf_common+0x3e>
 80019a8:	2030      	movs	r0, #48	; 0x30
 80019aa:	18e1      	adds	r1, r4, r3
 80019ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019b6:	4422      	add	r2, r4
 80019b8:	3302      	adds	r3, #2
 80019ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019be:	e7c5      	b.n	800194c <_printf_common+0x58>
 80019c0:	2301      	movs	r3, #1
 80019c2:	4622      	mov	r2, r4
 80019c4:	4649      	mov	r1, r9
 80019c6:	4638      	mov	r0, r7
 80019c8:	47c0      	blx	r8
 80019ca:	3001      	adds	r0, #1
 80019cc:	d0e6      	beq.n	800199c <_printf_common+0xa8>
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7d9      	b.n	8001986 <_printf_common+0x92>
	...

080019d4 <_printf_i>:
 80019d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d8:	460c      	mov	r4, r1
 80019da:	7e27      	ldrb	r7, [r4, #24]
 80019dc:	4691      	mov	r9, r2
 80019de:	2f78      	cmp	r7, #120	; 0x78
 80019e0:	4680      	mov	r8, r0
 80019e2:	469a      	mov	sl, r3
 80019e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ea:	d807      	bhi.n	80019fc <_printf_i+0x28>
 80019ec:	2f62      	cmp	r7, #98	; 0x62
 80019ee:	d80a      	bhi.n	8001a06 <_printf_i+0x32>
 80019f0:	2f00      	cmp	r7, #0
 80019f2:	f000 80d9 	beq.w	8001ba8 <_printf_i+0x1d4>
 80019f6:	2f58      	cmp	r7, #88	; 0x58
 80019f8:	f000 80a4 	beq.w	8001b44 <_printf_i+0x170>
 80019fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a04:	e03a      	b.n	8001a7c <_printf_i+0xa8>
 8001a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a0a:	2b15      	cmp	r3, #21
 8001a0c:	d8f6      	bhi.n	80019fc <_printf_i+0x28>
 8001a0e:	a001      	add	r0, pc, #4	; (adr r0, 8001a14 <_printf_i+0x40>)
 8001a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a14:	08001a6d 	.word	0x08001a6d
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	080019fd 	.word	0x080019fd
 8001a20:	080019fd 	.word	0x080019fd
 8001a24:	080019fd 	.word	0x080019fd
 8001a28:	080019fd 	.word	0x080019fd
 8001a2c:	08001a81 	.word	0x08001a81
 8001a30:	080019fd 	.word	0x080019fd
 8001a34:	080019fd 	.word	0x080019fd
 8001a38:	080019fd 	.word	0x080019fd
 8001a3c:	080019fd 	.word	0x080019fd
 8001a40:	08001b8f 	.word	0x08001b8f
 8001a44:	08001ab1 	.word	0x08001ab1
 8001a48:	08001b71 	.word	0x08001b71
 8001a4c:	080019fd 	.word	0x080019fd
 8001a50:	080019fd 	.word	0x080019fd
 8001a54:	08001bb1 	.word	0x08001bb1
 8001a58:	080019fd 	.word	0x080019fd
 8001a5c:	08001ab1 	.word	0x08001ab1
 8001a60:	080019fd 	.word	0x080019fd
 8001a64:	080019fd 	.word	0x080019fd
 8001a68:	08001b79 	.word	0x08001b79
 8001a6c:	680b      	ldr	r3, [r1, #0]
 8001a6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a72:	1d1a      	adds	r2, r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	600a      	str	r2, [r1, #0]
 8001a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0a4      	b.n	8001bca <_printf_i+0x1f6>
 8001a80:	6825      	ldr	r5, [r4, #0]
 8001a82:	6808      	ldr	r0, [r1, #0]
 8001a84:	062e      	lsls	r6, r5, #24
 8001a86:	f100 0304 	add.w	r3, r0, #4
 8001a8a:	d50a      	bpl.n	8001aa2 <_printf_i+0xce>
 8001a8c:	6805      	ldr	r5, [r0, #0]
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	da03      	bge.n	8001a9c <_printf_i+0xc8>
 8001a94:	232d      	movs	r3, #45	; 0x2d
 8001a96:	426d      	negs	r5, r5
 8001a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	485e      	ldr	r0, [pc, #376]	; (8001c18 <_printf_i+0x244>)
 8001aa0:	e019      	b.n	8001ad6 <_printf_i+0x102>
 8001aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001aa6:	6805      	ldr	r5, [r0, #0]
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	bf18      	it	ne
 8001aac:	b22d      	sxthne	r5, r5
 8001aae:	e7ef      	b.n	8001a90 <_printf_i+0xbc>
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	1d18      	adds	r0, r3, #4
 8001ab6:	6008      	str	r0, [r1, #0]
 8001ab8:	0628      	lsls	r0, r5, #24
 8001aba:	d501      	bpl.n	8001ac0 <_printf_i+0xec>
 8001abc:	681d      	ldr	r5, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <_printf_i+0xf2>
 8001ac0:	0669      	lsls	r1, r5, #25
 8001ac2:	d5fb      	bpl.n	8001abc <_printf_i+0xe8>
 8001ac4:	881d      	ldrh	r5, [r3, #0]
 8001ac6:	2f6f      	cmp	r7, #111	; 0x6f
 8001ac8:	bf0c      	ite	eq
 8001aca:	2308      	moveq	r3, #8
 8001acc:	230a      	movne	r3, #10
 8001ace:	4852      	ldr	r0, [pc, #328]	; (8001c18 <_printf_i+0x244>)
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ad6:	6866      	ldr	r6, [r4, #4]
 8001ad8:	2e00      	cmp	r6, #0
 8001ada:	bfa8      	it	ge
 8001adc:	6821      	ldrge	r1, [r4, #0]
 8001ade:	60a6      	str	r6, [r4, #8]
 8001ae0:	bfa4      	itt	ge
 8001ae2:	f021 0104 	bicge.w	r1, r1, #4
 8001ae6:	6021      	strge	r1, [r4, #0]
 8001ae8:	b90d      	cbnz	r5, 8001aee <_printf_i+0x11a>
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d04d      	beq.n	8001b8a <_printf_i+0x1b6>
 8001aee:	4616      	mov	r6, r2
 8001af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001af4:	fb03 5711 	mls	r7, r3, r1, r5
 8001af8:	5dc7      	ldrb	r7, [r0, r7]
 8001afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001afe:	462f      	mov	r7, r5
 8001b00:	42bb      	cmp	r3, r7
 8001b02:	460d      	mov	r5, r1
 8001b04:	d9f4      	bls.n	8001af0 <_printf_i+0x11c>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d10b      	bne.n	8001b22 <_printf_i+0x14e>
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	07df      	lsls	r7, r3, #31
 8001b0e:	d508      	bpl.n	8001b22 <_printf_i+0x14e>
 8001b10:	6923      	ldr	r3, [r4, #16]
 8001b12:	6861      	ldr	r1, [r4, #4]
 8001b14:	4299      	cmp	r1, r3
 8001b16:	bfde      	ittt	le
 8001b18:	2330      	movle	r3, #48	; 0x30
 8001b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b22:	1b92      	subs	r2, r2, r6
 8001b24:	6122      	str	r2, [r4, #16]
 8001b26:	464b      	mov	r3, r9
 8001b28:	4621      	mov	r1, r4
 8001b2a:	4640      	mov	r0, r8
 8001b2c:	f8cd a000 	str.w	sl, [sp]
 8001b30:	aa03      	add	r2, sp, #12
 8001b32:	f7ff fedf 	bl	80018f4 <_printf_common>
 8001b36:	3001      	adds	r0, #1
 8001b38:	d14c      	bne.n	8001bd4 <_printf_i+0x200>
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3e:	b004      	add	sp, #16
 8001b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b44:	4834      	ldr	r0, [pc, #208]	; (8001c18 <_printf_i+0x244>)
 8001b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b4a:	680e      	ldr	r6, [r1, #0]
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b52:	061f      	lsls	r7, r3, #24
 8001b54:	600e      	str	r6, [r1, #0]
 8001b56:	d514      	bpl.n	8001b82 <_printf_i+0x1ae>
 8001b58:	07d9      	lsls	r1, r3, #31
 8001b5a:	bf44      	itt	mi
 8001b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8001b60:	6023      	strmi	r3, [r4, #0]
 8001b62:	b91d      	cbnz	r5, 8001b6c <_printf_i+0x198>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f023 0320 	bic.w	r3, r3, #32
 8001b6a:	6023      	str	r3, [r4, #0]
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	e7af      	b.n	8001ad0 <_printf_i+0xfc>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f043 0320 	orr.w	r3, r3, #32
 8001b76:	6023      	str	r3, [r4, #0]
 8001b78:	2378      	movs	r3, #120	; 0x78
 8001b7a:	4828      	ldr	r0, [pc, #160]	; (8001c1c <_printf_i+0x248>)
 8001b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b80:	e7e3      	b.n	8001b4a <_printf_i+0x176>
 8001b82:	065e      	lsls	r6, r3, #25
 8001b84:	bf48      	it	mi
 8001b86:	b2ad      	uxthmi	r5, r5
 8001b88:	e7e6      	b.n	8001b58 <_printf_i+0x184>
 8001b8a:	4616      	mov	r6, r2
 8001b8c:	e7bb      	b.n	8001b06 <_printf_i+0x132>
 8001b8e:	680b      	ldr	r3, [r1, #0]
 8001b90:	6826      	ldr	r6, [r4, #0]
 8001b92:	1d1d      	adds	r5, r3, #4
 8001b94:	6960      	ldr	r0, [r4, #20]
 8001b96:	600d      	str	r5, [r1, #0]
 8001b98:	0635      	lsls	r5, r6, #24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	d501      	bpl.n	8001ba2 <_printf_i+0x1ce>
 8001b9e:	6018      	str	r0, [r3, #0]
 8001ba0:	e002      	b.n	8001ba8 <_printf_i+0x1d4>
 8001ba2:	0671      	lsls	r1, r6, #25
 8001ba4:	d5fb      	bpl.n	8001b9e <_printf_i+0x1ca>
 8001ba6:	8018      	strh	r0, [r3, #0]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4616      	mov	r6, r2
 8001bac:	6123      	str	r3, [r4, #16]
 8001bae:	e7ba      	b.n	8001b26 <_printf_i+0x152>
 8001bb0:	680b      	ldr	r3, [r1, #0]
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	600a      	str	r2, [r1, #0]
 8001bb6:	681e      	ldr	r6, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4630      	mov	r0, r6
 8001bbc:	6862      	ldr	r2, [r4, #4]
 8001bbe:	f000 fb25 	bl	800220c <memchr>
 8001bc2:	b108      	cbz	r0, 8001bc8 <_printf_i+0x1f4>
 8001bc4:	1b80      	subs	r0, r0, r6
 8001bc6:	6060      	str	r0, [r4, #4]
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	6123      	str	r3, [r4, #16]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bd2:	e7a8      	b.n	8001b26 <_printf_i+0x152>
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	4640      	mov	r0, r8
 8001bda:	6923      	ldr	r3, [r4, #16]
 8001bdc:	47d0      	blx	sl
 8001bde:	3001      	adds	r0, #1
 8001be0:	d0ab      	beq.n	8001b3a <_printf_i+0x166>
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	079b      	lsls	r3, r3, #30
 8001be6:	d413      	bmi.n	8001c10 <_printf_i+0x23c>
 8001be8:	68e0      	ldr	r0, [r4, #12]
 8001bea:	9b03      	ldr	r3, [sp, #12]
 8001bec:	4298      	cmp	r0, r3
 8001bee:	bfb8      	it	lt
 8001bf0:	4618      	movlt	r0, r3
 8001bf2:	e7a4      	b.n	8001b3e <_printf_i+0x16a>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	4632      	mov	r2, r6
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	47d0      	blx	sl
 8001bfe:	3001      	adds	r0, #1
 8001c00:	d09b      	beq.n	8001b3a <_printf_i+0x166>
 8001c02:	3501      	adds	r5, #1
 8001c04:	68e3      	ldr	r3, [r4, #12]
 8001c06:	9903      	ldr	r1, [sp, #12]
 8001c08:	1a5b      	subs	r3, r3, r1
 8001c0a:	42ab      	cmp	r3, r5
 8001c0c:	dcf2      	bgt.n	8001bf4 <_printf_i+0x220>
 8001c0e:	e7eb      	b.n	8001be8 <_printf_i+0x214>
 8001c10:	2500      	movs	r5, #0
 8001c12:	f104 0619 	add.w	r6, r4, #25
 8001c16:	e7f5      	b.n	8001c04 <_printf_i+0x230>
 8001c18:	08002523 	.word	0x08002523
 8001c1c:	08002534 	.word	0x08002534

08001c20 <_sbrk_r>:
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	2300      	movs	r3, #0
 8001c24:	4d05      	ldr	r5, [pc, #20]	; (8001c3c <_sbrk_r+0x1c>)
 8001c26:	4604      	mov	r4, r0
 8001c28:	4608      	mov	r0, r1
 8001c2a:	602b      	str	r3, [r5, #0]
 8001c2c:	f7fe fc80 	bl	8000530 <_sbrk>
 8001c30:	1c43      	adds	r3, r0, #1
 8001c32:	d102      	bne.n	8001c3a <_sbrk_r+0x1a>
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	b103      	cbz	r3, 8001c3a <_sbrk_r+0x1a>
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	200000a8 	.word	0x200000a8

08001c40 <__swbuf_r>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	460e      	mov	r6, r1
 8001c44:	4614      	mov	r4, r2
 8001c46:	4605      	mov	r5, r0
 8001c48:	b118      	cbz	r0, 8001c52 <__swbuf_r+0x12>
 8001c4a:	6983      	ldr	r3, [r0, #24]
 8001c4c:	b90b      	cbnz	r3, 8001c52 <__swbuf_r+0x12>
 8001c4e:	f000 f9d9 	bl	8002004 <__sinit>
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <__swbuf_r+0x98>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d12b      	bne.n	8001cb0 <__swbuf_r+0x70>
 8001c58:	686c      	ldr	r4, [r5, #4]
 8001c5a:	69a3      	ldr	r3, [r4, #24]
 8001c5c:	60a3      	str	r3, [r4, #8]
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	071a      	lsls	r2, r3, #28
 8001c62:	d52f      	bpl.n	8001cc4 <__swbuf_r+0x84>
 8001c64:	6923      	ldr	r3, [r4, #16]
 8001c66:	b36b      	cbz	r3, 8001cc4 <__swbuf_r+0x84>
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	b2f6      	uxtb	r6, r6
 8001c6e:	1ac0      	subs	r0, r0, r3
 8001c70:	6963      	ldr	r3, [r4, #20]
 8001c72:	4637      	mov	r7, r6
 8001c74:	4283      	cmp	r3, r0
 8001c76:	dc04      	bgt.n	8001c82 <__swbuf_r+0x42>
 8001c78:	4621      	mov	r1, r4
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 f92e 	bl	8001edc <_fflush_r>
 8001c80:	bb30      	cbnz	r0, 8001cd0 <__swbuf_r+0x90>
 8001c82:	68a3      	ldr	r3, [r4, #8]
 8001c84:	3001      	adds	r0, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60a3      	str	r3, [r4, #8]
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	6022      	str	r2, [r4, #0]
 8001c90:	701e      	strb	r6, [r3, #0]
 8001c92:	6963      	ldr	r3, [r4, #20]
 8001c94:	4283      	cmp	r3, r0
 8001c96:	d004      	beq.n	8001ca2 <__swbuf_r+0x62>
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	07db      	lsls	r3, r3, #31
 8001c9c:	d506      	bpl.n	8001cac <__swbuf_r+0x6c>
 8001c9e:	2e0a      	cmp	r6, #10
 8001ca0:	d104      	bne.n	8001cac <__swbuf_r+0x6c>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 f919 	bl	8001edc <_fflush_r>
 8001caa:	b988      	cbnz	r0, 8001cd0 <__swbuf_r+0x90>
 8001cac:	4638      	mov	r0, r7
 8001cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <__swbuf_r+0x9c>)
 8001cb2:	429c      	cmp	r4, r3
 8001cb4:	d101      	bne.n	8001cba <__swbuf_r+0x7a>
 8001cb6:	68ac      	ldr	r4, [r5, #8]
 8001cb8:	e7cf      	b.n	8001c5a <__swbuf_r+0x1a>
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <__swbuf_r+0xa0>)
 8001cbc:	429c      	cmp	r4, r3
 8001cbe:	bf08      	it	eq
 8001cc0:	68ec      	ldreq	r4, [r5, #12]
 8001cc2:	e7ca      	b.n	8001c5a <__swbuf_r+0x1a>
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f000 f80c 	bl	8001ce4 <__swsetup_r>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d0cb      	beq.n	8001c68 <__swbuf_r+0x28>
 8001cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8001cd4:	e7ea      	b.n	8001cac <__swbuf_r+0x6c>
 8001cd6:	bf00      	nop
 8001cd8:	08002568 	.word	0x08002568
 8001cdc:	08002588 	.word	0x08002588
 8001ce0:	08002548 	.word	0x08002548

08001ce4 <__swsetup_r>:
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <__swsetup_r+0xcc>)
 8001ce6:	b570      	push	{r4, r5, r6, lr}
 8001ce8:	681d      	ldr	r5, [r3, #0]
 8001cea:	4606      	mov	r6, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	b125      	cbz	r5, 8001cfa <__swsetup_r+0x16>
 8001cf0:	69ab      	ldr	r3, [r5, #24]
 8001cf2:	b913      	cbnz	r3, 8001cfa <__swsetup_r+0x16>
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f000 f985 	bl	8002004 <__sinit>
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <__swsetup_r+0xd0>)
 8001cfc:	429c      	cmp	r4, r3
 8001cfe:	d10f      	bne.n	8001d20 <__swsetup_r+0x3c>
 8001d00:	686c      	ldr	r4, [r5, #4]
 8001d02:	89a3      	ldrh	r3, [r4, #12]
 8001d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d08:	0719      	lsls	r1, r3, #28
 8001d0a:	d42c      	bmi.n	8001d66 <__swsetup_r+0x82>
 8001d0c:	06dd      	lsls	r5, r3, #27
 8001d0e:	d411      	bmi.n	8001d34 <__swsetup_r+0x50>
 8001d10:	2309      	movs	r3, #9
 8001d12:	6033      	str	r3, [r6, #0]
 8001d14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	81a3      	strh	r3, [r4, #12]
 8001d1e:	e03e      	b.n	8001d9e <__swsetup_r+0xba>
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <__swsetup_r+0xd4>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	d101      	bne.n	8001d2a <__swsetup_r+0x46>
 8001d26:	68ac      	ldr	r4, [r5, #8]
 8001d28:	e7eb      	b.n	8001d02 <__swsetup_r+0x1e>
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <__swsetup_r+0xd8>)
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	bf08      	it	eq
 8001d30:	68ec      	ldreq	r4, [r5, #12]
 8001d32:	e7e6      	b.n	8001d02 <__swsetup_r+0x1e>
 8001d34:	0758      	lsls	r0, r3, #29
 8001d36:	d512      	bpl.n	8001d5e <__swsetup_r+0x7a>
 8001d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d3a:	b141      	cbz	r1, 8001d4e <__swsetup_r+0x6a>
 8001d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d40:	4299      	cmp	r1, r3
 8001d42:	d002      	beq.n	8001d4a <__swsetup_r+0x66>
 8001d44:	4630      	mov	r0, r6
 8001d46:	f7ff fbd7 	bl	80014f8 <_free_r>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8001d4e:	89a3      	ldrh	r3, [r4, #12]
 8001d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d54:	81a3      	strh	r3, [r4, #12]
 8001d56:	2300      	movs	r3, #0
 8001d58:	6063      	str	r3, [r4, #4]
 8001d5a:	6923      	ldr	r3, [r4, #16]
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	6923      	ldr	r3, [r4, #16]
 8001d68:	b94b      	cbnz	r3, 8001d7e <__swsetup_r+0x9a>
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d74:	d003      	beq.n	8001d7e <__swsetup_r+0x9a>
 8001d76:	4621      	mov	r1, r4
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 fa07 	bl	800218c <__smakebuf_r>
 8001d7e:	89a0      	ldrh	r0, [r4, #12]
 8001d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d84:	f010 0301 	ands.w	r3, r0, #1
 8001d88:	d00a      	beq.n	8001da0 <__swsetup_r+0xbc>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60a3      	str	r3, [r4, #8]
 8001d8e:	6963      	ldr	r3, [r4, #20]
 8001d90:	425b      	negs	r3, r3
 8001d92:	61a3      	str	r3, [r4, #24]
 8001d94:	6923      	ldr	r3, [r4, #16]
 8001d96:	b943      	cbnz	r3, 8001daa <__swsetup_r+0xc6>
 8001d98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d9c:	d1ba      	bne.n	8001d14 <__swsetup_r+0x30>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	0781      	lsls	r1, r0, #30
 8001da2:	bf58      	it	pl
 8001da4:	6963      	ldrpl	r3, [r4, #20]
 8001da6:	60a3      	str	r3, [r4, #8]
 8001da8:	e7f4      	b.n	8001d94 <__swsetup_r+0xb0>
 8001daa:	2000      	movs	r0, #0
 8001dac:	e7f7      	b.n	8001d9e <__swsetup_r+0xba>
 8001dae:	bf00      	nop
 8001db0:	2000000c 	.word	0x2000000c
 8001db4:	08002568 	.word	0x08002568
 8001db8:	08002588 	.word	0x08002588
 8001dbc:	08002548 	.word	0x08002548

08001dc0 <abort>:
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	b508      	push	{r3, lr}
 8001dc4:	f000 fa64 	bl	8002290 <raise>
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7fe fb3d 	bl	8000448 <_exit>
	...

08001dd0 <__sflush_r>:
 8001dd0:	898a      	ldrh	r2, [r1, #12]
 8001dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd6:	4605      	mov	r5, r0
 8001dd8:	0710      	lsls	r0, r2, #28
 8001dda:	460c      	mov	r4, r1
 8001ddc:	d458      	bmi.n	8001e90 <__sflush_r+0xc0>
 8001dde:	684b      	ldr	r3, [r1, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dc05      	bgt.n	8001df0 <__sflush_r+0x20>
 8001de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dc02      	bgt.n	8001df0 <__sflush_r+0x20>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001df2:	2e00      	cmp	r6, #0
 8001df4:	d0f9      	beq.n	8001dea <__sflush_r+0x1a>
 8001df6:	2300      	movs	r3, #0
 8001df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001dfc:	682f      	ldr	r7, [r5, #0]
 8001dfe:	602b      	str	r3, [r5, #0]
 8001e00:	d032      	beq.n	8001e68 <__sflush_r+0x98>
 8001e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e04:	89a3      	ldrh	r3, [r4, #12]
 8001e06:	075a      	lsls	r2, r3, #29
 8001e08:	d505      	bpl.n	8001e16 <__sflush_r+0x46>
 8001e0a:	6863      	ldr	r3, [r4, #4]
 8001e0c:	1ac0      	subs	r0, r0, r3
 8001e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e10:	b10b      	cbz	r3, 8001e16 <__sflush_r+0x46>
 8001e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e14:	1ac0      	subs	r0, r0, r3
 8001e16:	2300      	movs	r3, #0
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	6a21      	ldr	r1, [r4, #32]
 8001e20:	47b0      	blx	r6
 8001e22:	1c43      	adds	r3, r0, #1
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	d106      	bne.n	8001e36 <__sflush_r+0x66>
 8001e28:	6829      	ldr	r1, [r5, #0]
 8001e2a:	291d      	cmp	r1, #29
 8001e2c:	d82c      	bhi.n	8001e88 <__sflush_r+0xb8>
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <__sflush_r+0x108>)
 8001e30:	40ca      	lsrs	r2, r1
 8001e32:	07d6      	lsls	r6, r2, #31
 8001e34:	d528      	bpl.n	8001e88 <__sflush_r+0xb8>
 8001e36:	2200      	movs	r2, #0
 8001e38:	6062      	str	r2, [r4, #4]
 8001e3a:	6922      	ldr	r2, [r4, #16]
 8001e3c:	04d9      	lsls	r1, r3, #19
 8001e3e:	6022      	str	r2, [r4, #0]
 8001e40:	d504      	bpl.n	8001e4c <__sflush_r+0x7c>
 8001e42:	1c42      	adds	r2, r0, #1
 8001e44:	d101      	bne.n	8001e4a <__sflush_r+0x7a>
 8001e46:	682b      	ldr	r3, [r5, #0]
 8001e48:	b903      	cbnz	r3, 8001e4c <__sflush_r+0x7c>
 8001e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8001e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4e:	602f      	str	r7, [r5, #0]
 8001e50:	2900      	cmp	r1, #0
 8001e52:	d0ca      	beq.n	8001dea <__sflush_r+0x1a>
 8001e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d002      	beq.n	8001e62 <__sflush_r+0x92>
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f7ff fb4b 	bl	80014f8 <_free_r>
 8001e62:	2000      	movs	r0, #0
 8001e64:	6360      	str	r0, [r4, #52]	; 0x34
 8001e66:	e7c1      	b.n	8001dec <__sflush_r+0x1c>
 8001e68:	6a21      	ldr	r1, [r4, #32]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	47b0      	blx	r6
 8001e70:	1c41      	adds	r1, r0, #1
 8001e72:	d1c7      	bne.n	8001e04 <__sflush_r+0x34>
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0c4      	beq.n	8001e04 <__sflush_r+0x34>
 8001e7a:	2b1d      	cmp	r3, #29
 8001e7c:	d001      	beq.n	8001e82 <__sflush_r+0xb2>
 8001e7e:	2b16      	cmp	r3, #22
 8001e80:	d101      	bne.n	8001e86 <__sflush_r+0xb6>
 8001e82:	602f      	str	r7, [r5, #0]
 8001e84:	e7b1      	b.n	8001dea <__sflush_r+0x1a>
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8c:	81a3      	strh	r3, [r4, #12]
 8001e8e:	e7ad      	b.n	8001dec <__sflush_r+0x1c>
 8001e90:	690f      	ldr	r7, [r1, #16]
 8001e92:	2f00      	cmp	r7, #0
 8001e94:	d0a9      	beq.n	8001dea <__sflush_r+0x1a>
 8001e96:	0793      	lsls	r3, r2, #30
 8001e98:	bf18      	it	ne
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	680e      	ldr	r6, [r1, #0]
 8001e9e:	bf08      	it	eq
 8001ea0:	694b      	ldreq	r3, [r1, #20]
 8001ea2:	eba6 0807 	sub.w	r8, r6, r7
 8001ea6:	600f      	str	r7, [r1, #0]
 8001ea8:	608b      	str	r3, [r1, #8]
 8001eaa:	f1b8 0f00 	cmp.w	r8, #0
 8001eae:	dd9c      	ble.n	8001dea <__sflush_r+0x1a>
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	463a      	mov	r2, r7
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	6a21      	ldr	r1, [r4, #32]
 8001eb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eba:	47b0      	blx	r6
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	dc06      	bgt.n	8001ece <__sflush_r+0xfe>
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	e78e      	b.n	8001dec <__sflush_r+0x1c>
 8001ece:	4407      	add	r7, r0
 8001ed0:	eba8 0800 	sub.w	r8, r8, r0
 8001ed4:	e7e9      	b.n	8001eaa <__sflush_r+0xda>
 8001ed6:	bf00      	nop
 8001ed8:	20400001 	.word	0x20400001

08001edc <_fflush_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	690b      	ldr	r3, [r1, #16]
 8001ee0:	4605      	mov	r5, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	b913      	cbnz	r3, 8001eec <_fflush_r+0x10>
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	4628      	mov	r0, r5
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	b118      	cbz	r0, 8001ef6 <_fflush_r+0x1a>
 8001eee:	6983      	ldr	r3, [r0, #24]
 8001ef0:	b90b      	cbnz	r3, 8001ef6 <_fflush_r+0x1a>
 8001ef2:	f000 f887 	bl	8002004 <__sinit>
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <_fflush_r+0x6c>)
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d11b      	bne.n	8001f34 <_fflush_r+0x58>
 8001efc:	686c      	ldr	r4, [r5, #4]
 8001efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <_fflush_r+0xa>
 8001f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f08:	07d0      	lsls	r0, r2, #31
 8001f0a:	d404      	bmi.n	8001f16 <_fflush_r+0x3a>
 8001f0c:	0599      	lsls	r1, r3, #22
 8001f0e:	d402      	bmi.n	8001f16 <_fflush_r+0x3a>
 8001f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f12:	f000 f915 	bl	8002140 <__retarget_lock_acquire_recursive>
 8001f16:	4628      	mov	r0, r5
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7ff ff59 	bl	8001dd0 <__sflush_r>
 8001f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f20:	4605      	mov	r5, r0
 8001f22:	07da      	lsls	r2, r3, #31
 8001f24:	d4e0      	bmi.n	8001ee8 <_fflush_r+0xc>
 8001f26:	89a3      	ldrh	r3, [r4, #12]
 8001f28:	059b      	lsls	r3, r3, #22
 8001f2a:	d4dd      	bmi.n	8001ee8 <_fflush_r+0xc>
 8001f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f2e:	f000 f908 	bl	8002142 <__retarget_lock_release_recursive>
 8001f32:	e7d9      	b.n	8001ee8 <_fflush_r+0xc>
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <_fflush_r+0x70>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d101      	bne.n	8001f3e <_fflush_r+0x62>
 8001f3a:	68ac      	ldr	r4, [r5, #8]
 8001f3c:	e7df      	b.n	8001efe <_fflush_r+0x22>
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <_fflush_r+0x74>)
 8001f40:	429c      	cmp	r4, r3
 8001f42:	bf08      	it	eq
 8001f44:	68ec      	ldreq	r4, [r5, #12]
 8001f46:	e7da      	b.n	8001efe <_fflush_r+0x22>
 8001f48:	08002568 	.word	0x08002568
 8001f4c:	08002588 	.word	0x08002588
 8001f50:	08002548 	.word	0x08002548

08001f54 <std>:
 8001f54:	2300      	movs	r3, #0
 8001f56:	b510      	push	{r4, lr}
 8001f58:	4604      	mov	r4, r0
 8001f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f62:	6083      	str	r3, [r0, #8]
 8001f64:	8181      	strh	r1, [r0, #12]
 8001f66:	6643      	str	r3, [r0, #100]	; 0x64
 8001f68:	81c2      	strh	r2, [r0, #14]
 8001f6a:	6183      	str	r3, [r0, #24]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	2208      	movs	r2, #8
 8001f70:	305c      	adds	r0, #92	; 0x5c
 8001f72:	f7ff fa41 	bl	80013f8 <memset>
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <std+0x38>)
 8001f78:	6224      	str	r4, [r4, #32]
 8001f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <std+0x3c>)
 8001f7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <std+0x40>)
 8001f82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <std+0x44>)
 8001f86:	6323      	str	r3, [r4, #48]	; 0x30
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	bf00      	nop
 8001f8c:	080022c9 	.word	0x080022c9
 8001f90:	080022eb 	.word	0x080022eb
 8001f94:	08002323 	.word	0x08002323
 8001f98:	08002347 	.word	0x08002347

08001f9c <_cleanup_r>:
 8001f9c:	4901      	ldr	r1, [pc, #4]	; (8001fa4 <_cleanup_r+0x8>)
 8001f9e:	f000 b8af 	b.w	8002100 <_fwalk_reent>
 8001fa2:	bf00      	nop
 8001fa4:	08001edd 	.word	0x08001edd

08001fa8 <__sfmoreglue>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	2568      	movs	r5, #104	; 0x68
 8001fac:	1e4a      	subs	r2, r1, #1
 8001fae:	4355      	muls	r5, r2
 8001fb0:	460e      	mov	r6, r1
 8001fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fb6:	f7ff faeb 	bl	8001590 <_malloc_r>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b140      	cbz	r0, 8001fd0 <__sfmoreglue+0x28>
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8001fc4:	300c      	adds	r0, #12
 8001fc6:	60a0      	str	r0, [r4, #8]
 8001fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fcc:	f7ff fa14 	bl	80013f8 <memset>
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}

08001fd4 <__sfp_lock_acquire>:
 8001fd4:	4801      	ldr	r0, [pc, #4]	; (8001fdc <__sfp_lock_acquire+0x8>)
 8001fd6:	f000 b8b3 	b.w	8002140 <__retarget_lock_acquire_recursive>
 8001fda:	bf00      	nop
 8001fdc:	200000a4 	.word	0x200000a4

08001fe0 <__sfp_lock_release>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <__sfp_lock_release+0x8>)
 8001fe2:	f000 b8ae 	b.w	8002142 <__retarget_lock_release_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	200000a4 	.word	0x200000a4

08001fec <__sinit_lock_acquire>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__sinit_lock_acquire+0x8>)
 8001fee:	f000 b8a7 	b.w	8002140 <__retarget_lock_acquire_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	2000009f 	.word	0x2000009f

08001ff8 <__sinit_lock_release>:
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <__sinit_lock_release+0x8>)
 8001ffa:	f000 b8a2 	b.w	8002142 <__retarget_lock_release_recursive>
 8001ffe:	bf00      	nop
 8002000:	2000009f 	.word	0x2000009f

08002004 <__sinit>:
 8002004:	b510      	push	{r4, lr}
 8002006:	4604      	mov	r4, r0
 8002008:	f7ff fff0 	bl	8001fec <__sinit_lock_acquire>
 800200c:	69a3      	ldr	r3, [r4, #24]
 800200e:	b11b      	cbz	r3, 8002018 <__sinit+0x14>
 8002010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002014:	f7ff bff0 	b.w	8001ff8 <__sinit_lock_release>
 8002018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800201c:	6523      	str	r3, [r4, #80]	; 0x50
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <__sinit+0x68>)
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <__sinit+0x6c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	62a2      	str	r2, [r4, #40]	; 0x28
 8002026:	42a3      	cmp	r3, r4
 8002028:	bf08      	it	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	4620      	mov	r0, r4
 800202e:	bf08      	it	eq
 8002030:	61a3      	streq	r3, [r4, #24]
 8002032:	f000 f81f 	bl	8002074 <__sfp>
 8002036:	6060      	str	r0, [r4, #4]
 8002038:	4620      	mov	r0, r4
 800203a:	f000 f81b 	bl	8002074 <__sfp>
 800203e:	60a0      	str	r0, [r4, #8]
 8002040:	4620      	mov	r0, r4
 8002042:	f000 f817 	bl	8002074 <__sfp>
 8002046:	2200      	movs	r2, #0
 8002048:	2104      	movs	r1, #4
 800204a:	60e0      	str	r0, [r4, #12]
 800204c:	6860      	ldr	r0, [r4, #4]
 800204e:	f7ff ff81 	bl	8001f54 <std>
 8002052:	2201      	movs	r2, #1
 8002054:	2109      	movs	r1, #9
 8002056:	68a0      	ldr	r0, [r4, #8]
 8002058:	f7ff ff7c 	bl	8001f54 <std>
 800205c:	2202      	movs	r2, #2
 800205e:	2112      	movs	r1, #18
 8002060:	68e0      	ldr	r0, [r4, #12]
 8002062:	f7ff ff77 	bl	8001f54 <std>
 8002066:	2301      	movs	r3, #1
 8002068:	61a3      	str	r3, [r4, #24]
 800206a:	e7d1      	b.n	8002010 <__sinit+0xc>
 800206c:	0800245c 	.word	0x0800245c
 8002070:	08001f9d 	.word	0x08001f9d

08002074 <__sfp>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	4607      	mov	r7, r0
 8002078:	f7ff ffac 	bl	8001fd4 <__sfp_lock_acquire>
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <__sfp+0x84>)
 800207e:	681e      	ldr	r6, [r3, #0]
 8002080:	69b3      	ldr	r3, [r6, #24]
 8002082:	b913      	cbnz	r3, 800208a <__sfp+0x16>
 8002084:	4630      	mov	r0, r6
 8002086:	f7ff ffbd 	bl	8002004 <__sinit>
 800208a:	3648      	adds	r6, #72	; 0x48
 800208c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002090:	3b01      	subs	r3, #1
 8002092:	d503      	bpl.n	800209c <__sfp+0x28>
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	b30b      	cbz	r3, 80020dc <__sfp+0x68>
 8002098:	6836      	ldr	r6, [r6, #0]
 800209a:	e7f7      	b.n	800208c <__sfp+0x18>
 800209c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020a0:	b9d5      	cbnz	r5, 80020d8 <__sfp+0x64>
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <__sfp+0x88>)
 80020a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020a8:	60e3      	str	r3, [r4, #12]
 80020aa:	6665      	str	r5, [r4, #100]	; 0x64
 80020ac:	f000 f847 	bl	800213e <__retarget_lock_init_recursive>
 80020b0:	f7ff ff96 	bl	8001fe0 <__sfp_lock_release>
 80020b4:	2208      	movs	r2, #8
 80020b6:	4629      	mov	r1, r5
 80020b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020c0:	6025      	str	r5, [r4, #0]
 80020c2:	61a5      	str	r5, [r4, #24]
 80020c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020c8:	f7ff f996 	bl	80013f8 <memset>
 80020cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020d4:	4620      	mov	r0, r4
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	3468      	adds	r4, #104	; 0x68
 80020da:	e7d9      	b.n	8002090 <__sfp+0x1c>
 80020dc:	2104      	movs	r1, #4
 80020de:	4638      	mov	r0, r7
 80020e0:	f7ff ff62 	bl	8001fa8 <__sfmoreglue>
 80020e4:	4604      	mov	r4, r0
 80020e6:	6030      	str	r0, [r6, #0]
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d1d5      	bne.n	8002098 <__sfp+0x24>
 80020ec:	f7ff ff78 	bl	8001fe0 <__sfp_lock_release>
 80020f0:	230c      	movs	r3, #12
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	e7ee      	b.n	80020d4 <__sfp+0x60>
 80020f6:	bf00      	nop
 80020f8:	0800245c 	.word	0x0800245c
 80020fc:	ffff0001 	.word	0xffff0001

08002100 <_fwalk_reent>:
 8002100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002104:	4606      	mov	r6, r0
 8002106:	4688      	mov	r8, r1
 8002108:	2700      	movs	r7, #0
 800210a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800210e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002112:	f1b9 0901 	subs.w	r9, r9, #1
 8002116:	d505      	bpl.n	8002124 <_fwalk_reent+0x24>
 8002118:	6824      	ldr	r4, [r4, #0]
 800211a:	2c00      	cmp	r4, #0
 800211c:	d1f7      	bne.n	800210e <_fwalk_reent+0xe>
 800211e:	4638      	mov	r0, r7
 8002120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002124:	89ab      	ldrh	r3, [r5, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d907      	bls.n	800213a <_fwalk_reent+0x3a>
 800212a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800212e:	3301      	adds	r3, #1
 8002130:	d003      	beq.n	800213a <_fwalk_reent+0x3a>
 8002132:	4629      	mov	r1, r5
 8002134:	4630      	mov	r0, r6
 8002136:	47c0      	blx	r8
 8002138:	4307      	orrs	r7, r0
 800213a:	3568      	adds	r5, #104	; 0x68
 800213c:	e7e9      	b.n	8002112 <_fwalk_reent+0x12>

0800213e <__retarget_lock_init_recursive>:
 800213e:	4770      	bx	lr

08002140 <__retarget_lock_acquire_recursive>:
 8002140:	4770      	bx	lr

08002142 <__retarget_lock_release_recursive>:
 8002142:	4770      	bx	lr

08002144 <__swhatbuf_r>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	460e      	mov	r6, r1
 8002148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214c:	4614      	mov	r4, r2
 800214e:	2900      	cmp	r1, #0
 8002150:	461d      	mov	r5, r3
 8002152:	b096      	sub	sp, #88	; 0x58
 8002154:	da07      	bge.n	8002166 <__swhatbuf_r+0x22>
 8002156:	2300      	movs	r3, #0
 8002158:	602b      	str	r3, [r5, #0]
 800215a:	89b3      	ldrh	r3, [r6, #12]
 800215c:	061a      	lsls	r2, r3, #24
 800215e:	d410      	bmi.n	8002182 <__swhatbuf_r+0x3e>
 8002160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002164:	e00e      	b.n	8002184 <__swhatbuf_r+0x40>
 8002166:	466a      	mov	r2, sp
 8002168:	f000 f914 	bl	8002394 <_fstat_r>
 800216c:	2800      	cmp	r0, #0
 800216e:	dbf2      	blt.n	8002156 <__swhatbuf_r+0x12>
 8002170:	9a01      	ldr	r2, [sp, #4]
 8002172:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002176:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800217a:	425a      	negs	r2, r3
 800217c:	415a      	adcs	r2, r3
 800217e:	602a      	str	r2, [r5, #0]
 8002180:	e7ee      	b.n	8002160 <__swhatbuf_r+0x1c>
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	2000      	movs	r0, #0
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	b016      	add	sp, #88	; 0x58
 800218a:	bd70      	pop	{r4, r5, r6, pc}

0800218c <__smakebuf_r>:
 800218c:	898b      	ldrh	r3, [r1, #12]
 800218e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002190:	079d      	lsls	r5, r3, #30
 8002192:	4606      	mov	r6, r0
 8002194:	460c      	mov	r4, r1
 8002196:	d507      	bpl.n	80021a8 <__smakebuf_r+0x1c>
 8002198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	6123      	str	r3, [r4, #16]
 80021a0:	2301      	movs	r3, #1
 80021a2:	6163      	str	r3, [r4, #20]
 80021a4:	b002      	add	sp, #8
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	466a      	mov	r2, sp
 80021aa:	ab01      	add	r3, sp, #4
 80021ac:	f7ff ffca 	bl	8002144 <__swhatbuf_r>
 80021b0:	9900      	ldr	r1, [sp, #0]
 80021b2:	4605      	mov	r5, r0
 80021b4:	4630      	mov	r0, r6
 80021b6:	f7ff f9eb 	bl	8001590 <_malloc_r>
 80021ba:	b948      	cbnz	r0, 80021d0 <__smakebuf_r+0x44>
 80021bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c0:	059a      	lsls	r2, r3, #22
 80021c2:	d4ef      	bmi.n	80021a4 <__smakebuf_r+0x18>
 80021c4:	f023 0303 	bic.w	r3, r3, #3
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	81a3      	strh	r3, [r4, #12]
 80021ce:	e7e3      	b.n	8002198 <__smakebuf_r+0xc>
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <__smakebuf_r+0x7c>)
 80021d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80021d4:	89a3      	ldrh	r3, [r4, #12]
 80021d6:	6020      	str	r0, [r4, #0]
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	81a3      	strh	r3, [r4, #12]
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	6120      	str	r0, [r4, #16]
 80021e2:	6163      	str	r3, [r4, #20]
 80021e4:	9b01      	ldr	r3, [sp, #4]
 80021e6:	b15b      	cbz	r3, 8002200 <__smakebuf_r+0x74>
 80021e8:	4630      	mov	r0, r6
 80021ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ee:	f000 f8e3 	bl	80023b8 <_isatty_r>
 80021f2:	b128      	cbz	r0, 8002200 <__smakebuf_r+0x74>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	81a3      	strh	r3, [r4, #12]
 8002200:	89a0      	ldrh	r0, [r4, #12]
 8002202:	4305      	orrs	r5, r0
 8002204:	81a5      	strh	r5, [r4, #12]
 8002206:	e7cd      	b.n	80021a4 <__smakebuf_r+0x18>
 8002208:	08001f9d 	.word	0x08001f9d

0800220c <memchr>:
 800220c:	4603      	mov	r3, r0
 800220e:	b510      	push	{r4, lr}
 8002210:	b2c9      	uxtb	r1, r1
 8002212:	4402      	add	r2, r0
 8002214:	4293      	cmp	r3, r2
 8002216:	4618      	mov	r0, r3
 8002218:	d101      	bne.n	800221e <memchr+0x12>
 800221a:	2000      	movs	r0, #0
 800221c:	e003      	b.n	8002226 <memchr+0x1a>
 800221e:	7804      	ldrb	r4, [r0, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	428c      	cmp	r4, r1
 8002224:	d1f6      	bne.n	8002214 <memchr+0x8>
 8002226:	bd10      	pop	{r4, pc}

08002228 <__malloc_lock>:
 8002228:	4801      	ldr	r0, [pc, #4]	; (8002230 <__malloc_lock+0x8>)
 800222a:	f7ff bf89 	b.w	8002140 <__retarget_lock_acquire_recursive>
 800222e:	bf00      	nop
 8002230:	200000a0 	.word	0x200000a0

08002234 <__malloc_unlock>:
 8002234:	4801      	ldr	r0, [pc, #4]	; (800223c <__malloc_unlock+0x8>)
 8002236:	f7ff bf84 	b.w	8002142 <__retarget_lock_release_recursive>
 800223a:	bf00      	nop
 800223c:	200000a0 	.word	0x200000a0

08002240 <_raise_r>:
 8002240:	291f      	cmp	r1, #31
 8002242:	b538      	push	{r3, r4, r5, lr}
 8002244:	4604      	mov	r4, r0
 8002246:	460d      	mov	r5, r1
 8002248:	d904      	bls.n	8002254 <_raise_r+0x14>
 800224a:	2316      	movs	r3, #22
 800224c:	6003      	str	r3, [r0, #0]
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	bd38      	pop	{r3, r4, r5, pc}
 8002254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002256:	b112      	cbz	r2, 800225e <_raise_r+0x1e>
 8002258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800225c:	b94b      	cbnz	r3, 8002272 <_raise_r+0x32>
 800225e:	4620      	mov	r0, r4
 8002260:	f000 f830 	bl	80022c4 <_getpid_r>
 8002264:	462a      	mov	r2, r5
 8002266:	4601      	mov	r1, r0
 8002268:	4620      	mov	r0, r4
 800226a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800226e:	f000 b817 	b.w	80022a0 <_kill_r>
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00a      	beq.n	800228c <_raise_r+0x4c>
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	d103      	bne.n	8002282 <_raise_r+0x42>
 800227a:	2316      	movs	r3, #22
 800227c:	6003      	str	r3, [r0, #0]
 800227e:	2001      	movs	r0, #1
 8002280:	e7e7      	b.n	8002252 <_raise_r+0x12>
 8002282:	2400      	movs	r4, #0
 8002284:	4628      	mov	r0, r5
 8002286:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800228a:	4798      	blx	r3
 800228c:	2000      	movs	r0, #0
 800228e:	e7e0      	b.n	8002252 <_raise_r+0x12>

08002290 <raise>:
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <raise+0xc>)
 8002292:	4601      	mov	r1, r0
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f7ff bfd3 	b.w	8002240 <_raise_r>
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c

080022a0 <_kill_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	2300      	movs	r3, #0
 80022a4:	4d06      	ldr	r5, [pc, #24]	; (80022c0 <_kill_r+0x20>)
 80022a6:	4604      	mov	r4, r0
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	602b      	str	r3, [r5, #0]
 80022ae:	f7fe f8bb 	bl	8000428 <_kill>
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	d102      	bne.n	80022bc <_kill_r+0x1c>
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	b103      	cbz	r3, 80022bc <_kill_r+0x1c>
 80022ba:	6023      	str	r3, [r4, #0]
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
 80022be:	bf00      	nop
 80022c0:	200000a8 	.word	0x200000a8

080022c4 <_getpid_r>:
 80022c4:	f7fe b8a9 	b.w	800041a <_getpid>

080022c8 <__sread>:
 80022c8:	b510      	push	{r4, lr}
 80022ca:	460c      	mov	r4, r1
 80022cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d0:	f000 f894 	bl	80023fc <_read_r>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	bfab      	itete	ge
 80022d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022da:	89a3      	ldrhlt	r3, [r4, #12]
 80022dc:	181b      	addge	r3, r3, r0
 80022de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022e2:	bfac      	ite	ge
 80022e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80022e6:	81a3      	strhlt	r3, [r4, #12]
 80022e8:	bd10      	pop	{r4, pc}

080022ea <__swrite>:
 80022ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ee:	461f      	mov	r7, r3
 80022f0:	898b      	ldrh	r3, [r1, #12]
 80022f2:	4605      	mov	r5, r0
 80022f4:	05db      	lsls	r3, r3, #23
 80022f6:	460c      	mov	r4, r1
 80022f8:	4616      	mov	r6, r2
 80022fa:	d505      	bpl.n	8002308 <__swrite+0x1e>
 80022fc:	2302      	movs	r3, #2
 80022fe:	2200      	movs	r2, #0
 8002300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002304:	f000 f868 	bl	80023d8 <_lseek_r>
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	4632      	mov	r2, r6
 800230c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002310:	81a3      	strh	r3, [r4, #12]
 8002312:	4628      	mov	r0, r5
 8002314:	463b      	mov	r3, r7
 8002316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800231a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800231e:	f000 b817 	b.w	8002350 <_write_r>

08002322 <__sseek>:
 8002322:	b510      	push	{r4, lr}
 8002324:	460c      	mov	r4, r1
 8002326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232a:	f000 f855 	bl	80023d8 <_lseek_r>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	bf15      	itete	ne
 8002334:	6560      	strne	r0, [r4, #84]	; 0x54
 8002336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800233a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800233e:	81a3      	strheq	r3, [r4, #12]
 8002340:	bf18      	it	ne
 8002342:	81a3      	strhne	r3, [r4, #12]
 8002344:	bd10      	pop	{r4, pc}

08002346 <__sclose>:
 8002346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234a:	f000 b813 	b.w	8002374 <_close_r>
	...

08002350 <_write_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	2200      	movs	r2, #0
 800235a:	4d05      	ldr	r5, [pc, #20]	; (8002370 <_write_r+0x20>)
 800235c:	602a      	str	r2, [r5, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	f7fe f899 	bl	8000496 <_write>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_write_r+0x1e>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b103      	cbz	r3, 800236e <_write_r+0x1e>
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	200000a8 	.word	0x200000a8

08002374 <_close_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	2300      	movs	r3, #0
 8002378:	4d05      	ldr	r5, [pc, #20]	; (8002390 <_close_r+0x1c>)
 800237a:	4604      	mov	r4, r0
 800237c:	4608      	mov	r0, r1
 800237e:	602b      	str	r3, [r5, #0]
 8002380:	f7fe f8a5 	bl	80004ce <_close>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d102      	bne.n	800238e <_close_r+0x1a>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	b103      	cbz	r3, 800238e <_close_r+0x1a>
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	200000a8 	.word	0x200000a8

08002394 <_fstat_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	2300      	movs	r3, #0
 8002398:	4d06      	ldr	r5, [pc, #24]	; (80023b4 <_fstat_r+0x20>)
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	f7fe f89f 	bl	80004e4 <_fstat>
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	d102      	bne.n	80023b0 <_fstat_r+0x1c>
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	b103      	cbz	r3, 80023b0 <_fstat_r+0x1c>
 80023ae:	6023      	str	r3, [r4, #0]
 80023b0:	bd38      	pop	{r3, r4, r5, pc}
 80023b2:	bf00      	nop
 80023b4:	200000a8 	.word	0x200000a8

080023b8 <_isatty_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	2300      	movs	r3, #0
 80023bc:	4d05      	ldr	r5, [pc, #20]	; (80023d4 <_isatty_r+0x1c>)
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	f7fe f89d 	bl	8000502 <_isatty>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_isatty_r+0x1a>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_isatty_r+0x1a>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	200000a8 	.word	0x200000a8

080023d8 <_lseek_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	4604      	mov	r4, r0
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	4d05      	ldr	r5, [pc, #20]	; (80023f8 <_lseek_r+0x20>)
 80023e4:	602a      	str	r2, [r5, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7fe f895 	bl	8000516 <_lseek>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d102      	bne.n	80023f6 <_lseek_r+0x1e>
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	b103      	cbz	r3, 80023f6 <_lseek_r+0x1e>
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	200000a8 	.word	0x200000a8

080023fc <_read_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	2200      	movs	r2, #0
 8002406:	4d05      	ldr	r5, [pc, #20]	; (800241c <_read_r+0x20>)
 8002408:	602a      	str	r2, [r5, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f7fe f826 	bl	800045c <_read>
 8002410:	1c43      	adds	r3, r0, #1
 8002412:	d102      	bne.n	800241a <_read_r+0x1e>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b103      	cbz	r3, 800241a <_read_r+0x1e>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	200000a8 	.word	0x200000a8

08002420 <_init>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr

0800242c <_fini>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr
